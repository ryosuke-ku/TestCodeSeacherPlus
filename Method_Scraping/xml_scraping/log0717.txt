['maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultModelPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultModelPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleTaskSegmentCalculatorStub.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/test/java/org/apache/maven/artifact/metadata/TestMetadataSource.java', 'maven/maven-compat/src/test/java/org/apache/maven/repository/metadata/TestMetadataSource.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/factory/DefaultArtifactFactory.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/ActiveProjectArtifact.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/SettingsBuildingException.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/ToolchainsBuildingException.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorReaderDelegate.java', 'maven/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/interpolation/StringSearchModelInterpolator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/extension/internal/CoreExtensionEntry.java', 'maven/maven-core/src/main/java/org/apache/maven/extension/internal/CoreExtensionEntry.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/NoPluginFoundForPrefixException.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionResolutionException.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/repository/layout/FlatRepositoryLayout.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Log4j2Configuration.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Slf4jSimpleConfiguration.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/test/java/org/apache/maven/repository/LegacyRepositoryLayout.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/LegacyRepositoryLayout.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginPrefixResolverStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginVersionResolverStub.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/Lifecycle.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/LatestArtifactTransformation.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java', 'maven/maven-core/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java', 'maven/maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/merge/MavenToolchainMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/main/java/org/apache/maven/configuration/BasedirBeanConfigurationPathTranslator.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/ArtifactUtils.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java']


    public static org.apache.maven.model.Profile convertFromSettingsProfile( Profile settingsProfile )
    {
        org.apache.maven.model.Profile profile = new org.apache.maven.model.Profile();

        profile.setId( settingsProfile.getId() );

        profile.setSource( "settings.xml" );

        Activation settingsActivation = settingsProfile.getActivation();

        if ( settingsActivation != null )
        {
            org.apache.maven.model.Activation activation = new org.apache.maven.model.Activation();

            activation.setActiveByDefault( settingsActivation.isActiveByDefault() );

            activation.setJdk( settingsActivation.getJdk() );

            ActivationProperty settingsProp = settingsActivation.getProperty();

            if ( settingsProp != null )
            {
                org.apache.maven.model.ActivationProperty prop = new org.apache.maven.model.ActivationProperty();

                prop.setName( settingsProp.getName() );
                prop.setValue( settingsProp.getValue() );

                activation.setProperty( prop );
            }

            ActivationOS settingsOs = settingsActivation.getOs();

            if ( settingsOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( settingsOs.getArch() );
                os.setFamily( settingsOs.getFamily() );
                os.setName( settingsOs.getName() );
                os.setVersion( settingsOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.settings.ActivationFile settingsFile = settingsActivation.getFile();

            if ( settingsFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( settingsFile.getExists() );
                file.setMissing( settingsFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( settingsProfile.getProperties() );

        List<Repository> repos = settingsProfile.getRepositories();
        if ( repos != null )
        {
            for ( Repository repo : repos )
            {
                profile.addRepository( convertFromSettingsRepository( repo ) );
            }
        }

        List<Repository> pluginRepos = settingsProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Repository pluginRepo : pluginRepos )
            {
                profile.addPluginRepository( convertFromSettingsRepository( pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Profile profileXmlProfile )
    {
        Profile profile = new Profile();

        profile.setId( profileXmlProfile.getId() );

        profile.setSource( "profiles.xml" );

        org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();

        if ( profileActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( profileActivation.isActiveByDefault() );

            activation.setJdk( profileActivation.getJdk() );

            org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();

            if ( profileProp != null )
            {
                ActivationProperty prop = new ActivationProperty();

                prop.setName( profileProp.getName() );
                prop.setValue( profileProp.getValue() );

                activation.setProperty( prop );
            }


            ActivationOS profileOs = profileActivation.getOs();

            if ( profileOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( profileOs.getArch() );
                os.setFamily( profileOs.getFamily() );
                os.setName( profileOs.getName() );
                os.setVersion( profileOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();

            if ( profileFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( profileFile.getExists() );
                file.setMissing( profileFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( profileXmlProfile.getProperties() );

        List repos = profileXmlProfile.getRepositories();
        if ( repos != null )
        {
            for ( Object repo : repos )
            {
                profile.addRepository( convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) repo ) );
            }
        }

        List pluginRepos = profileXmlProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Object pluginRepo : pluginRepos )
            {
                profile.addPluginRepository(
                    convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertToSettingsProfile( org.apache.maven.model.Profile modelProfile )
    {
        Profile profile = new Profile();

        profile.setId( modelProfile.getId() );

        org.apache.maven.model.Activation modelActivation = modelProfile.getActivation();

        if ( modelActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( modelActivation.isActiveByDefault() );

            activation.setJdk( modelActivation.getJdk() );

            org.apache.maven.model.ActivationProperty modelProp = modelActivation.getProperty();

            if ( modelProp != null )
            {
                ActivationProperty prop = new ActivationProperty();
                prop.setName( modelProp.getName() );
                prop.setValue( modelProp.getValue() );
                activation.setProperty( prop );
            }

            org.apache.maven.model.ActivationOS modelOs = modelActivation.getOs();

            if ( modelOs != null )
            {
                ActivationOS os = new ActivationOS();

                os.setArch( modelOs.getArch() );
                os.setFamily( modelOs.getFamily() );
                os.setName( modelOs.getName() );
                os.setVersion( modelOs.getVersion() );

                activation.setOs( os );
            }

            ActivationFile modelFile = modelActivation.getFile();

            if ( modelFile != null )
            {
                org.apache.maven.settings.ActivationFile file = new org.apache.maven.settings.ActivationFile();

                file.setExists( modelFile.getExists() );
                file.setMissing( modelFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( modelProfile.getProperties() );

        List<org.apache.maven.model.Repository> repos = modelProfile.getRepositories();
        if ( repos != null )
        {
            for ( org.apache.maven.model.Repository repo : repos )
            {
                profile.addRepository( convertToSettingsRepository( repo ) );
            }
        }

        List<org.apache.maven.model.Repository> pluginRepos = modelProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( org.apache.maven.model.Repository pluginRepo : pluginRepos )
            {
                profile.addPluginRepository( convertToSettingsRepository( pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Profile profileXmlProfile )
    {
        Profile profile = new Profile();

        profile.setId( profileXmlProfile.getId() );

        profile.setSource( "profiles.xml" );

        org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();

        if ( profileActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( profileActivation.isActiveByDefault() );

            activation.setJdk( profileActivation.getJdk() );

            org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();

            if ( profileProp != null )
            {
                ActivationProperty prop = new ActivationProperty();

                prop.setName( profileProp.getName() );
                prop.setValue( profileProp.getValue() );

                activation.setProperty( prop );
            }


            ActivationOS profileOs = profileActivation.getOs();

            if ( profileOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( profileOs.getArch() );
                os.setFamily( profileOs.getFamily() );
                os.setName( profileOs.getName() );
                os.setVersion( profileOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();

            if ( profileFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( profileFile.getExists() );
                file.setMissing( profileFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( profileXmlProfile.getProperties() );

        List repos = profileXmlProfile.getRepositories();
        if ( repos != null )
        {
            for ( Object repo : repos )
            {
                profile.addRepository( convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) repo ) );
            }
        }

        List pluginRepos = profileXmlProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Object pluginRepo : pluginRepos )
            {
                profile.addPluginRepository(
                    convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) pluginRepo ) );
            }
        }

        return profile;
    }


    private MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
        throws MavenExecutionRequestPopulationException
    {
        if ( settings == null )
        {
            return request;
        }

        request.setOffline( settings.isOffline() );

        request.setInteractiveMode( settings.isInteractiveMode() );

        request.setPluginGroups( settings.getPluginGroups() );

        request.setLocalRepositoryPath( settings.getLocalRepository() );

        for ( Server server : settings.getServers() )
        {
            server = server.clone();

            request.addServer( server );
        }

        //  <proxies>
        //    <proxy>
        //      <active>true</active>
        //      <protocol>http</protocol>
        //      <host>proxy.somewhere.com</host>
        //      <port>8080</port>
        //      <username>proxyuser</username>
        //      <password>somepassword</password>
        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
        //    </proxy>
        //  </proxies>

        for ( Proxy proxy : settings.getProxies() )
        {
            if ( !proxy.isActive() )
            {
                continue;
            }

            proxy = proxy.clone();

            request.addProxy( proxy );
        }

        // <mirrors>
        //   <mirror>
        //     <id>nexus</id>
        //     <mirrorOf>*</mirrorOf>
        //     <url>http://repository.sonatype.org/content/groups/public</url>
        //   </mirror>
        // </mirrors>

        for ( Mirror mirror : settings.getMirrors() )
        {
            mirror = mirror.clone();

            request.addMirror( mirror );
        }

        request.setActiveProfiles( settings.getActiveProfiles() );

        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
        {
            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );

            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
            {
                List<Repository> remoteRepositories = rawProfile.getRepositories();
                for ( Repository remoteRepository : remoteRepositories )
                {
                    try
                    {
                        request.addRemoteRepository( 
                            MavenRepositorySystem.buildArtifactRepository( remoteRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }
                
                List<Repository> pluginRepositories = rawProfile.getPluginRepositories();
                for ( Repository pluginRepository : pluginRepositories )
                {
                    try
                    {
                        request.addPluginArtifactRepository( 
                            MavenRepositorySystem.buildArtifactRepository( pluginRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }                
            }
        }
        return request;
    }


    public MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
        throws MavenExecutionRequestPopulationException
    {
        if ( settings == null )
        {
            return request;
        }

        request.setOffline( settings.isOffline() );

        request.setInteractiveMode( settings.isInteractiveMode() );

        request.setPluginGroups( settings.getPluginGroups() );

        request.setLocalRepositoryPath( settings.getLocalRepository() );

        for ( Server server : settings.getServers() )
        {
            server = server.clone();

            request.addServer( server );
        }

        //  <proxies>
        //    <proxy>
        //      <active>true</active>
        //      <protocol>http</protocol>
        //      <host>proxy.somewhere.com</host>
        //      <port>8080</port>
        //      <username>proxyuser</username>
        //      <password>somepassword</password>
        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
        //    </proxy>
        //  </proxies>

        for ( Proxy proxy : settings.getProxies() )
        {
            if ( !proxy.isActive() )
            {
                continue;
            }

            proxy = proxy.clone();

            request.addProxy( proxy );
        }

        // <mirrors>
        //   <mirror>
        //     <id>nexus</id>
        //     <mirrorOf>*</mirrorOf>
        //     <url>http://repository.sonatype.org/content/groups/public</url>
        //   </mirror>
        // </mirrors>

        for ( Mirror mirror : settings.getMirrors() )
        {
            mirror = mirror.clone();

            request.addMirror( mirror );
        }

        request.setActiveProfiles( settings.getActiveProfiles() );

        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
        {
            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );

            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
            {
                List<Repository> remoteRepositories = rawProfile.getRepositories();
                for ( Repository remoteRepository : remoteRepositories )
                {
                    try
                    {
                        request.addRemoteRepository( repositorySystem.buildArtifactRepository( remoteRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }

                List<Repository> pluginRepositories = rawProfile.getPluginRepositories();
                for ( Repository pluginRepo : pluginRepositories )
                {
                    try
                    {
                        request.addPluginArtifactRepository( repositorySystem.buildArtifactRepository( pluginRepo ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }
            }
        }

        return request;
    }    


        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                     boolean sourceDominant, Map<Object, Object> context )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();
                Map<Object, Plugin> master = new LinkedHashMap<>( tgt.size() * 2 );

                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    master.put( key, element );
                }

                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();
                List<Plugin> pending = new ArrayList<>();
                for ( Plugin element : src )
                {
                    Object key = getPluginKey( element );
                    Plugin existing = master.get( key );
                    if ( existing != null )
                    {
                        mergePlugin( existing, element, sourceDominant, context );

                        if ( !pending.isEmpty() )
                        {
                            predecessors.put( key, pending );
                            pending = new ArrayList<>();
                        }
                    }
                    else
                    {
                        pending.add( element );
                    }
                }

                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );
                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )
                {
                    List<Plugin> pre = predecessors.get( entry.getKey() );
                    if ( pre != null )
                    {
                        result.addAll( pre );
                    }
                    result.add( entry.getValue() );
                }
                result.addAll( pending );

                target.setPlugins( result );
            }
        }


        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                     boolean sourceDominant, Map<Object, Object> context )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();
                Map<Object, Plugin> master = new LinkedHashMap<>( src.size() * 2 );

                for ( Plugin element : src )
                {
                    if ( element.isInherited() || !element.getExecutions().isEmpty() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions
                        Plugin plugin = new Plugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergePlugin( plugin, element, sourceDominant, context );

                        Object key = getPluginKey( element );

                        master.put( key, plugin );
                    }
                }

                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();
                List<Plugin> pending = new ArrayList<>();
                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    Plugin existing = master.get( key );
                    if ( existing != null )
                    {
                        mergePlugin( element, existing, sourceDominant, context );

                        master.put( key, element );

                        if ( !pending.isEmpty() )
                        {
                            predecessors.put( key, pending );
                            pending = new ArrayList<>();
                        }
                    }
                    else
                    {
                        pending.add( element );
                    }
                }

                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );
                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )
                {
                    List<Plugin> pre = predecessors.get( entry.getKey() );
                    if ( pre != null )
                    {
                        result.addAll( pre );
                    }
                    result.add( entry.getValue() );
                }
                result.addAll( pending );

                target.setPlugins( result );
            }
        }


    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
    {
        if ( repositories == null )
        {
            return null;
        }

        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();

        for ( ArtifactRepository repository : repositories )
        {
            String key = repository.getId();

            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );

            if ( aliasedRepos == null )
            {
                aliasedRepos = new ArrayList<>();
                reposByKey.put( key, aliasedRepos );
            }

            aliasedRepos.add( repository );
        }

        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();

        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
        {
            List<ArtifactRepository> mirroredRepos = new ArrayList<>();

            List<ArtifactRepositoryPolicy> releasePolicies =
                new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                releasePolicies.add( aliasedRepo.getReleases() );
                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
            }

            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );

            List<ArtifactRepositoryPolicy> snapshotPolicies =
                new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                snapshotPolicies.add( aliasedRepo.getSnapshots() );
            }

            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );

            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );

            ArtifactRepository effectiveRepository =
                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
                                          snapshotPolicy, releasePolicy );

            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );

            effectiveRepository.setProxy( aliasedRepo.getProxy() );

            effectiveRepository.setMirroredRepositories( mirroredRepos );

            effectiveRepositories.add( effectiveRepository );
        }

        return effectiveRepositories;
    }


    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
    {
        if ( repositories == null )
        {
            return null;
        }

        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();

        for ( ArtifactRepository repository : repositories )
        {
            String key = repository.getId();

            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );

            if ( aliasedRepos == null )
            {
                aliasedRepos = new ArrayList<>();
                reposByKey.put( key, aliasedRepos );
            }

            aliasedRepos.add( repository );
        }

        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();

        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
        {
            List<ArtifactRepository> mirroredRepos = new ArrayList<>();

            List<ArtifactRepositoryPolicy> releasePolicies =
                    new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                releasePolicies.add( aliasedRepo.getReleases() );
                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
            }

            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );

            List<ArtifactRepositoryPolicy> snapshotPolicies =
                    new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                snapshotPolicies.add( aliasedRepo.getSnapshots() );
            }

            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );

            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );

            ArtifactRepository effectiveRepository =
                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
                            snapshotPolicy, releasePolicy );

            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );

            effectiveRepository.setProxy( aliasedRepo.getProxy() );

            effectiveRepository.setMirroredRepositories( mirroredRepos );

            effectiveRepositories.add( effectiveRepository );
        }

        return effectiveRepositories;
    }


    public void unalignFromBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( unalignFromBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( unalignFromBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( unalignFromBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( unalignFromBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( unalignFromBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( unalignFromBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( unalignFromBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir, ModelBuildingRequest request )
    {
        if ( model == null || basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            build.setScriptSourceDirectory( alignToBaseDirectory( build.getScriptSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>( build.getFilters().size() );
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir, ModelBuildingRequest request )
    {
        if ( model == null || basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            build.setScriptSourceDirectory( alignToBaseDirectory( build.getScriptSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>( build.getFilters().size() );
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void unalignFromBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( unalignFromBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( unalignFromBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( unalignFromBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( unalignFromBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( unalignFromBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( unalignFromBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( unalignFromBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                     ArtifactRepository repository, VersionResult result )
    {
        Versioning versioning = null;
        try
        {
            if ( metadata != null )
            {
                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
                {
                    syncContext.acquire( null, Collections.singleton( metadata ) );

                    if ( metadata.getFile() != null && metadata.getFile().exists() )
                    {
                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
                        {
                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();

                            /*
                            NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
                            of the local repository. This is especially troublesome during snapshot resolution so we try
                            to handle that gracefully.
                             */
                            if ( versioning != null && repository instanceof LocalRepository
                                     && versioning.getSnapshot() != null
                                     && versioning.getSnapshot().getBuildNumber() > 0 )
                            {
                                final Versioning repaired = new Versioning();
                                repaired.setLastUpdated( versioning.getLastUpdated() );
                                repaired.setSnapshot( new Snapshot() );
                                repaired.getSnapshot().setLocalCopy( true );
                                versioning = repaired;
                                throw new IOException( "Snapshot information corrupted with remote repository data"
                                                           + ", please verify that no remote repository uses the id '"
                                                           + repository.getId() + "'" );

                            }
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            invalidMetadata( session, trace, metadata, repository, e );
            result.addException( e );
        }

        return ( versioning != null ) ? versioning : new Versioning();
    }


    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                     ArtifactRepository repository, VersionRangeResult result )
    {
        Versioning versioning = null;
        try
        {
            if ( metadata != null )
            {
                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
                {
                    syncContext.acquire( null, Collections.singleton( metadata ) );

                    if ( metadata.getFile() != null && metadata.getFile().exists() )
                    {
                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
                        {
                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            invalidMetadata( session, trace, metadata, repository, e );
            result.addException( e );
        }

        return ( versioning != null ) ? versioning : new Versioning();
    }


                if ( repo != null )
                {
                    Mirror mirror = new Mirror();
                    mirror.setId( repo.getId() );
                    mirror.setUrl( repo.getUrl() );
                    mirror.setLayout( repo.getContentType() );
                    return mirror;
                }
            }
        }
        return null;
    }

    public void injectMirror( RepositorySystemSession session, List<ArtifactRepository> repositories )
    {
        if ( repositories != null && session != null )
        {
            for ( ArtifactRepository repository : repositories )
            {
                Mirror mirror = getMirror( session, repository );
                injectMirror( repository, mirror );
            }
        }
    }

    private void injectMirror( ArtifactRepository repository, Mirror mirror )
    {
        if ( mirror != null )
        {
            ArtifactRepository original =
                createArtifactRepository( repository.getId(), repository.getUrl(), repository.getLayout(),
                                          repository.getSnapshots(), repository.getReleases() );

            repository.setMirroredRepositories( Collections.singletonList( original ) );

            repository.setId( mirror.getId() );
            repository.setUrl( mirror.getUrl() );

            if ( StringUtils.isNotEmpty( mirror.getLayout() ) )


        else if ( Artifact.SCOPE_TEST.equals( scope ) || Artifact.SCOPE_PROVIDED.equals( scope ) )
        {
            return null;
        }
        else if ( Artifact.SCOPE_COMPILE.equals( scope ) && Artifact.SCOPE_COMPILE.equals( inheritedScope ) )
        {
            // added to retain compile artifactScope. Remove if you want compile inherited as runtime
            desiredScope = Artifact.SCOPE_COMPILE;
        }

        if ( Artifact.SCOPE_TEST.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_TEST;
        }

        if ( Artifact.SCOPE_PROVIDED.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_PROVIDED;
        }

        if ( Artifact.SCOPE_SYSTEM.equals( scope ) )
        {
            // system scopes come through unchanged...
            desiredScope = Artifact.SCOPE_SYSTEM;
        }

        ArtifactHandler handler = artifactHandlerManager.getArtifactHandler( type );

        return new DefaultArtifact( groupId, artifactId, versionRange, desiredScope, type, classifier, handler,
                                    optional );
    }
    
    //
    // Code taken from LegacyRepositorySystem
    //
        
    public ArtifactRepository createDefaultRemoteRepository( MavenExecutionRequest request )
        throws Exception
    {


['maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultModelPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultModelPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleTaskSegmentCalculatorStub.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/test/java/org/apache/maven/artifact/metadata/TestMetadataSource.java', 'maven/maven-compat/src/test/java/org/apache/maven/repository/metadata/TestMetadataSource.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/factory/DefaultArtifactFactory.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/ActiveProjectArtifact.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/SettingsBuildingException.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/ToolchainsBuildingException.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorReaderDelegate.java', 'maven/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/interpolation/StringSearchModelInterpolator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/extension/internal/CoreExtensionEntry.java', 'maven/maven-core/src/main/java/org/apache/maven/extension/internal/CoreExtensionEntry.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/NoPluginFoundForPrefixException.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionResolutionException.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/repository/layout/FlatRepositoryLayout.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Log4j2Configuration.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Slf4jSimpleConfiguration.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/test/java/org/apache/maven/repository/LegacyRepositoryLayout.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/LegacyRepositoryLayout.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginPrefixResolverStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginVersionResolverStub.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/Lifecycle.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/LatestArtifactTransformation.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java', 'maven/maven-core/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java', 'maven/maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/merge/MavenToolchainMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/main/java/org/apache/maven/configuration/BasedirBeanConfigurationPathTranslator.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/ArtifactUtils.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java']


    public static org.apache.maven.model.Profile convertFromSettingsProfile( Profile settingsProfile )
    {
        org.apache.maven.model.Profile profile = new org.apache.maven.model.Profile();

        profile.setId( settingsProfile.getId() );

        profile.setSource( "settings.xml" );

        Activation settingsActivation = settingsProfile.getActivation();

        if ( settingsActivation != null )
        {
            org.apache.maven.model.Activation activation = new org.apache.maven.model.Activation();

            activation.setActiveByDefault( settingsActivation.isActiveByDefault() );

            activation.setJdk( settingsActivation.getJdk() );

            ActivationProperty settingsProp = settingsActivation.getProperty();

            if ( settingsProp != null )
            {
                org.apache.maven.model.ActivationProperty prop = new org.apache.maven.model.ActivationProperty();

                prop.setName( settingsProp.getName() );
                prop.setValue( settingsProp.getValue() );

                activation.setProperty( prop );
            }

            ActivationOS settingsOs = settingsActivation.getOs();

            if ( settingsOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( settingsOs.getArch() );
                os.setFamily( settingsOs.getFamily() );
                os.setName( settingsOs.getName() );
                os.setVersion( settingsOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.settings.ActivationFile settingsFile = settingsActivation.getFile();

            if ( settingsFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( settingsFile.getExists() );
                file.setMissing( settingsFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( settingsProfile.getProperties() );

        List<Repository> repos = settingsProfile.getRepositories();
        if ( repos != null )
        {
            for ( Repository repo : repos )
            {
                profile.addRepository( convertFromSettingsRepository( repo ) );
            }
        }

        List<Repository> pluginRepos = settingsProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Repository pluginRepo : pluginRepos )
            {
                profile.addPluginRepository( convertFromSettingsRepository( pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Profile profileXmlProfile )
    {
        Profile profile = new Profile();

        profile.setId( profileXmlProfile.getId() );

        profile.setSource( "profiles.xml" );

        org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();

        if ( profileActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( profileActivation.isActiveByDefault() );

            activation.setJdk( profileActivation.getJdk() );

            org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();

            if ( profileProp != null )
            {
                ActivationProperty prop = new ActivationProperty();

                prop.setName( profileProp.getName() );
                prop.setValue( profileProp.getValue() );

                activation.setProperty( prop );
            }


            ActivationOS profileOs = profileActivation.getOs();

            if ( profileOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( profileOs.getArch() );
                os.setFamily( profileOs.getFamily() );
                os.setName( profileOs.getName() );
                os.setVersion( profileOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();

            if ( profileFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( profileFile.getExists() );
                file.setMissing( profileFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( profileXmlProfile.getProperties() );

        List repos = profileXmlProfile.getRepositories();
        if ( repos != null )
        {
            for ( Object repo : repos )
            {
                profile.addRepository( convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) repo ) );
            }
        }

        List pluginRepos = profileXmlProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Object pluginRepo : pluginRepos )
            {
                profile.addPluginRepository(
                    convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertToSettingsProfile( org.apache.maven.model.Profile modelProfile )
    {
        Profile profile = new Profile();

        profile.setId( modelProfile.getId() );

        org.apache.maven.model.Activation modelActivation = modelProfile.getActivation();

        if ( modelActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( modelActivation.isActiveByDefault() );

            activation.setJdk( modelActivation.getJdk() );

            org.apache.maven.model.ActivationProperty modelProp = modelActivation.getProperty();

            if ( modelProp != null )
            {
                ActivationProperty prop = new ActivationProperty();
                prop.setName( modelProp.getName() );
                prop.setValue( modelProp.getValue() );
                activation.setProperty( prop );
            }

            org.apache.maven.model.ActivationOS modelOs = modelActivation.getOs();

            if ( modelOs != null )
            {
                ActivationOS os = new ActivationOS();

                os.setArch( modelOs.getArch() );
                os.setFamily( modelOs.getFamily() );
                os.setName( modelOs.getName() );
                os.setVersion( modelOs.getVersion() );

                activation.setOs( os );
            }

            ActivationFile modelFile = modelActivation.getFile();

            if ( modelFile != null )
            {
                org.apache.maven.settings.ActivationFile file = new org.apache.maven.settings.ActivationFile();

                file.setExists( modelFile.getExists() );
                file.setMissing( modelFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( modelProfile.getProperties() );

        List<org.apache.maven.model.Repository> repos = modelProfile.getRepositories();
        if ( repos != null )
        {
            for ( org.apache.maven.model.Repository repo : repos )
            {
                profile.addRepository( convertToSettingsRepository( repo ) );
            }
        }

        List<org.apache.maven.model.Repository> pluginRepos = modelProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( org.apache.maven.model.Repository pluginRepo : pluginRepos )
            {
                profile.addPluginRepository( convertToSettingsRepository( pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Profile profileXmlProfile )
    {
        Profile profile = new Profile();

        profile.setId( profileXmlProfile.getId() );

        profile.setSource( "profiles.xml" );

        org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();

        if ( profileActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( profileActivation.isActiveByDefault() );

            activation.setJdk( profileActivation.getJdk() );

            org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();

            if ( profileProp != null )
            {
                ActivationProperty prop = new ActivationProperty();

                prop.setName( profileProp.getName() );
                prop.setValue( profileProp.getValue() );

                activation.setProperty( prop );
            }


            ActivationOS profileOs = profileActivation.getOs();

            if ( profileOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( profileOs.getArch() );
                os.setFamily( profileOs.getFamily() );
                os.setName( profileOs.getName() );
                os.setVersion( profileOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();

            if ( profileFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( profileFile.getExists() );
                file.setMissing( profileFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( profileXmlProfile.getProperties() );

        List repos = profileXmlProfile.getRepositories();
        if ( repos != null )
        {
            for ( Object repo : repos )
            {
                profile.addRepository( convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) repo ) );
            }
        }

        List pluginRepos = profileXmlProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Object pluginRepo : pluginRepos )
            {
                profile.addPluginRepository(
                    convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) pluginRepo ) );
            }
        }

        return profile;
    }


    private MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
        throws MavenExecutionRequestPopulationException
    {
        if ( settings == null )
        {
            return request;
        }

        request.setOffline( settings.isOffline() );

        request.setInteractiveMode( settings.isInteractiveMode() );

        request.setPluginGroups( settings.getPluginGroups() );

        request.setLocalRepositoryPath( settings.getLocalRepository() );

        for ( Server server : settings.getServers() )
        {
            server = server.clone();

            request.addServer( server );
        }

        //  <proxies>
        //    <proxy>
        //      <active>true</active>
        //      <protocol>http</protocol>
        //      <host>proxy.somewhere.com</host>
        //      <port>8080</port>
        //      <username>proxyuser</username>
        //      <password>somepassword</password>
        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
        //    </proxy>
        //  </proxies>

        for ( Proxy proxy : settings.getProxies() )
        {
            if ( !proxy.isActive() )
            {
                continue;
            }

            proxy = proxy.clone();

            request.addProxy( proxy );
        }

        // <mirrors>
        //   <mirror>
        //     <id>nexus</id>
        //     <mirrorOf>*</mirrorOf>
        //     <url>http://repository.sonatype.org/content/groups/public</url>
        //   </mirror>
        // </mirrors>

        for ( Mirror mirror : settings.getMirrors() )
        {
            mirror = mirror.clone();

            request.addMirror( mirror );
        }

        request.setActiveProfiles( settings.getActiveProfiles() );

        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
        {
            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );

            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
            {
                List<Repository> remoteRepositories = rawProfile.getRepositories();
                for ( Repository remoteRepository : remoteRepositories )
                {
                    try
                    {
                        request.addRemoteRepository( 
                            MavenRepositorySystem.buildArtifactRepository( remoteRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }
                
                List<Repository> pluginRepositories = rawProfile.getPluginRepositories();
                for ( Repository pluginRepository : pluginRepositories )
                {
                    try
                    {
                        request.addPluginArtifactRepository( 
                            MavenRepositorySystem.buildArtifactRepository( pluginRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }                
            }
        }
        return request;
    }


    public MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
        throws MavenExecutionRequestPopulationException
    {
        if ( settings == null )
        {
            return request;
        }

        request.setOffline( settings.isOffline() );

        request.setInteractiveMode( settings.isInteractiveMode() );

        request.setPluginGroups( settings.getPluginGroups() );

        request.setLocalRepositoryPath( settings.getLocalRepository() );

        for ( Server server : settings.getServers() )
        {
            server = server.clone();

            request.addServer( server );
        }

        //  <proxies>
        //    <proxy>
        //      <active>true</active>
        //      <protocol>http</protocol>
        //      <host>proxy.somewhere.com</host>
        //      <port>8080</port>
        //      <username>proxyuser</username>
        //      <password>somepassword</password>
        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
        //    </proxy>
        //  </proxies>

        for ( Proxy proxy : settings.getProxies() )
        {
            if ( !proxy.isActive() )
            {
                continue;
            }

            proxy = proxy.clone();

            request.addProxy( proxy );
        }

        // <mirrors>
        //   <mirror>
        //     <id>nexus</id>
        //     <mirrorOf>*</mirrorOf>
        //     <url>http://repository.sonatype.org/content/groups/public</url>
        //   </mirror>
        // </mirrors>

        for ( Mirror mirror : settings.getMirrors() )
        {
            mirror = mirror.clone();

            request.addMirror( mirror );
        }

        request.setActiveProfiles( settings.getActiveProfiles() );

        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
        {
            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );

            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
            {
                List<Repository> remoteRepositories = rawProfile.getRepositories();
                for ( Repository remoteRepository : remoteRepositories )
                {
                    try
                    {
                        request.addRemoteRepository( repositorySystem.buildArtifactRepository( remoteRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }

                List<Repository> pluginRepositories = rawProfile.getPluginRepositories();
                for ( Repository pluginRepo : pluginRepositories )
                {
                    try
                    {
                        request.addPluginArtifactRepository( repositorySystem.buildArtifactRepository( pluginRepo ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }
            }
        }

        return request;
    }    


        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                     boolean sourceDominant, Map<Object, Object> context )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();
                Map<Object, Plugin> master = new LinkedHashMap<>( tgt.size() * 2 );

                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    master.put( key, element );
                }

                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();
                List<Plugin> pending = new ArrayList<>();
                for ( Plugin element : src )
                {
                    Object key = getPluginKey( element );
                    Plugin existing = master.get( key );
                    if ( existing != null )
                    {
                        mergePlugin( existing, element, sourceDominant, context );

                        if ( !pending.isEmpty() )
                        {
                            predecessors.put( key, pending );
                            pending = new ArrayList<>();
                        }
                    }
                    else
                    {
                        pending.add( element );
                    }
                }

                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );
                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )
                {
                    List<Plugin> pre = predecessors.get( entry.getKey() );
                    if ( pre != null )
                    {
                        result.addAll( pre );
                    }
                    result.add( entry.getValue() );
                }
                result.addAll( pending );

                target.setPlugins( result );
            }
        }


        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                     boolean sourceDominant, Map<Object, Object> context )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();
                Map<Object, Plugin> master = new LinkedHashMap<>( src.size() * 2 );

                for ( Plugin element : src )
                {
                    if ( element.isInherited() || !element.getExecutions().isEmpty() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions
                        Plugin plugin = new Plugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergePlugin( plugin, element, sourceDominant, context );

                        Object key = getPluginKey( element );

                        master.put( key, plugin );
                    }
                }

                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();
                List<Plugin> pending = new ArrayList<>();
                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    Plugin existing = master.get( key );
                    if ( existing != null )
                    {
                        mergePlugin( element, existing, sourceDominant, context );

                        master.put( key, element );

                        if ( !pending.isEmpty() )
                        {
                            predecessors.put( key, pending );
                            pending = new ArrayList<>();
                        }
                    }
                    else
                    {
                        pending.add( element );
                    }
                }

                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );
                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )
                {
                    List<Plugin> pre = predecessors.get( entry.getKey() );
                    if ( pre != null )
                    {
                        result.addAll( pre );
                    }
                    result.add( entry.getValue() );
                }
                result.addAll( pending );

                target.setPlugins( result );
            }
        }


    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
    {
        if ( repositories == null )
        {
            return null;
        }

        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();

        for ( ArtifactRepository repository : repositories )
        {
            String key = repository.getId();

            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );

            if ( aliasedRepos == null )
            {
                aliasedRepos = new ArrayList<>();
                reposByKey.put( key, aliasedRepos );
            }

            aliasedRepos.add( repository );
        }

        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();

        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
        {
            List<ArtifactRepository> mirroredRepos = new ArrayList<>();

            List<ArtifactRepositoryPolicy> releasePolicies =
                new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                releasePolicies.add( aliasedRepo.getReleases() );
                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
            }

            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );

            List<ArtifactRepositoryPolicy> snapshotPolicies =
                new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                snapshotPolicies.add( aliasedRepo.getSnapshots() );
            }

            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );

            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );

            ArtifactRepository effectiveRepository =
                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
                                          snapshotPolicy, releasePolicy );

            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );

            effectiveRepository.setProxy( aliasedRepo.getProxy() );

            effectiveRepository.setMirroredRepositories( mirroredRepos );

            effectiveRepositories.add( effectiveRepository );
        }

        return effectiveRepositories;
    }


    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
    {
        if ( repositories == null )
        {
            return null;
        }

        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();

        for ( ArtifactRepository repository : repositories )
        {
            String key = repository.getId();

            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );

            if ( aliasedRepos == null )
            {
                aliasedRepos = new ArrayList<>();
                reposByKey.put( key, aliasedRepos );
            }

            aliasedRepos.add( repository );
        }

        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();

        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
        {
            List<ArtifactRepository> mirroredRepos = new ArrayList<>();

            List<ArtifactRepositoryPolicy> releasePolicies =
                    new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                releasePolicies.add( aliasedRepo.getReleases() );
                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
            }

            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );

            List<ArtifactRepositoryPolicy> snapshotPolicies =
                    new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                snapshotPolicies.add( aliasedRepo.getSnapshots() );
            }

            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );

            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );

            ArtifactRepository effectiveRepository =
                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
                            snapshotPolicy, releasePolicy );

            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );

            effectiveRepository.setProxy( aliasedRepo.getProxy() );

            effectiveRepository.setMirroredRepositories( mirroredRepos );

            effectiveRepositories.add( effectiveRepository );
        }

        return effectiveRepositories;
    }


    public void unalignFromBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( unalignFromBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( unalignFromBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( unalignFromBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( unalignFromBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( unalignFromBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( unalignFromBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( unalignFromBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir, ModelBuildingRequest request )
    {
        if ( model == null || basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            build.setScriptSourceDirectory( alignToBaseDirectory( build.getScriptSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>( build.getFilters().size() );
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir, ModelBuildingRequest request )
    {
        if ( model == null || basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            build.setScriptSourceDirectory( alignToBaseDirectory( build.getScriptSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>( build.getFilters().size() );
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void unalignFromBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( unalignFromBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( unalignFromBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( unalignFromBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( unalignFromBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( unalignFromBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( unalignFromBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( unalignFromBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                     ArtifactRepository repository, VersionResult result )
    {
        Versioning versioning = null;
        try
        {
            if ( metadata != null )
            {
                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
                {
                    syncContext.acquire( null, Collections.singleton( metadata ) );

                    if ( metadata.getFile() != null && metadata.getFile().exists() )
                    {
                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
                        {
                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();

                            /*
                            NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
                            of the local repository. This is especially troublesome during snapshot resolution so we try
                            to handle that gracefully.
                             */
                            if ( versioning != null && repository instanceof LocalRepository
                                     && versioning.getSnapshot() != null
                                     && versioning.getSnapshot().getBuildNumber() > 0 )
                            {
                                final Versioning repaired = new Versioning();
                                repaired.setLastUpdated( versioning.getLastUpdated() );
                                repaired.setSnapshot( new Snapshot() );
                                repaired.getSnapshot().setLocalCopy( true );
                                versioning = repaired;
                                throw new IOException( "Snapshot information corrupted with remote repository data"
                                                           + ", please verify that no remote repository uses the id '"
                                                           + repository.getId() + "'" );

                            }
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            invalidMetadata( session, trace, metadata, repository, e );
            result.addException( e );
        }

        return ( versioning != null ) ? versioning : new Versioning();
    }


    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                     ArtifactRepository repository, VersionRangeResult result )
    {
        Versioning versioning = null;
        try
        {
            if ( metadata != null )
            {
                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
                {
                    syncContext.acquire( null, Collections.singleton( metadata ) );

                    if ( metadata.getFile() != null && metadata.getFile().exists() )
                    {
                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
                        {
                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            invalidMetadata( session, trace, metadata, repository, e );
            result.addException( e );
        }

        return ( versioning != null ) ? versioning : new Versioning();
    }


                if ( repo != null )
                {
                    Mirror mirror = new Mirror();
                    mirror.setId( repo.getId() );
                    mirror.setUrl( repo.getUrl() );
                    mirror.setLayout( repo.getContentType() );
                    return mirror;
                }
            }
        }
        return null;
    }

    public void injectMirror( RepositorySystemSession session, List<ArtifactRepository> repositories )
    {
        if ( repositories != null && session != null )
        {
            for ( ArtifactRepository repository : repositories )
            {
                Mirror mirror = getMirror( session, repository );
                injectMirror( repository, mirror );
            }
        }
    }

    private void injectMirror( ArtifactRepository repository, Mirror mirror )
    {
        if ( mirror != null )
        {
            ArtifactRepository original =
                createArtifactRepository( repository.getId(), repository.getUrl(), repository.getLayout(),
                                          repository.getSnapshots(), repository.getReleases() );

            repository.setMirroredRepositories( Collections.singletonList( original ) );

            repository.setId( mirror.getId() );
            repository.setUrl( mirror.getUrl() );

            if ( StringUtils.isNotEmpty( mirror.getLayout() ) )


        else if ( Artifact.SCOPE_TEST.equals( scope ) || Artifact.SCOPE_PROVIDED.equals( scope ) )
        {
            return null;
        }
        else if ( Artifact.SCOPE_COMPILE.equals( scope ) && Artifact.SCOPE_COMPILE.equals( inheritedScope ) )
        {
            // added to retain compile artifactScope. Remove if you want compile inherited as runtime
            desiredScope = Artifact.SCOPE_COMPILE;
        }

        if ( Artifact.SCOPE_TEST.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_TEST;
        }

        if ( Artifact.SCOPE_PROVIDED.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_PROVIDED;
        }

        if ( Artifact.SCOPE_SYSTEM.equals( scope ) )
        {
            // system scopes come through unchanged...
            desiredScope = Artifact.SCOPE_SYSTEM;
        }

        ArtifactHandler handler = artifactHandlerManager.getArtifactHandler( type );

        return new DefaultArtifact( groupId, artifactId, versionRange, desiredScope, type, classifier, handler,
                                    optional );
    }
    
    //
    // Code taken from LegacyRepositorySystem
    //
        
    public ArtifactRepository createDefaultRemoteRepository( MavenExecutionRequest request )
        throws Exception
    {


['maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultModelPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultModelPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleTaskSegmentCalculatorStub.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/test/java/org/apache/maven/artifact/metadata/TestMetadataSource.java', 'maven/maven-compat/src/test/java/org/apache/maven/repository/metadata/TestMetadataSource.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/factory/DefaultArtifactFactory.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/ActiveProjectArtifact.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/SettingsBuildingException.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/ToolchainsBuildingException.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorReaderDelegate.java', 'maven/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/interpolation/StringSearchModelInterpolator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/extension/internal/CoreExtensionEntry.java', 'maven/maven-core/src/main/java/org/apache/maven/extension/internal/CoreExtensionEntry.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/NoPluginFoundForPrefixException.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionResolutionException.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/repository/layout/FlatRepositoryLayout.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Log4j2Configuration.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Slf4jSimpleConfiguration.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', 'maven/maven-compat/src/test/java/org/apache/maven/repository/LegacyRepositoryLayout.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/LegacyRepositoryLayout.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginPrefixResolverStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginVersionResolverStub.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/Lifecycle.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/LatestArtifactTransformation.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java', 'maven/maven-core/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java', 'maven/maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/merge/MavenToolchainMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java', 'maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java', 'maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', 'maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', 'maven/maven-core/src/main/java/org/apache/maven/configuration/BasedirBeanConfigurationPathTranslator.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java', 'maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', 'maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/ArtifactUtils.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', 'maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java', 'maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', 'maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', 'maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java']
['1:maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', '2:maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', '3:maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', '4:maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', '5:maven/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java', '6:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', '7:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '8:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '9:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '10:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '11:maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', '12:maven/maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultModelPathTranslator.java', '13:maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', '14:maven/maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultModelPathTranslator.java', '15:maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', '16:maven/maven-compat/src/main/java/org/apache/maven/project/path/DefaultPathTranslator.java', '17:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java', '18:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java', '25:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '26:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '27:maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', '28:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '29:maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', '30:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '31:maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', '32:maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', '35:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '36:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '37:maven/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java', '38:maven/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java', '39:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '40:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '41:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '42:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '43:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '44:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '45:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '46:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '47:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '48:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '49:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '50:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '51:maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', '52:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '53:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '54:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '55:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '56:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '59:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', '60:maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', '61:maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', '62:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '63:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '64:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '65:maven/maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScope.java', '66:maven/maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java', '67:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleTaskSegmentCalculatorStub.java', '68:maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', '69:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '70:maven/maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java', '71:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '72:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '73:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '74:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '75:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '76:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '77:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '78:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '79:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '80:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '81:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '82:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '83:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '84:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '85:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '86:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '87:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '88:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '89:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '90:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '91:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '92:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '93:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '94:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '95:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '96:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '97:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '98:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '99:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '100:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '101:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '102:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '103:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '104:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '105:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '106:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '107:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '108:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '109:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '110:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '111:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '112:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '113:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '114:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '115:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '116:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '117:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '118:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '119:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '120:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '121:maven/maven-compat/src/test/java/org/apache/maven/artifact/metadata/TestMetadataSource.java', '122:maven/maven-compat/src/test/java/org/apache/maven/repository/metadata/TestMetadataSource.java', '123:maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', '124:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', '125:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '126:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '127:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '128:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '129:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '130:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '131:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '132:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '133:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '134:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '135:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '136:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '137:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '138:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '139:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '140:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '141:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '142:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '143:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '144:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '145:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '146:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '147:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '148:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '149:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '150:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '151:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '152:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '153:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '154:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '155:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '156:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '157:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '158:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '159:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '160:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '161:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '162:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '163:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '164:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '165:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '166:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '167:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '168:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '169:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '170:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '173:maven/maven-core/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java', '174:maven/maven-compat/src/test/java/org/apache/maven/project/AbstractMavenProjectTestCase.java', '175:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '176:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '177:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '178:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '179:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '180:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '181:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '182:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '183:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '184:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '185:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '186:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '187:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '188:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '189:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '190:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '191:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '192:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '193:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '194:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '195:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '196:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '197:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '198:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '199:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '200:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '201:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '202:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '203:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '204:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '205:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '206:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '207:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '208:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '209:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '210:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '211:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '212:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '213:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '214:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '215:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '216:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '217:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '218:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '219:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '220:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '221:maven/maven-core/src/main/java/org/apache/maven/artifact/factory/DefaultArtifactFactory.java', '222:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '223:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '224:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '225:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '226:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '227:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '228:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '229:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '230:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '231:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '232:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '233:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '234:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '235:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '236:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '237:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '238:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '239:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '240:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '241:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '242:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '243:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '244:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '245:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '246:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '247:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '248:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '249:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '250:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '251:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '252:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '253:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '254:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '255:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '256:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '257:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '258:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '259:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '260:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '261:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '262:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '263:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '264:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '265:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '266:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '267:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '268:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '269:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '270:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '271:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '272:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '273:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '274:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '275:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '276:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '277:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '278:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '279:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '280:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '281:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '282:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '283:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '284:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '285:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '286:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '287:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '288:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '289:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '290:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '291:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '292:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '293:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '294:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '295:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '296:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '297:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '298:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '299:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '300:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '301:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '302:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '303:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '304:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '305:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '306:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java', '307:maven/maven-core/src/main/java/org/apache/maven/project/artifact/ActiveProjectArtifact.java', '308:maven/maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java', '309:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/SettingsBuildingException.java', '310:maven/maven-core/src/main/java/org/apache/maven/toolchain/building/ToolchainsBuildingException.java', '311:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '312:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '313:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '314:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '315:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '316:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '317:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '318:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '319:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '320:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '321:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '322:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '323:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '324:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '325:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '326:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '327:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '328:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '329:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '330:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '331:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '332:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '333:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '334:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '335:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '336:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '337:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '338:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '339:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '340:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '341:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '342:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '343:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '344:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '345:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '346:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '347:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '348:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '349:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '350:maven/maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java', '351:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '352:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '353:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '354:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '355:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '356:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '357:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '358:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '359:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '360:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '361:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '362:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '363:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '364:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '365:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '366:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '367:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '368:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '389:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '390:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '391:maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java', '392:maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java', '393:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '394:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '395:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '396:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '397:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '398:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '399:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '400:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '401:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '402:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '403:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '404:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '405:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '406:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '407:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '408:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '409:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '410:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '411:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '412:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '413:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '414:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '415:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '416:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '417:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '418:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '419:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '420:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '421:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '422:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '423:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '424:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '425:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '426:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '427:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '428:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '429:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '430:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '431:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '432:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '433:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '434:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '435:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '436:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '437:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '438:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '439:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '440:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '441:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '442:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '443:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '444:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '445:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '446:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '447:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '448:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '449:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '450:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '451:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '452:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '453:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '454:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '455:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '456:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '457:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '458:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '459:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '460:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '461:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '462:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '463:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '464:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '465:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '466:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '467:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '468:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '469:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '470:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '471:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '472:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '473:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '474:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '475:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '476:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '477:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '478:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '479:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '480:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '481:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '482:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '483:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '484:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '485:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '486:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '487:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '488:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '489:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '490:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '491:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '492:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '493:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '494:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '495:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '496:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '497:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '498:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '499:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '500:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '501:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '502:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '503:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '504:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '505:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '506:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '507:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '508:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '509:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '510:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '511:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '512:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '513:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '514:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '515:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '516:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '517:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '518:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '519:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '520:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '521:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '522:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '523:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '524:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '525:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '526:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '527:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '528:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '529:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '530:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '531:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '532:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '533:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '534:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '535:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '536:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '537:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '538:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '539:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '540:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '541:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '542:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '543:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '544:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '545:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '546:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '547:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '548:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '549:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '550:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '551:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '552:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '553:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '554:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '555:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '556:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '557:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '558:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '559:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '560:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '561:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '562:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '563:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '564:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '565:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '566:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '567:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '568:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '569:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '570:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '571:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '572:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '573:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '574:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '575:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '576:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '577:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '578:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '579:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '580:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '581:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '582:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '583:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '584:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '585:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '586:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '587:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '588:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '589:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '590:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '591:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '592:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '593:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '594:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '595:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '596:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '597:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '598:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '599:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '600:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '601:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '602:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '603:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '604:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '605:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '606:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '607:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '608:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '609:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '610:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '611:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '612:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '613:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '614:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '615:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '616:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '617:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '618:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '619:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '620:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '621:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '622:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '623:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '624:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '625:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '626:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '627:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '628:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '629:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '630:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '631:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '632:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '633:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '634:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '635:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '636:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '637:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '638:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '639:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '640:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '641:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '642:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '643:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '644:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '645:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '646:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '647:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '648:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '649:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '650:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '651:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '652:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '653:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '654:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '655:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '656:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '657:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '658:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '659:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '660:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '661:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '662:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '663:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '664:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '665:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '666:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '667:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '668:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '669:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '670:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '671:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '672:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '673:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '674:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '675:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '676:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '677:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '678:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '679:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '680:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '681:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '682:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '683:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '684:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '685:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '686:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '687:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '688:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '689:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '690:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '691:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '692:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '693:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '694:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '695:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '696:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '697:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '698:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '699:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '700:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '701:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '702:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '703:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '704:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '705:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '706:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '707:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '708:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '709:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '710:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '711:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '712:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '713:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '714:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '715:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '716:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '717:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '718:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '719:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '720:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '721:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '722:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '723:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '724:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '725:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '726:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '727:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '728:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '729:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '730:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '731:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '732:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '733:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '734:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '735:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '736:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '737:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '738:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '739:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '740:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '747:maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', '748:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', '749:maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', '750:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', '751:maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', '752:maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', '753:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', '754:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', '755:maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', '756:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', '757:maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', '758:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', '759:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorReaderDelegate.java', '760:maven/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java', '761:maven/maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java', '762:maven/maven-compat/src/main/java/org/apache/maven/artifact/repository/DefaultArtifactRepository.java', '763:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '764:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '765:maven/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java', '766:maven/maven-compat/src/main/java/org/apache/maven/project/interpolation/StringSearchModelInterpolator.java', '781:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java', '782:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java', '783:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '784:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '785:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '786:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '797:maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '798:maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '827:maven/maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java', '828:maven/maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java', '833:maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', '834:maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', '837:maven/maven-core/src/main/java/org/apache/maven/extension/internal/CoreExtensionEntry.java', '838:maven/maven-core/src/main/java/org/apache/maven/extension/internal/CoreExtensionEntry.java', '841:maven/maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java', '842:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '843:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '844:maven/maven-compat/src/main/java/org/apache/maven/project/ModelUtils.java', '845:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '846:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '853:maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/NoPluginFoundForPrefixException.java', '854:maven/maven-core/src/main/java/org/apache/maven/plugin/version/PluginVersionResolutionException.java', '861:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java', '862:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '863:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '864:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorUtils.java', '865:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', '866:maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', '867:maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', '868:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '869:maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', '870:maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '871:maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', '872:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', '873:maven/maven-core/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java', '874:maven/maven-compat/src/main/java/org/apache/maven/artifact/repository/layout/FlatRepositoryLayout.java', '877:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '878:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '879:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '880:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '881:maven/maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java', '882:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java', '883:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', '884:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '885:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', '886:maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '887:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', '888:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', '889:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '890:maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '891:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', '892:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '899:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', '900:maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '901:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '902:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '903:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '904:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '905:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '906:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '909:maven/maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Log4j2Configuration.java', '910:maven/maven-embedder/src/main/java/org/apache/maven/cli/logging/impl/Slf4jSimpleConfiguration.java', '911:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '912:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '913:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '914:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '915:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '916:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '917:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '918:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '919:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '920:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '921:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '922:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '923:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '924:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '925:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '926:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '927:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '928:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '929:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '930:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '931:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '932:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '933:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '934:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '935:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '936:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '937:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '938:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '939:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '940:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '941:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '942:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '943:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '944:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '945:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '946:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '947:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '948:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '949:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '950:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '951:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '952:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '953:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '954:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '967:maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', '968:maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', '969:maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', '970:maven/maven-compat/src/main/java/org/apache/maven/profiles/ProfilesConversionUtils.java', '973:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '974:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '975:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '976:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '977:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '978:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '979:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '980:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '981:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '982:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '985:maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', '986:maven/maven-core/src/main/java/org/apache/maven/settings/SettingsUtils.java', '987:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '988:maven/maven-compat/src/main/java/org/apache/maven/profiles/activation/OperatingSystemProfileActivator.java', '989:maven/maven-compat/src/test/java/org/apache/maven/repository/LegacyRepositoryLayout.java', '990:maven/maven-core/src/test/java/org/apache/maven/repository/LegacyRepositoryLayout.java', '991:maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '992:maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '993:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginPrefixResolverStub.java', '994:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/PluginVersionResolverStub.java', '995:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java', '996:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java', '997:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java', '998:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadataGenerator.java', '999:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGenerator.java', '1000:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadataGenerator.java', '1007:maven/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java', '1008:maven/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/Lifecycle.java', '1009:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/LatestArtifactTransformation.java', '1010:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/transform/ReleaseArtifactTransformation.java', '1011:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '1012:maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java', '1013:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '1014:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '1015:maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositorySystem.java', '1016:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '1053:maven/maven-core/src/main/java/org/apache/maven/artifact/repository/MavenArtifactRepository.java', '1054:maven/maven-core/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java', '1070:maven/maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java', '1075:maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', '1076:maven/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java', '1079:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '1080:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '1081:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1082:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1083:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1084:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '1085:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1086:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1093:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1094:maven/maven-core/src/main/java/org/apache/maven/toolchain/merge/MavenToolchainMerger.java', '1095:maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', '1096:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', '1097:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', '1098:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '1099:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', '1100:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', '1101:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifeCyclePluginAnalyzerStub.java', '1102:maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '1103:maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', '1104:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java', '1105:maven/maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java', '1106:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', '1107:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1108:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '1109:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1110:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1111:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1112:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1113:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1114:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1115:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1116:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1117:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1118:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1119:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1120:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1121:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1122:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1123:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1124:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1125:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1126:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1127:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1128:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1129:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1130:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1131:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1132:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1133:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1134:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1135:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1136:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1137:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1138:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1139:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1140:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1141:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1142:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1143:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1144:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1145:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1146:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1147:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1148:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1149:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1150:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1151:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsProblem.java', '1152:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblem.java', '1153:maven/maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java', '1154:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', '1155:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1156:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1157:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1158:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1159:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1160:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1161:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1162:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1163:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1164:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1165:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1166:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1167:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1168:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1169:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1170:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1171:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1172:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1173:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1174:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1175:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1176:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1177:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1178:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1179:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1180:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1181:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1182:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1183:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1184:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1185:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1186:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1187:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1188:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1189:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1190:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1191:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1192:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1201:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1202:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1203:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1204:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1205:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1206:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1207:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1208:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1209:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1210:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1211:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1212:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1213:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1214:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1215:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1216:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1217:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1218:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1219:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1220:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1221:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1222:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1223:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1224:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1225:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1226:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1227:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1228:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1229:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1230:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1231:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1232:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1233:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1234:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1235:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1236:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1237:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1238:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '1239:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '1240:maven/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java', '1247:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1248:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1249:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1250:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1251:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1252:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1253:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1254:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1255:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1256:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1257:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1258:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1259:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1260:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1261:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1262:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1263:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1264:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1265:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1266:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1267:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1268:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1269:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1270:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1271:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1272:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1273:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1274:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1275:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1276:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1277:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1278:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1279:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1280:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1281:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1282:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1283:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1284:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1285:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1286:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1287:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1288:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1289:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1290:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1291:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1292:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1293:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1294:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1295:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1296:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1297:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1298:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1299:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1300:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1301:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1302:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1303:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1304:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1305:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1306:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1307:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1308:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1309:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1310:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1311:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1312:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1313:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1314:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1315:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1316:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1317:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1318:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1325:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1326:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1327:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1328:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1329:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1330:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1331:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1332:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1333:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1334:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1335:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1336:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1337:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1338:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1339:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1340:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1341:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1342:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1343:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1344:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1345:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1346:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1347:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1348:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1349:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1350:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1351:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1352:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1353:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1354:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1359:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1360:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1361:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1362:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1363:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1364:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1365:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1366:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1367:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1368:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1369:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1370:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1371:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1372:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1373:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1374:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1375:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1376:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1377:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1378:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1379:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1380:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1381:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1382:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1383:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1384:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1385:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1386:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1387:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1388:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1389:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1390:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1391:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1392:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1393:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1394:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1395:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1396:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1397:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1398:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1399:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1400:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1401:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1402:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1403:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1404:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1405:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1406:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1407:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1408:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1409:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1410:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1411:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1412:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1413:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1414:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1415:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1416:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1419:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1420:maven/maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java', '1421:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1422:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1423:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1424:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1425:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '1426:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1427:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '1428:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1429:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '1430:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1431:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '1432:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1433:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '1434:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1435:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1436:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '1437:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '1438:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1439:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '1440:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1441:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1442:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '1443:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '1444:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1445:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '1446:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1447:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '1448:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1449:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '1450:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1451:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '1452:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1453:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '1454:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1457:maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', '1458:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '1459:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', '1460:maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', '1461:maven/maven-core/src/test/java/org/apache/maven/lifecycle/EmptyLifecyclePluginAnalyzer.java', '1462:maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '1467:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java', '1468:maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', '1469:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java', '1470:maven/maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/LifecycleExecutionPlanCalculatorStub.java', '1471:maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java', '1472:maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '1473:maven/maven-core/src/test/java/org/apache/maven/repository/TestRepositoryConnector.java', '1474:maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '1475:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', '1476:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '1477:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '1478:maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '1479:maven/maven-compat/src/test/java/org/apache/maven/project/EmptyLifecyclePluginAnalyzer.java', '1480:maven/maven-core/src/test/java/org/apache/maven/project/EmptyLifecycleExecutor.java', '1481:maven/maven-core/src/main/java/org/apache/maven/configuration/BasedirBeanConfigurationPathTranslator.java', '1482:maven/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java', '1493:maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', '1494:maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', '1495:maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', '1496:maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', '1503:maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', '1504:maven/maven-core/src/main/java/org/apache/maven/eventspy/internal/EventSpyDispatcher.java', '1505:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1506:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1507:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1508:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1509:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1510:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1511:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1512:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1513:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1514:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1515:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1516:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1517:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1518:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1519:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1520:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1521:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1522:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1523:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1524:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1525:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1526:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1527:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1528:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1529:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1530:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1535:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1536:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '1537:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1538:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1539:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1540:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1541:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1542:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1543:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1544:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1545:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1546:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1547:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1548:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1549:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1550:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1551:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1552:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1553:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1554:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1555:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1556:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1557:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1558:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1559:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1560:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1561:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1562:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1563:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1564:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1571:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1572:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1573:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1574:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1575:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1576:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1577:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1578:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1579:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1580:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1581:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1582:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1583:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1584:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1585:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1586:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1587:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1588:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1589:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1590:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1591:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1592:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1593:maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '1594:maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '1595:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java', '1596:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java', '1597:maven/maven-artifact/src/main/java/org/apache/maven/artifact/resolver/AbstractArtifactResolutionException.java', '1598:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java', '1599:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '1600:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '1601:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1602:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1603:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1604:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1605:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1606:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1607:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1608:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1609:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1610:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1611:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1612:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1613:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1614:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1615:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1616:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1617:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1618:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1619:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1620:maven/maven-compat/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java', '1621:maven/maven-embedder/src/main/java/org/apache/maven/cli/configuration/SettingsXmlConfigurationProcessor.java', '1622:maven/maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java', '1623:maven/maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java', '1624:maven/maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java', '1627:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1628:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1629:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1630:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1631:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1632:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1633:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1634:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1635:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1636:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1637:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1638:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1639:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1640:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1641:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1642:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1643:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1644:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1645:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1646:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1647:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1648:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1649:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1650:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1651:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1652:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1653:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1654:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1655:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1656:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1657:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1658:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1659:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1660:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1661:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1662:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1663:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1664:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1665:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1666:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1667:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1668:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1669:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1670:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1671:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1672:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1673:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1674:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1677:maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', '1678:maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', '1679:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1680:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1681:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1682:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1683:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1684:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1685:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1686:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1687:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1688:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1689:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1690:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1691:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1692:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1693:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1694:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1695:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1696:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1697:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1698:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1699:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1700:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1701:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1702:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1703:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1704:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1705:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1706:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1707:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1708:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1709:maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java', '1710:maven/maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java', '1711:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1712:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1713:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1714:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1715:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1716:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1717:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1718:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1719:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1720:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1721:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1722:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1723:maven/maven-core/src/main/java/org/apache/maven/plugin/prefix/internal/DefaultPluginPrefixResolver.java', '1724:maven/maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java', '1725:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', '1726:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '1727:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', '1728:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', '1729:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java', '1730:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', '1731:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', '1732:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '1733:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '1734:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', '1735:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java', '1736:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java', '1743:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1744:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '1745:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '1746:maven/maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java', '1749:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '1750:maven/maven-core/src/main/java/org/apache/maven/project/MavenProject.java', '1751:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', '1752:maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', '1753:maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', '1754:maven/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleTaskSegmentCalculator.java', '1755:maven/maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java', '1756:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java', '1757:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1758:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1759:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1760:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1761:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1762:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1763:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1764:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1765:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1766:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1767:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1768:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '1769:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '1770:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1771:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1772:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '1773:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1774:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '1775:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '1776:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1777:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1778:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '1779:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '1780:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1781:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1782:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '1783:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1784:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '1785:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '1786:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1787:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1788:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '1789:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '1790:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1791:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1792:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '1793:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1794:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '1795:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '1796:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1797:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1798:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '1799:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '1800:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1801:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '1802:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1803:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1804:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1805:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1806:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1807:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1808:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1809:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1810:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1811:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1812:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '1813:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '1814:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1815:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1816:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '1817:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1818:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '1819:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '1820:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1821:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1822:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '1823:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '1824:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1825:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1826:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '1827:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1828:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '1829:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '1830:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1831:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1832:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '1833:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '1834:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1835:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1836:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '1837:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1838:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '1839:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '1840:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1841:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1842:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '1843:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '1844:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1845:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '1846:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1847:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1848:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1849:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1850:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1851:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1852:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1853:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1854:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '1855:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '1856:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1857:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1858:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '1859:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1860:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '1861:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '1862:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1863:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1864:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '1865:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '1866:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1867:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1868:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '1869:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1870:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '1871:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '1872:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1873:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1874:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '1875:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '1876:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1877:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1878:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '1879:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1880:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '1881:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '1882:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1883:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1884:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '1885:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '1886:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1887:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '1888:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1889:maven/maven-artifact/src/main/java/org/apache/maven/artifact/ArtifactUtils.java', '1890:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java', '1891:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1892:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1893:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1894:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1895:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1896:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '1897:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '1898:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1899:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1900:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '1901:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1902:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '1903:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '1904:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1905:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1906:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '1907:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '1908:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1909:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1910:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '1911:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1912:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '1913:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '1914:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1915:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1916:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '1917:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '1918:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1919:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1920:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '1921:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1922:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '1923:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '1924:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1925:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1926:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '1927:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '1928:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1929:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '1930:maven/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java', '1933:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1934:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1935:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1936:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '1937:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '1938:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1939:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1940:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '1941:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1942:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '1943:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '1944:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1945:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1946:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '1947:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1948:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '1949:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1950:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '1951:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1952:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '1953:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '1954:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1955:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1956:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '1957:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '1958:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1959:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1960:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '1961:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1962:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '1963:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '1964:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1965:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1966:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '1967:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '1968:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1969:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/InversionArtifactFilter.java', '1970:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '1971:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1972:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '1973:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1974:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '1975:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1976:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '1977:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1978:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '1979:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '1980:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1981:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1982:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '1983:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1984:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '1985:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1986:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '1987:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1988:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '1989:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1990:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '1991:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1992:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '1993:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1994:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '1995:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1996:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '1997:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '1998:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '1999:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2000:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '2001:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '2002:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2003:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2004:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '2005:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java', '2006:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2007:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2008:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2009:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2010:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2011:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2012:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2013:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2014:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2015:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2016:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2017:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2018:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2019:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2020:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2021:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2022:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2023:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2024:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2025:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2026:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2027:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2028:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2029:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2030:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2031:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2032:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2033:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2034:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2035:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2036:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2037:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2038:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2039:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2040:maven/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/TypeArtifactFilter.java', '2041:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2042:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2043:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2044:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2045:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2046:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2047:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2048:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2049:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2050:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2051:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2052:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2053:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2054:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2055:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2056:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2057:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2058:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2059:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2060:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2061:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2062:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2063:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2064:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2065:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2066:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2067:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2068:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2069:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2070:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2071:maven/maven-compat/src/main/java/org/apache/maven/artifact/ArtifactStatus.java', '2072:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2073:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java', '2074:maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', '2075:maven/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuilder.java', '2076:maven/maven-core/src/main/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilder.java', '2079:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2080:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2081:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2082:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2083:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2084:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2085:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2086:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2087:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2088:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2089:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2090:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2091:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2092:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2093:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2094:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2095:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2096:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2097:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2098:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2099:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2100:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2101:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2102:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2103:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2104:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2105:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2106:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2107:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2108:maven/maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCache.java', '2111:maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', '2112:maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', '2113:maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', '2114:maven/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java', '2115:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2116:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2117:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2118:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2119:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2120:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2121:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2122:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2123:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2124:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2125:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2126:maven/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/OperatingSystemProfileActivator.java', '2127:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2128:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2129:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2130:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2131:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2132:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2133:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2134:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2135:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2136:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2137:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2138:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2139:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2140:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2141:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2142:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2143:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2144:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2145:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2146:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2147:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2148:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2149:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2150:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2151:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2152:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2153:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2154:maven/maven-model-builder/src/main/java/org/apache/maven/model/building/FileModelSource.java', '2155:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2156:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2157:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2158:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2159:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2160:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2161:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2162:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2163:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2164:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2165:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2166:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2167:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2168:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2169:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2170:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2171:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2172:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2173:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2174:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2175:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2176:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2177:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2178:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2179:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2180:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2181:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2182:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2183:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2184:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2185:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2186:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2187:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2188:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2189:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2190:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2191:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2192:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2193:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2194:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2195:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2196:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2197:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2198:maven/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java', '2199:maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/AbstractMavenTransferListener.java', '2200:maven/maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java', '2203:maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', '2204:maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '2205:maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '2206:maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '2207:maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', '2208:maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '2209:maven/maven-core/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '2210:maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '2227:maven/maven-core/src/main/java/org/apache/maven/execution/scope/internal/MojoExecutionScope.java', '2228:maven/maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java', '2229:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2230:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2231:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2232:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2233:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2234:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2235:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2236:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2237:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2238:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2239:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2240:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2241:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2242:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2243:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2244:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2245:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2246:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2247:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2248:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2249:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2250:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2251:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2252:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2253:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelPool.java', '2254:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2255:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2256:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2257:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2258:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2259:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2260:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2261:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2262:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2263:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2264:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2265:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2266:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2267:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2268:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2269:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2270:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2271:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2272:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2273:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2274:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2275:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2276:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2277:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2278:maven/maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java', '2279:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2280:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2281:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2282:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2283:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2284:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2285:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2286:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2287:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2288:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2289:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2290:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2291:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2292:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2293:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2294:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2295:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2296:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2297:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2298:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2299:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2300:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2301:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2302:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2303:maven/maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java', '2304:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2305:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2306:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2307:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2308:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2309:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2310:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2311:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2312:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2313:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2314:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2315:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2316:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2317:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2318:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2319:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2320:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2321:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2322:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2323:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2324:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java', '2325:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2326:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2327:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2328:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2329:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2330:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2331:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2332:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2333:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2334:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2335:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2336:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2337:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2338:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2339:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2340:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2341:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2342:maven/maven-core/src/main/java/org/apache/maven/project/artifact/DefaultMavenMetadataCache.java', '2343:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2344:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2345:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2346:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2347:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2348:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2349:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2350:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2351:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2352:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2353:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2354:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2355:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2356:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2357:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2358:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2359:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java', '2360:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2361:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2362:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2363:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2364:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2365:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2366:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2367:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2368:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2369:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2370:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2371:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2372:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2373:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2374:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java', '2375:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2376:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2377:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2378:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2379:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2380:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2381:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2382:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2383:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2384:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2385:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java', '2386:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2387:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2388:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2389:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2390:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2391:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2392:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2393:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2394:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2395:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2396:maven/maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java', '2397:maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', '2398:maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', '2399:maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', '2400:maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', '2401:maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', '2402:maven/maven-core/src/main/java/org/apache/maven/lifecycle/MavenExecutionPlan.java', '2403:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', '2404:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java', '2405:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2406:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2407:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2408:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2409:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2410:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2411:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2412:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2413:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2414:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2415:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2416:maven/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java', '2417:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2418:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2419:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2420:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2421:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2422:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2423:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2424:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ScopeArtifactFilter.java', '2425:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2426:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2427:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2428:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2429:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/IncludesArtifactFilter.java', '2430:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2431:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2432:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2433:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2434:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/ExclusionSetFilter.java', '2435:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/CumulativeScopeArtifactFilter.java', '2436:maven/maven-core/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java', '2437:maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', '2438:maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java', '2439:maven/maven-core/src/main/java/org/apache/maven/artifact/repository/LegacyLocalRepositoryManager.java', '2440:maven/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java']


    public static org.apache.maven.model.Profile convertFromSettingsProfile( Profile settingsProfile )
    {
        org.apache.maven.model.Profile profile = new org.apache.maven.model.Profile();

        profile.setId( settingsProfile.getId() );

        profile.setSource( "settings.xml" );

        Activation settingsActivation = settingsProfile.getActivation();

        if ( settingsActivation != null )
        {
            org.apache.maven.model.Activation activation = new org.apache.maven.model.Activation();

            activation.setActiveByDefault( settingsActivation.isActiveByDefault() );

            activation.setJdk( settingsActivation.getJdk() );

            ActivationProperty settingsProp = settingsActivation.getProperty();

            if ( settingsProp != null )
            {
                org.apache.maven.model.ActivationProperty prop = new org.apache.maven.model.ActivationProperty();

                prop.setName( settingsProp.getName() );
                prop.setValue( settingsProp.getValue() );

                activation.setProperty( prop );
            }

            ActivationOS settingsOs = settingsActivation.getOs();

            if ( settingsOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( settingsOs.getArch() );
                os.setFamily( settingsOs.getFamily() );
                os.setName( settingsOs.getName() );
                os.setVersion( settingsOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.settings.ActivationFile settingsFile = settingsActivation.getFile();

            if ( settingsFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( settingsFile.getExists() );
                file.setMissing( settingsFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( settingsProfile.getProperties() );

        List<Repository> repos = settingsProfile.getRepositories();
        if ( repos != null )
        {
            for ( Repository repo : repos )
            {
                profile.addRepository( convertFromSettingsRepository( repo ) );
            }
        }

        List<Repository> pluginRepos = settingsProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Repository pluginRepo : pluginRepos )
            {
                profile.addPluginRepository( convertFromSettingsRepository( pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Profile profileXmlProfile )
    {
        Profile profile = new Profile();

        profile.setId( profileXmlProfile.getId() );

        profile.setSource( "profiles.xml" );

        org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();

        if ( profileActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( profileActivation.isActiveByDefault() );

            activation.setJdk( profileActivation.getJdk() );

            org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();

            if ( profileProp != null )
            {
                ActivationProperty prop = new ActivationProperty();

                prop.setName( profileProp.getName() );
                prop.setValue( profileProp.getValue() );

                activation.setProperty( prop );
            }


            ActivationOS profileOs = profileActivation.getOs();

            if ( profileOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( profileOs.getArch() );
                os.setFamily( profileOs.getFamily() );
                os.setName( profileOs.getName() );
                os.setVersion( profileOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();

            if ( profileFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( profileFile.getExists() );
                file.setMissing( profileFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( profileXmlProfile.getProperties() );

        List repos = profileXmlProfile.getRepositories();
        if ( repos != null )
        {
            for ( Object repo : repos )
            {
                profile.addRepository( convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) repo ) );
            }
        }

        List pluginRepos = profileXmlProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Object pluginRepo : pluginRepos )
            {
                profile.addPluginRepository(
                    convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertToSettingsProfile( org.apache.maven.model.Profile modelProfile )
    {
        Profile profile = new Profile();

        profile.setId( modelProfile.getId() );

        org.apache.maven.model.Activation modelActivation = modelProfile.getActivation();

        if ( modelActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( modelActivation.isActiveByDefault() );

            activation.setJdk( modelActivation.getJdk() );

            org.apache.maven.model.ActivationProperty modelProp = modelActivation.getProperty();

            if ( modelProp != null )
            {
                ActivationProperty prop = new ActivationProperty();
                prop.setName( modelProp.getName() );
                prop.setValue( modelProp.getValue() );
                activation.setProperty( prop );
            }

            org.apache.maven.model.ActivationOS modelOs = modelActivation.getOs();

            if ( modelOs != null )
            {
                ActivationOS os = new ActivationOS();

                os.setArch( modelOs.getArch() );
                os.setFamily( modelOs.getFamily() );
                os.setName( modelOs.getName() );
                os.setVersion( modelOs.getVersion() );

                activation.setOs( os );
            }

            ActivationFile modelFile = modelActivation.getFile();

            if ( modelFile != null )
            {
                org.apache.maven.settings.ActivationFile file = new org.apache.maven.settings.ActivationFile();

                file.setExists( modelFile.getExists() );
                file.setMissing( modelFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( modelProfile.getProperties() );

        List<org.apache.maven.model.Repository> repos = modelProfile.getRepositories();
        if ( repos != null )
        {
            for ( org.apache.maven.model.Repository repo : repos )
            {
                profile.addRepository( convertToSettingsRepository( repo ) );
            }
        }

        List<org.apache.maven.model.Repository> pluginRepos = modelProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( org.apache.maven.model.Repository pluginRepo : pluginRepos )
            {
                profile.addPluginRepository( convertToSettingsRepository( pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Profile profileXmlProfile )
    {
        Profile profile = new Profile();

        profile.setId( profileXmlProfile.getId() );

        profile.setSource( "profiles.xml" );

        org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();

        if ( profileActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( profileActivation.isActiveByDefault() );

            activation.setJdk( profileActivation.getJdk() );

            org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();

            if ( profileProp != null )
            {
                ActivationProperty prop = new ActivationProperty();

                prop.setName( profileProp.getName() );
                prop.setValue( profileProp.getValue() );

                activation.setProperty( prop );
            }


            ActivationOS profileOs = profileActivation.getOs();

            if ( profileOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( profileOs.getArch() );
                os.setFamily( profileOs.getFamily() );
                os.setName( profileOs.getName() );
                os.setVersion( profileOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();

            if ( profileFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( profileFile.getExists() );
                file.setMissing( profileFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( profileXmlProfile.getProperties() );

        List repos = profileXmlProfile.getRepositories();
        if ( repos != null )
        {
            for ( Object repo : repos )
            {
                profile.addRepository( convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) repo ) );
            }
        }

        List pluginRepos = profileXmlProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Object pluginRepo : pluginRepos )
            {
                profile.addPluginRepository(
                    convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) pluginRepo ) );
            }
        }

        return profile;
    }


    private MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
        throws MavenExecutionRequestPopulationException
    {
        if ( settings == null )
        {
            return request;
        }

        request.setOffline( settings.isOffline() );

        request.setInteractiveMode( settings.isInteractiveMode() );

        request.setPluginGroups( settings.getPluginGroups() );

        request.setLocalRepositoryPath( settings.getLocalRepository() );

        for ( Server server : settings.getServers() )
        {
            server = server.clone();

            request.addServer( server );
        }

        //  <proxies>
        //    <proxy>
        //      <active>true</active>
        //      <protocol>http</protocol>
        //      <host>proxy.somewhere.com</host>
        //      <port>8080</port>
        //      <username>proxyuser</username>
        //      <password>somepassword</password>
        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
        //    </proxy>
        //  </proxies>

        for ( Proxy proxy : settings.getProxies() )
        {
            if ( !proxy.isActive() )
            {
                continue;
            }

            proxy = proxy.clone();

            request.addProxy( proxy );
        }

        // <mirrors>
        //   <mirror>
        //     <id>nexus</id>
        //     <mirrorOf>*</mirrorOf>
        //     <url>http://repository.sonatype.org/content/groups/public</url>
        //   </mirror>
        // </mirrors>

        for ( Mirror mirror : settings.getMirrors() )
        {
            mirror = mirror.clone();

            request.addMirror( mirror );
        }

        request.setActiveProfiles( settings.getActiveProfiles() );

        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
        {
            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );

            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
            {
                List<Repository> remoteRepositories = rawProfile.getRepositories();
                for ( Repository remoteRepository : remoteRepositories )
                {
                    try
                    {
                        request.addRemoteRepository( 
                            MavenRepositorySystem.buildArtifactRepository( remoteRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }
                
                List<Repository> pluginRepositories = rawProfile.getPluginRepositories();
                for ( Repository pluginRepository : pluginRepositories )
                {
                    try
                    {
                        request.addPluginArtifactRepository( 
                            MavenRepositorySystem.buildArtifactRepository( pluginRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }                
            }
        }
        return request;
    }


    public MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
        throws MavenExecutionRequestPopulationException
    {
        if ( settings == null )
        {
            return request;
        }

        request.setOffline( settings.isOffline() );

        request.setInteractiveMode( settings.isInteractiveMode() );

        request.setPluginGroups( settings.getPluginGroups() );

        request.setLocalRepositoryPath( settings.getLocalRepository() );

        for ( Server server : settings.getServers() )
        {
            server = server.clone();

            request.addServer( server );
        }

        //  <proxies>
        //    <proxy>
        //      <active>true</active>
        //      <protocol>http</protocol>
        //      <host>proxy.somewhere.com</host>
        //      <port>8080</port>
        //      <username>proxyuser</username>
        //      <password>somepassword</password>
        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
        //    </proxy>
        //  </proxies>

        for ( Proxy proxy : settings.getProxies() )
        {
            if ( !proxy.isActive() )
            {
                continue;
            }

            proxy = proxy.clone();

            request.addProxy( proxy );
        }

        // <mirrors>
        //   <mirror>
        //     <id>nexus</id>
        //     <mirrorOf>*</mirrorOf>
        //     <url>http://repository.sonatype.org/content/groups/public</url>
        //   </mirror>
        // </mirrors>

        for ( Mirror mirror : settings.getMirrors() )
        {
            mirror = mirror.clone();

            request.addMirror( mirror );
        }

        request.setActiveProfiles( settings.getActiveProfiles() );

        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
        {
            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );

            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
            {
                List<Repository> remoteRepositories = rawProfile.getRepositories();
                for ( Repository remoteRepository : remoteRepositories )
                {
                    try
                    {
                        request.addRemoteRepository( repositorySystem.buildArtifactRepository( remoteRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }

                List<Repository> pluginRepositories = rawProfile.getPluginRepositories();
                for ( Repository pluginRepo : pluginRepositories )
                {
                    try
                    {
                        request.addPluginArtifactRepository( repositorySystem.buildArtifactRepository( pluginRepo ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }
            }
        }

        return request;
    }    


        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                     boolean sourceDominant, Map<Object, Object> context )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();
                Map<Object, Plugin> master = new LinkedHashMap<>( tgt.size() * 2 );

                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    master.put( key, element );
                }

                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();
                List<Plugin> pending = new ArrayList<>();
                for ( Plugin element : src )
                {
                    Object key = getPluginKey( element );
                    Plugin existing = master.get( key );
                    if ( existing != null )
                    {
                        mergePlugin( existing, element, sourceDominant, context );

                        if ( !pending.isEmpty() )
                        {
                            predecessors.put( key, pending );
                            pending = new ArrayList<>();
                        }
                    }
                    else
                    {
                        pending.add( element );
                    }
                }

                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );
                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )
                {
                    List<Plugin> pre = predecessors.get( entry.getKey() );
                    if ( pre != null )
                    {
                        result.addAll( pre );
                    }
                    result.add( entry.getValue() );
                }
                result.addAll( pending );

                target.setPlugins( result );
            }
        }


        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                     boolean sourceDominant, Map<Object, Object> context )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();
                Map<Object, Plugin> master = new LinkedHashMap<>( src.size() * 2 );

                for ( Plugin element : src )
                {
                    if ( element.isInherited() || !element.getExecutions().isEmpty() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions
                        Plugin plugin = new Plugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergePlugin( plugin, element, sourceDominant, context );

                        Object key = getPluginKey( element );

                        master.put( key, plugin );
                    }
                }

                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();
                List<Plugin> pending = new ArrayList<>();
                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    Plugin existing = master.get( key );
                    if ( existing != null )
                    {
                        mergePlugin( element, existing, sourceDominant, context );

                        master.put( key, element );

                        if ( !pending.isEmpty() )
                        {
                            predecessors.put( key, pending );
                            pending = new ArrayList<>();
                        }
                    }
                    else
                    {
                        pending.add( element );
                    }
                }

                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );
                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )
                {
                    List<Plugin> pre = predecessors.get( entry.getKey() );
                    if ( pre != null )
                    {
                        result.addAll( pre );
                    }
                    result.add( entry.getValue() );
                }
                result.addAll( pending );

                target.setPlugins( result );
            }
        }


    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
    {
        if ( repositories == null )
        {
            return null;
        }

        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();

        for ( ArtifactRepository repository : repositories )
        {
            String key = repository.getId();

            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );

            if ( aliasedRepos == null )
            {
                aliasedRepos = new ArrayList<>();
                reposByKey.put( key, aliasedRepos );
            }

            aliasedRepos.add( repository );
        }

        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();

        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
        {
            List<ArtifactRepository> mirroredRepos = new ArrayList<>();

            List<ArtifactRepositoryPolicy> releasePolicies =
                new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                releasePolicies.add( aliasedRepo.getReleases() );
                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
            }

            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );

            List<ArtifactRepositoryPolicy> snapshotPolicies =
                new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                snapshotPolicies.add( aliasedRepo.getSnapshots() );
            }

            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );

            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );

            ArtifactRepository effectiveRepository =
                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
                                          snapshotPolicy, releasePolicy );

            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );

            effectiveRepository.setProxy( aliasedRepo.getProxy() );

            effectiveRepository.setMirroredRepositories( mirroredRepos );

            effectiveRepositories.add( effectiveRepository );
        }

        return effectiveRepositories;
    }


    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
    {
        if ( repositories == null )
        {
            return null;
        }

        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();

        for ( ArtifactRepository repository : repositories )
        {
            String key = repository.getId();

            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );

            if ( aliasedRepos == null )
            {
                aliasedRepos = new ArrayList<>();
                reposByKey.put( key, aliasedRepos );
            }

            aliasedRepos.add( repository );
        }

        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();

        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
        {
            List<ArtifactRepository> mirroredRepos = new ArrayList<>();

            List<ArtifactRepositoryPolicy> releasePolicies =
                    new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                releasePolicies.add( aliasedRepo.getReleases() );
                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
            }

            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );

            List<ArtifactRepositoryPolicy> snapshotPolicies =
                    new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                snapshotPolicies.add( aliasedRepo.getSnapshots() );
            }

            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );

            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );

            ArtifactRepository effectiveRepository =
                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
                            snapshotPolicy, releasePolicy );

            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );

            effectiveRepository.setProxy( aliasedRepo.getProxy() );

            effectiveRepository.setMirroredRepositories( mirroredRepos );

            effectiveRepositories.add( effectiveRepository );
        }

        return effectiveRepositories;
    }


    public void unalignFromBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( unalignFromBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( unalignFromBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( unalignFromBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( unalignFromBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( unalignFromBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( unalignFromBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( unalignFromBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir, ModelBuildingRequest request )
    {
        if ( model == null || basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            build.setScriptSourceDirectory( alignToBaseDirectory( build.getScriptSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>( build.getFilters().size() );
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir, ModelBuildingRequest request )
    {
        if ( model == null || basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            build.setScriptSourceDirectory( alignToBaseDirectory( build.getScriptSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>( build.getFilters().size() );
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void unalignFromBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( unalignFromBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( unalignFromBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( unalignFromBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( unalignFromBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( unalignFromBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( unalignFromBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( unalignFromBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                     ArtifactRepository repository, VersionResult result )
    {
        Versioning versioning = null;
        try
        {
            if ( metadata != null )
            {
                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
                {
                    syncContext.acquire( null, Collections.singleton( metadata ) );

                    if ( metadata.getFile() != null && metadata.getFile().exists() )
                    {
                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
                        {
                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();

                            /*
                            NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
                            of the local repository. This is especially troublesome during snapshot resolution so we try
                            to handle that gracefully.
                             */
                            if ( versioning != null && repository instanceof LocalRepository
                                     && versioning.getSnapshot() != null
                                     && versioning.getSnapshot().getBuildNumber() > 0 )
                            {
                                final Versioning repaired = new Versioning();
                                repaired.setLastUpdated( versioning.getLastUpdated() );
                                repaired.setSnapshot( new Snapshot() );
                                repaired.getSnapshot().setLocalCopy( true );
                                versioning = repaired;
                                throw new IOException( "Snapshot information corrupted with remote repository data"
                                                           + ", please verify that no remote repository uses the id '"
                                                           + repository.getId() + "'" );

                            }
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            invalidMetadata( session, trace, metadata, repository, e );
            result.addException( e );
        }

        return ( versioning != null ) ? versioning : new Versioning();
    }


    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                     ArtifactRepository repository, VersionRangeResult result )
    {
        Versioning versioning = null;
        try
        {
            if ( metadata != null )
            {
                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
                {
                    syncContext.acquire( null, Collections.singleton( metadata ) );

                    if ( metadata.getFile() != null && metadata.getFile().exists() )
                    {
                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
                        {
                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            invalidMetadata( session, trace, metadata, repository, e );
            result.addException( e );
        }

        return ( versioning != null ) ? versioning : new Versioning();
    }


                if ( repo != null )
                {
                    Mirror mirror = new Mirror();
                    mirror.setId( repo.getId() );
                    mirror.setUrl( repo.getUrl() );
                    mirror.setLayout( repo.getContentType() );
                    return mirror;
                }
            }
        }
        return null;
    }

    public void injectMirror( RepositorySystemSession session, List<ArtifactRepository> repositories )
    {
        if ( repositories != null && session != null )
        {
            for ( ArtifactRepository repository : repositories )
            {
                Mirror mirror = getMirror( session, repository );
                injectMirror( repository, mirror );
            }
        }
    }

    private void injectMirror( ArtifactRepository repository, Mirror mirror )
    {
        if ( mirror != null )
        {
            ArtifactRepository original =
                createArtifactRepository( repository.getId(), repository.getUrl(), repository.getLayout(),
                                          repository.getSnapshots(), repository.getReleases() );

            repository.setMirroredRepositories( Collections.singletonList( original ) );

            repository.setId( mirror.getId() );
            repository.setUrl( mirror.getUrl() );

            if ( StringUtils.isNotEmpty( mirror.getLayout() ) )


        else if ( Artifact.SCOPE_TEST.equals( scope ) || Artifact.SCOPE_PROVIDED.equals( scope ) )
        {
            return null;
        }
        else if ( Artifact.SCOPE_COMPILE.equals( scope ) && Artifact.SCOPE_COMPILE.equals( inheritedScope ) )
        {
            // added to retain compile artifactScope. Remove if you want compile inherited as runtime
            desiredScope = Artifact.SCOPE_COMPILE;
        }

        if ( Artifact.SCOPE_TEST.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_TEST;
        }

        if ( Artifact.SCOPE_PROVIDED.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_PROVIDED;
        }

        if ( Artifact.SCOPE_SYSTEM.equals( scope ) )
        {
            // system scopes come through unchanged...
            desiredScope = Artifact.SCOPE_SYSTEM;
        }

        ArtifactHandler handler = artifactHandlerManager.getArtifactHandler( type );

        return new DefaultArtifact( groupId, artifactId, versionRange, desiredScope, type, classifier, handler,
                                    optional );
    }
    
    //
    // Code taken from LegacyRepositorySystem
    //
        
    public ArtifactRepository createDefaultRemoteRepository( MavenExecutionRequest request )
        throws Exception
    {




    public static org.apache.maven.model.Profile convertFromSettingsProfile( Profile settingsProfile )
    {
        org.apache.maven.model.Profile profile = new org.apache.maven.model.Profile();

        profile.setId( settingsProfile.getId() );

        profile.setSource( "settings.xml" );

        Activation settingsActivation = settingsProfile.getActivation();

        if ( settingsActivation != null )
        {
            org.apache.maven.model.Activation activation = new org.apache.maven.model.Activation();

            activation.setActiveByDefault( settingsActivation.isActiveByDefault() );

            activation.setJdk( settingsActivation.getJdk() );

            ActivationProperty settingsProp = settingsActivation.getProperty();

            if ( settingsProp != null )
            {
                org.apache.maven.model.ActivationProperty prop = new org.apache.maven.model.ActivationProperty();

                prop.setName( settingsProp.getName() );
                prop.setValue( settingsProp.getValue() );

                activation.setProperty( prop );
            }

            ActivationOS settingsOs = settingsActivation.getOs();

            if ( settingsOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( settingsOs.getArch() );
                os.setFamily( settingsOs.getFamily() );
                os.setName( settingsOs.getName() );
                os.setVersion( settingsOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.settings.ActivationFile settingsFile = settingsActivation.getFile();

            if ( settingsFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( settingsFile.getExists() );
                file.setMissing( settingsFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( settingsProfile.getProperties() );

        List<Repository> repos = settingsProfile.getRepositories();
        if ( repos != null )
        {
            for ( Repository repo : repos )
            {
                profile.addRepository( convertFromSettingsRepository( repo ) );
            }
        }

        List<Repository> pluginRepos = settingsProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Repository pluginRepo : pluginRepos )
            {
                profile.addPluginRepository( convertFromSettingsRepository( pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Profile profileXmlProfile )
    {
        Profile profile = new Profile();

        profile.setId( profileXmlProfile.getId() );

        profile.setSource( "profiles.xml" );

        org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();

        if ( profileActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( profileActivation.isActiveByDefault() );

            activation.setJdk( profileActivation.getJdk() );

            org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();

            if ( profileProp != null )
            {
                ActivationProperty prop = new ActivationProperty();

                prop.setName( profileProp.getName() );
                prop.setValue( profileProp.getValue() );

                activation.setProperty( prop );
            }


            ActivationOS profileOs = profileActivation.getOs();

            if ( profileOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( profileOs.getArch() );
                os.setFamily( profileOs.getFamily() );
                os.setName( profileOs.getName() );
                os.setVersion( profileOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();

            if ( profileFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( profileFile.getExists() );
                file.setMissing( profileFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( profileXmlProfile.getProperties() );

        List repos = profileXmlProfile.getRepositories();
        if ( repos != null )
        {
            for ( Object repo : repos )
            {
                profile.addRepository( convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) repo ) );
            }
        }

        List pluginRepos = profileXmlProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Object pluginRepo : pluginRepos )
            {
                profile.addPluginRepository(
                    convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertToSettingsProfile( org.apache.maven.model.Profile modelProfile )
    {
        Profile profile = new Profile();

        profile.setId( modelProfile.getId() );

        org.apache.maven.model.Activation modelActivation = modelProfile.getActivation();

        if ( modelActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( modelActivation.isActiveByDefault() );

            activation.setJdk( modelActivation.getJdk() );

            org.apache.maven.model.ActivationProperty modelProp = modelActivation.getProperty();

            if ( modelProp != null )
            {
                ActivationProperty prop = new ActivationProperty();
                prop.setName( modelProp.getName() );
                prop.setValue( modelProp.getValue() );
                activation.setProperty( prop );
            }

            org.apache.maven.model.ActivationOS modelOs = modelActivation.getOs();

            if ( modelOs != null )
            {
                ActivationOS os = new ActivationOS();

                os.setArch( modelOs.getArch() );
                os.setFamily( modelOs.getFamily() );
                os.setName( modelOs.getName() );
                os.setVersion( modelOs.getVersion() );

                activation.setOs( os );
            }

            ActivationFile modelFile = modelActivation.getFile();

            if ( modelFile != null )
            {
                org.apache.maven.settings.ActivationFile file = new org.apache.maven.settings.ActivationFile();

                file.setExists( modelFile.getExists() );
                file.setMissing( modelFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( modelProfile.getProperties() );

        List<org.apache.maven.model.Repository> repos = modelProfile.getRepositories();
        if ( repos != null )
        {
            for ( org.apache.maven.model.Repository repo : repos )
            {
                profile.addRepository( convertToSettingsRepository( repo ) );
            }
        }

        List<org.apache.maven.model.Repository> pluginRepos = modelProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( org.apache.maven.model.Repository pluginRepo : pluginRepos )
            {
                profile.addPluginRepository( convertToSettingsRepository( pluginRepo ) );
            }
        }

        return profile;
    }


    public static Profile convertFromProfileXmlProfile( org.apache.maven.profiles.Profile profileXmlProfile )
    {
        Profile profile = new Profile();

        profile.setId( profileXmlProfile.getId() );

        profile.setSource( "profiles.xml" );

        org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();

        if ( profileActivation != null )
        {
            Activation activation = new Activation();

            activation.setActiveByDefault( profileActivation.isActiveByDefault() );

            activation.setJdk( profileActivation.getJdk() );

            org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();

            if ( profileProp != null )
            {
                ActivationProperty prop = new ActivationProperty();

                prop.setName( profileProp.getName() );
                prop.setValue( profileProp.getValue() );

                activation.setProperty( prop );
            }


            ActivationOS profileOs = profileActivation.getOs();

            if ( profileOs != null )
            {
                org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();

                os.setArch( profileOs.getArch() );
                os.setFamily( profileOs.getFamily() );
                os.setName( profileOs.getName() );
                os.setVersion( profileOs.getVersion() );

                activation.setOs( os );
            }

            org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();

            if ( profileFile != null )
            {
                ActivationFile file = new ActivationFile();

                file.setExists( profileFile.getExists() );
                file.setMissing( profileFile.getMissing() );

                activation.setFile( file );
            }

            profile.setActivation( activation );
        }

        profile.setProperties( profileXmlProfile.getProperties() );

        List repos = profileXmlProfile.getRepositories();
        if ( repos != null )
        {
            for ( Object repo : repos )
            {
                profile.addRepository( convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) repo ) );
            }
        }

        List pluginRepos = profileXmlProfile.getPluginRepositories();
        if ( pluginRepos != null )
        {
            for ( Object pluginRepo : pluginRepos )
            {
                profile.addPluginRepository(
                    convertFromProfileXmlRepository( (org.apache.maven.profiles.Repository) pluginRepo ) );
            }
        }

        return profile;
    }


    private MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
        throws MavenExecutionRequestPopulationException
    {
        if ( settings == null )
        {
            return request;
        }

        request.setOffline( settings.isOffline() );

        request.setInteractiveMode( settings.isInteractiveMode() );

        request.setPluginGroups( settings.getPluginGroups() );

        request.setLocalRepositoryPath( settings.getLocalRepository() );

        for ( Server server : settings.getServers() )
        {
            server = server.clone();

            request.addServer( server );
        }

        //  <proxies>
        //    <proxy>
        //      <active>true</active>
        //      <protocol>http</protocol>
        //      <host>proxy.somewhere.com</host>
        //      <port>8080</port>
        //      <username>proxyuser</username>
        //      <password>somepassword</password>
        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
        //    </proxy>
        //  </proxies>

        for ( Proxy proxy : settings.getProxies() )
        {
            if ( !proxy.isActive() )
            {
                continue;
            }

            proxy = proxy.clone();

            request.addProxy( proxy );
        }

        // <mirrors>
        //   <mirror>
        //     <id>nexus</id>
        //     <mirrorOf>*</mirrorOf>
        //     <url>http://repository.sonatype.org/content/groups/public</url>
        //   </mirror>
        // </mirrors>

        for ( Mirror mirror : settings.getMirrors() )
        {
            mirror = mirror.clone();

            request.addMirror( mirror );
        }

        request.setActiveProfiles( settings.getActiveProfiles() );

        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
        {
            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );

            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
            {
                List<Repository> remoteRepositories = rawProfile.getRepositories();
                for ( Repository remoteRepository : remoteRepositories )
                {
                    try
                    {
                        request.addRemoteRepository( 
                            MavenRepositorySystem.buildArtifactRepository( remoteRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }
                
                List<Repository> pluginRepositories = rawProfile.getPluginRepositories();
                for ( Repository pluginRepository : pluginRepositories )
                {
                    try
                    {
                        request.addPluginArtifactRepository( 
                            MavenRepositorySystem.buildArtifactRepository( pluginRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }                
            }
        }
        return request;
    }


    public MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
        throws MavenExecutionRequestPopulationException
    {
        if ( settings == null )
        {
            return request;
        }

        request.setOffline( settings.isOffline() );

        request.setInteractiveMode( settings.isInteractiveMode() );

        request.setPluginGroups( settings.getPluginGroups() );

        request.setLocalRepositoryPath( settings.getLocalRepository() );

        for ( Server server : settings.getServers() )
        {
            server = server.clone();

            request.addServer( server );
        }

        //  <proxies>
        //    <proxy>
        //      <active>true</active>
        //      <protocol>http</protocol>
        //      <host>proxy.somewhere.com</host>
        //      <port>8080</port>
        //      <username>proxyuser</username>
        //      <password>somepassword</password>
        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
        //    </proxy>
        //  </proxies>

        for ( Proxy proxy : settings.getProxies() )
        {
            if ( !proxy.isActive() )
            {
                continue;
            }

            proxy = proxy.clone();

            request.addProxy( proxy );
        }

        // <mirrors>
        //   <mirror>
        //     <id>nexus</id>
        //     <mirrorOf>*</mirrorOf>
        //     <url>http://repository.sonatype.org/content/groups/public</url>
        //   </mirror>
        // </mirrors>

        for ( Mirror mirror : settings.getMirrors() )
        {
            mirror = mirror.clone();

            request.addMirror( mirror );
        }

        request.setActiveProfiles( settings.getActiveProfiles() );

        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
        {
            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );

            if ( settings.getActiveProfiles().contains( rawProfile.getId() ) )
            {
                List<Repository> remoteRepositories = rawProfile.getRepositories();
                for ( Repository remoteRepository : remoteRepositories )
                {
                    try
                    {
                        request.addRemoteRepository( repositorySystem.buildArtifactRepository( remoteRepository ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }

                List<Repository> pluginRepositories = rawProfile.getPluginRepositories();
                for ( Repository pluginRepo : pluginRepositories )
                {
                    try
                    {
                        request.addPluginArtifactRepository( repositorySystem.buildArtifactRepository( pluginRepo ) );
                    }
                    catch ( InvalidRepositoryException e )
                    {
                        // do nothing for now
                    }
                }
            }
        }

        return request;
    }    


        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                     boolean sourceDominant, Map<Object, Object> context )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();
                Map<Object, Plugin> master = new LinkedHashMap<>( tgt.size() * 2 );

                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    master.put( key, element );
                }

                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();
                List<Plugin> pending = new ArrayList<>();
                for ( Plugin element : src )
                {
                    Object key = getPluginKey( element );
                    Plugin existing = master.get( key );
                    if ( existing != null )
                    {
                        mergePlugin( existing, element, sourceDominant, context );

                        if ( !pending.isEmpty() )
                        {
                            predecessors.put( key, pending );
                            pending = new ArrayList<>();
                        }
                    }
                    else
                    {
                        pending.add( element );
                    }
                }

                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );
                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )
                {
                    List<Plugin> pre = predecessors.get( entry.getKey() );
                    if ( pre != null )
                    {
                        result.addAll( pre );
                    }
                    result.add( entry.getValue() );
                }
                result.addAll( pending );

                target.setPlugins( result );
            }
        }


        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                     boolean sourceDominant, Map<Object, Object> context )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();
                Map<Object, Plugin> master = new LinkedHashMap<>( src.size() * 2 );

                for ( Plugin element : src )
                {
                    if ( element.isInherited() || !element.getExecutions().isEmpty() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions
                        Plugin plugin = new Plugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergePlugin( plugin, element, sourceDominant, context );

                        Object key = getPluginKey( element );

                        master.put( key, plugin );
                    }
                }

                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();
                List<Plugin> pending = new ArrayList<>();
                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    Plugin existing = master.get( key );
                    if ( existing != null )
                    {
                        mergePlugin( element, existing, sourceDominant, context );

                        master.put( key, element );

                        if ( !pending.isEmpty() )
                        {
                            predecessors.put( key, pending );
                            pending = new ArrayList<>();
                        }
                    }
                    else
                    {
                        pending.add( element );
                    }
                }

                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );
                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )
                {
                    List<Plugin> pre = predecessors.get( entry.getKey() );
                    if ( pre != null )
                    {
                        result.addAll( pre );
                    }
                    result.add( entry.getValue() );
                }
                result.addAll( pending );

                target.setPlugins( result );
            }
        }


    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
    {
        if ( repositories == null )
        {
            return null;
        }

        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();

        for ( ArtifactRepository repository : repositories )
        {
            String key = repository.getId();

            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );

            if ( aliasedRepos == null )
            {
                aliasedRepos = new ArrayList<>();
                reposByKey.put( key, aliasedRepos );
            }

            aliasedRepos.add( repository );
        }

        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();

        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
        {
            List<ArtifactRepository> mirroredRepos = new ArrayList<>();

            List<ArtifactRepositoryPolicy> releasePolicies =
                new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                releasePolicies.add( aliasedRepo.getReleases() );
                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
            }

            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );

            List<ArtifactRepositoryPolicy> snapshotPolicies =
                new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                snapshotPolicies.add( aliasedRepo.getSnapshots() );
            }

            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );

            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );

            ArtifactRepository effectiveRepository =
                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
                                          snapshotPolicy, releasePolicy );

            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );

            effectiveRepository.setProxy( aliasedRepo.getProxy() );

            effectiveRepository.setMirroredRepositories( mirroredRepos );

            effectiveRepositories.add( effectiveRepository );
        }

        return effectiveRepositories;
    }


    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
    {
        if ( repositories == null )
        {
            return null;
        }

        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();

        for ( ArtifactRepository repository : repositories )
        {
            String key = repository.getId();

            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );

            if ( aliasedRepos == null )
            {
                aliasedRepos = new ArrayList<>();
                reposByKey.put( key, aliasedRepos );
            }

            aliasedRepos.add( repository );
        }

        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();

        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
        {
            List<ArtifactRepository> mirroredRepos = new ArrayList<>();

            List<ArtifactRepositoryPolicy> releasePolicies =
                    new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                releasePolicies.add( aliasedRepo.getReleases() );
                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
            }

            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );

            List<ArtifactRepositoryPolicy> snapshotPolicies =
                    new ArrayList<>( aliasedRepos.size() );

            for ( ArtifactRepository aliasedRepo : aliasedRepos )
            {
                snapshotPolicies.add( aliasedRepo.getSnapshots() );
            }

            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );

            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );

            ArtifactRepository effectiveRepository =
                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
                            snapshotPolicy, releasePolicy );

            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );

            effectiveRepository.setProxy( aliasedRepo.getProxy() );

            effectiveRepository.setMirroredRepositories( mirroredRepos );

            effectiveRepositories.add( effectiveRepository );
        }

        return effectiveRepositories;
    }


    public void unalignFromBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( unalignFromBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( unalignFromBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( unalignFromBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( unalignFromBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( unalignFromBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( unalignFromBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( unalignFromBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir, ModelBuildingRequest request )
    {
        if ( model == null || basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            build.setScriptSourceDirectory( alignToBaseDirectory( build.getScriptSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>( build.getFilters().size() );
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir, ModelBuildingRequest request )
    {
        if ( model == null || basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            build.setScriptSourceDirectory( alignToBaseDirectory( build.getScriptSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>( build.getFilters().size() );
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void alignToBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( alignToBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( alignToBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    public void unalignFromBaseDirectory( Model model, File basedir )
    {
        if ( basedir == null )
        {
            return;
        }

        Build build = model.getBuild();

        if ( build != null )
        {
            build.setDirectory( unalignFromBaseDirectory( build.getDirectory(), basedir ) );

            build.setSourceDirectory( unalignFromBaseDirectory( build.getSourceDirectory(), basedir ) );

            build.setTestSourceDirectory( unalignFromBaseDirectory( build.getTestSourceDirectory(), basedir ) );

            for ( Resource resource : build.getResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            for ( Resource resource : build.getTestResources() )
            {
                resource.setDirectory( unalignFromBaseDirectory( resource.getDirectory(), basedir ) );
            }

            if ( build.getFilters() != null )
            {
                List<String> filters = new ArrayList<>();
                for ( String filter : build.getFilters() )
                {
                    filters.add( unalignFromBaseDirectory( filter, basedir ) );
                }
                build.setFilters( filters );
            }

            build.setOutputDirectory( unalignFromBaseDirectory( build.getOutputDirectory(), basedir ) );

            build.setTestOutputDirectory( unalignFromBaseDirectory( build.getTestOutputDirectory(), basedir ) );
        }

        Reporting reporting = model.getReporting();

        if ( reporting != null )
        {
            reporting.setOutputDirectory( unalignFromBaseDirectory( reporting.getOutputDirectory(), basedir ) );
        }
    }


    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                     ArtifactRepository repository, VersionResult result )
    {
        Versioning versioning = null;
        try
        {
            if ( metadata != null )
            {
                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
                {
                    syncContext.acquire( null, Collections.singleton( metadata ) );

                    if ( metadata.getFile() != null && metadata.getFile().exists() )
                    {
                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
                        {
                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();

                            /*
                            NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
                            of the local repository. This is especially troublesome during snapshot resolution so we try
                            to handle that gracefully.
                             */
                            if ( versioning != null && repository instanceof LocalRepository
                                     && versioning.getSnapshot() != null
                                     && versioning.getSnapshot().getBuildNumber() > 0 )
                            {
                                final Versioning repaired = new Versioning();
                                repaired.setLastUpdated( versioning.getLastUpdated() );
                                repaired.setSnapshot( new Snapshot() );
                                repaired.getSnapshot().setLocalCopy( true );
                                versioning = repaired;
                                throw new IOException( "Snapshot information corrupted with remote repository data"
                                                           + ", please verify that no remote repository uses the id '"
                                                           + repository.getId() + "'" );

                            }
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            invalidMetadata( session, trace, metadata, repository, e );
            result.addException( e );
        }

        return ( versioning != null ) ? versioning : new Versioning();
    }


    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                     ArtifactRepository repository, VersionRangeResult result )
    {
        Versioning versioning = null;
        try
        {
            if ( metadata != null )
            {
                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
                {
                    syncContext.acquire( null, Collections.singleton( metadata ) );

                    if ( metadata.getFile() != null && metadata.getFile().exists() )
                    {
                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )
                        {
                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            invalidMetadata( session, trace, metadata, repository, e );
            result.addException( e );
        }

        return ( versioning != null ) ? versioning : new Versioning();
    }


    private Proxy getProxy( RepositorySystemSession session, ArtifactRepository repository )
    {
        if ( session != null )
        {
            ProxySelector selector = session.getProxySelector();
            if ( selector != null )
            {
                RemoteRepository repo = RepositoryUtils.toRepo( repository );
                org.eclipse.aether.repository.Proxy proxy = selector.getProxy( repo );
                if ( proxy != null )
                {
                    Proxy p = new Proxy();
                    p.setHost( proxy.getHost() );
                    p.setProtocol( proxy.getType() );
                    p.setPort( proxy.getPort() );
                    if ( proxy.getAuthentication() != null )
                    {
                        repo = new RemoteRepository.Builder( repo ).setProxy( proxy ).build();
                        AuthenticationContext authCtx = AuthenticationContext.forProxy( session, repo );
                        p.setUserName( authCtx.get( AuthenticationContext.USERNAME ) );
                        p.setPassword( authCtx.get( AuthenticationContext.PASSWORD ) );
                        p.setNtlmDomain( authCtx.get( AuthenticationContext.NTLM_DOMAIN ) );
                        p.setNtlmHost( authCtx.get( AuthenticationContext.NTLM_WORKSTATION ) );
                        authCtx.close();
                    }
                    return p;
                }
            }
        }
        return null;
    }


    private Proxy getProxy( RepositorySystemSession session, ArtifactRepository repository )
    {
        if ( session != null )
        {
            ProxySelector selector = session.getProxySelector();
            if ( selector != null )
            {
                RemoteRepository repo = RepositoryUtils.toRepo( repository );
                org.eclipse.aether.repository.Proxy proxy = selector.getProxy( repo );
                if ( proxy != null )
                {
                    Proxy p = new Proxy();
                    p.setHost( proxy.getHost() );
                    p.setProtocol( proxy.getType() );
                    p.setPort( proxy.getPort() );
                    if ( proxy.getAuthentication() != null )
                    {
                        repo = new RemoteRepository.Builder( repo ).setProxy( proxy ).build();
                        AuthenticationContext authCtx = AuthenticationContext.forProxy( session, repo );
                        p.setUserName( authCtx.get( AuthenticationContext.USERNAME ) );
                        p.setPassword( authCtx.get( AuthenticationContext.PASSWORD ) );
                        p.setNtlmDomain( authCtx.get( AuthenticationContext.NTLM_DOMAIN ) );
                        p.setNtlmHost( authCtx.get( AuthenticationContext.NTLM_WORKSTATION ) );
                        authCtx.close();
                    }
                    return p;
                }
            }
        }
        return null;
    }


    static boolean matchPattern( ArtifactRepository originalRepository, String pattern )
    {
        boolean result = false;
        String originalId = originalRepository.getId();

        // simple checks first to short circuit processing below.
        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] repos = pattern.split( "," );
            for ( String repo : repos )
            {
                repo = repo.trim();
                // see if this is a negative match
                if ( repo.length() > 1 && repo.startsWith( "!" ) )
                {
                    if ( repo.substring( 1 ).equals( originalId ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( repo.equals( originalId ) )
                {
                    result = true;
                    break;
                }
                // check for external:*
                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
                else if ( WILDCARD.equals( repo ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }
        return result;
    }


    static boolean matchPattern( ArtifactRepository originalRepository, String pattern )
    {
        boolean result = false;
        String originalId = originalRepository.getId();

        // simple checks first to short circuit processing below.
        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] repos = pattern.split( "," );
            for ( String repo : repos )
            {
                // see if this is a negative match
                if ( repo.length() > 1 && repo.startsWith( "!" ) )
                {
                    if ( repo.substring( 1 ).equals( originalId ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( repo.equals( originalId ) )
                {
                    result = true;
                    break;
                }
                // check for external:*
                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
                else if ( WILDCARD.equals( repo ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }
        return result;
    }


    static boolean matchPattern( ArtifactRepository originalRepository, String pattern )
    {
        boolean result = false;
        String originalId = originalRepository.getId();

        // simple checks first to short circuit processing below.
        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] repos = pattern.split( "," );
            for ( String repo : repos )
            {
                repo = repo.trim();
                // see if this is a negative match
                if ( repo.length() > 1 && repo.startsWith( "!" ) )
                {
                    if ( repo.substring( 1 ).equals( originalId ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( repo.equals( originalId ) )
                {
                    result = true;
                    break;
                }
                // check for external:*
                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
                else if ( WILDCARD.equals( repo ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }
        return result;
    }


    static boolean matchesLayout( String repoLayout, String mirrorLayout )
    {
        boolean result = false;

        // simple checks first to short circuit processing below.
        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
        {
            result = true;
        }
        else if ( mirrorLayout.equals( repoLayout ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] layouts = mirrorLayout.split( "," );
            for ( String layout : layouts )
            {
                // see if this is a negative match
                if ( layout.length() > 1 && layout.startsWith( "!" ) )
                {
                    if ( layout.substring( 1 ).equals( repoLayout ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( layout.equals( repoLayout ) )
                {
                    result = true;
                    break;
                }
                else if ( WILDCARD.equals( layout ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }

        return result;
    }    


    static boolean matchPattern( ArtifactRepository originalRepository, String pattern )
    {
        boolean result = false;
        String originalId = originalRepository.getId();

        // simple checks first to short circuit processing below.
        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] repos = pattern.split( "," );
            for ( String repo : repos )
            {
                repo = repo.trim();
                // see if this is a negative match
                if ( repo.length() > 1 && repo.startsWith( "!" ) )
                {
                    if ( repo.substring( 1 ).equals( originalId ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( repo.equals( originalId ) )
                {
                    result = true;
                    break;
                }
                // check for external:*
                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
                else if ( WILDCARD.equals( repo ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }
        return result;
    }


    static boolean matchesLayout( String repoLayout, String mirrorLayout )
    {
        boolean result = false;

        // simple checks first to short circuit processing below.
        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
        {
            result = true;
        }
        else if ( mirrorLayout.equals( repoLayout ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] layouts = mirrorLayout.split( "," );
            for ( String layout : layouts )
            {
                // see if this is a negative match
                if ( layout.length() > 1 && layout.startsWith( "!" ) )
                {
                    if ( layout.substring( 1 ).equals( repoLayout ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( layout.equals( repoLayout ) )
                {
                    result = true;
                    break;
                }
                else if ( WILDCARD.equals( layout ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }

        return result;
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            List<Repository> dominant, recessive;
            if ( sourceDominant )
            {
                dominant = src;
                recessive = tgt;
            }
            else
            {
                dominant = tgt;
                recessive = src;
            }

            for ( Repository element : dominant )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : recessive )
            {
                Object key = getRepositoryKey( element );
                if ( !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            List<Repository> dominant, recessive;
            if ( sourceDominant )
            {
                dominant = src;
                recessive = tgt;
            }
            else
            {
                dominant = tgt;
                recessive = src;
            }

            for ( Repository element : dominant )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : recessive )
            {
                Object key = getRepositoryKey( element );
                if ( !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    public AuthenticationInfo getAuthenticationInfo( String id )
    {
        MavenSession session = legacySupport.getSession();

        if ( session != null && id != null )
        {
            MavenExecutionRequest request = session.getRequest();

            if ( request != null )
            {
                List<Server> servers = request.getServers();

                if ( servers != null )
                {
                    for ( Server server : servers )
                    {
                        if ( id.equalsIgnoreCase( server.getId() ) )
                        {
                            SettingsDecryptionResult result =
                                settingsDecrypter.decrypt( new DefaultSettingsDecryptionRequest( server ) );
                            server = result.getServer();

                            AuthenticationInfo authInfo = new AuthenticationInfo();
                            authInfo.setUserName( server.getUsername() );
                            authInfo.setPassword( server.getPassword() );
                            authInfo.setPrivateKey( server.getPrivateKey() );
                            authInfo.setPassphrase( server.getPassphrase() );

                            return authInfo;
                        }
                    }
                }
            }
        }

        // empty one to prevent NPE
       return new AuthenticationInfo();
    }


    public ProxyInfo getProxy( String protocol )
    {
        MavenSession session = legacySupport.getSession();

        if ( session != null && protocol != null )
        {
            MavenExecutionRequest request = session.getRequest();

            if ( request != null )
            {
                List<Proxy> proxies = request.getProxies();

                if ( proxies != null )
                {
                    for ( Proxy proxy : proxies )
                    {
                        if ( proxy.isActive() && protocol.equalsIgnoreCase( proxy.getProtocol() ) )
                        {
                            SettingsDecryptionResult result =
                                settingsDecrypter.decrypt( new DefaultSettingsDecryptionRequest( proxy ) );
                            proxy = result.getProxy();

                            ProxyInfo proxyInfo = new ProxyInfo();
                            proxyInfo.setHost( proxy.getHost() );
                            proxyInfo.setType( proxy.getProtocol() );
                            proxyInfo.setPort( proxy.getPort() );
                            proxyInfo.setNonProxyHosts( proxy.getNonProxyHosts() );
                            proxyInfo.setUserName( proxy.getUsername() );
                            proxyInfo.setPassword( proxy.getPassword() );

                            return proxyInfo;
                        }
                    }
                }
            }
        }

        return null;
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element :  src )
                {
                    Object key = getReportPluginKey( element );
                    if ( element.isInherited() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions as well
                        ReportPlugin plugin = new ReportPlugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergeReportPlugin( plugin, element, sourceDominant, context );

                        merged.put( key, plugin );
                    }
                }

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportPlugin( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element :  src )
                {
                    Object key = getReportPluginKey( element );
                    if ( element.isInherited() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions as well
                        ReportPlugin plugin = new ReportPlugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergeReportPlugin( plugin, element, sourceDominant, context );

                        merged.put( key, plugin );
                    }
                }

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportPlugin( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element :  src )
                {
                    Object key = getReportPluginKey( element );
                    if ( element.isInherited() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions as well
                        ReportPlugin plugin = new ReportPlugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergeReportPlugin( plugin, element, sourceDominant, context );

                        merged.put( key, plugin );
                    }
                }

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportPlugin( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element :  src )
                {
                    Object key = getReportPluginKey( element );
                    if ( element.isInherited() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions as well
                        ReportPlugin plugin = new ReportPlugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergeReportPlugin( plugin, element, sourceDominant, context );

                        merged.put( key, plugin );
                    }
                }

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportPlugin( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element :  src )
                {
                    Object key = getReportPluginKey( element );
                    if ( element.isInherited() )
                    {
                        // NOTE: Enforce recursive merge to trigger merging/inheritance logic for executions as well
                        ReportPlugin plugin = new ReportPlugin();
                        plugin.setLocation( "", element.getLocation( "" ) );
                        plugin.setGroupId( null );
                        mergeReportPlugin( plugin, element, sourceDominant, context );

                        merged.put( key, plugin );
                    }
                }

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportPlugin( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    static boolean matchPattern( ArtifactRepository originalRepository, String pattern )
    {
        boolean result = false;
        String originalId = originalRepository.getId();

        // simple checks first to short circuit processing below.
        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] repos = pattern.split( "," );
            for ( String repo : repos )
            {
                // see if this is a negative match
                if ( repo.length() > 1 && repo.startsWith( "!" ) )
                {
                    if ( repo.substring( 1 ).equals( originalId ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( repo.equals( originalId ) )
                {
                    result = true;
                    break;
                }
                // check for external:*
                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
                else if ( WILDCARD.equals( repo ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }
        return result;
    }


    static boolean matchesLayout( String repoLayout, String mirrorLayout )
    {
        boolean result = false;

        // simple checks first to short circuit processing below.
        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
        {
            result = true;
        }
        else if ( mirrorLayout.equals( repoLayout ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] layouts = mirrorLayout.split( "," );
            for ( String layout : layouts )
            {
                // see if this is a negative match
                if ( layout.length() > 1 && layout.startsWith( "!" ) )
                {
                    if ( layout.substring( 1 ).equals( repoLayout ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( layout.equals( repoLayout ) )
                {
                    result = true;
                    break;
                }
                else if ( WILDCARD.equals( layout ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }

        return result;
    }    


    static boolean matchesLayout( String repoLayout, String mirrorLayout )
    {
        boolean result = false;

        // simple checks first to short circuit processing below.
        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
        {
            result = true;
        }
        else if ( mirrorLayout.equals( repoLayout ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] layouts = mirrorLayout.split( "," );
            for ( String layout : layouts )
            {
                // see if this is a negative match
                if ( layout.length() > 1 && layout.startsWith( "!" ) )
                {
                    if ( layout.substring( 1 ).equals( repoLayout ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( layout.equals( repoLayout ) )
                {
                    result = true;
                    break;
                }
                else if ( WILDCARD.equals( layout ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }

        return result;
    }


    static boolean matchPattern( ArtifactRepository originalRepository, String pattern )
    {
        boolean result = false;
        String originalId = originalRepository.getId();

        // simple checks first to short circuit processing below.
        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] repos = pattern.split( "," );
            for ( String repo : repos )
            {
                // see if this is a negative match
                if ( repo.length() > 1 && repo.startsWith( "!" ) )
                {
                    if ( repo.substring( 1 ).equals( originalId ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( repo.equals( originalId ) )
                {
                    result = true;
                    break;
                }
                // check for external:*
                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
                else if ( WILDCARD.equals( repo ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }
        return result;
    }


    public Xpp3Dom getGoalConfiguration( String pluginGroupId, String pluginArtifactId, String executionId,
                                         String goalId )
    {
        Xpp3Dom dom = null;

        if ( getBuildPlugins() != null )
        {
            for ( Plugin plugin : getBuildPlugins() )
            {
                if ( pluginGroupId.equals( plugin.getGroupId() ) && pluginArtifactId.equals( plugin.getArtifactId() ) )
                {
                    dom = (Xpp3Dom) plugin.getConfiguration();

                    if ( executionId != null )
                    {
                        PluginExecution execution = plugin.getExecutionsAsMap().get( executionId );
                        if ( execution != null )
                        {
                            // NOTE: The PluginConfigurationExpander already merged the plugin-level config in
                            dom = (Xpp3Dom) execution.getConfiguration();
                        }
                    }
                    break;
                }
            }
        }

        if ( dom != null )
        {
            // make a copy so the original in the POM doesn't get messed with
            dom = new Xpp3Dom( dom );
        }

        return dom;
    }


    public Xpp3Dom getReportConfiguration( String pluginGroupId, String pluginArtifactId, String reportSetId )
    {
        Xpp3Dom dom = null;

        // ----------------------------------------------------------------------
        // I would like to be able to lookup the Mojo object using a key but
        // we have a limitation in modello that will be remedied shortly. So
        // for now I have to iterate through and see what we have.
        // ----------------------------------------------------------------------

        if ( getReportPlugins() != null )
        {
            for ( ReportPlugin plugin : getReportPlugins() )
            {
                if ( pluginGroupId.equals( plugin.getGroupId() ) && pluginArtifactId.equals( plugin.getArtifactId() ) )
                {
                    dom = (Xpp3Dom) plugin.getConfiguration();

                    if ( reportSetId != null )
                    {
                        ReportSet reportSet = plugin.getReportSetsAsMap().get( reportSetId );
                        if ( reportSet != null )
                        {
                            Xpp3Dom executionConfiguration = (Xpp3Dom) reportSet.getConfiguration();
                            if ( executionConfiguration != null )
                            {
                                Xpp3Dom newDom = new Xpp3Dom( executionConfiguration );
                                dom = Xpp3Dom.mergeXpp3Dom( newDom, dom );
                            }
                        }
                    }
                    break;
                }
            }
        }

        if ( dom != null )
        {
            // make a copy so the original in the POM doesn't get messed with
            dom = new Xpp3Dom( dom );
        }

        return dom;
    }


        public CacheKey( Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader> foreignImports,
                         DependencyFilter dependencyFilter, List<RemoteRepository> repositories,
                         RepositorySystemSession session )
        {
            this.plugin = plugin.clone();
            this.workspace = RepositoryUtils.getWorkspace( session );
            this.localRepo = session.getLocalRepository();
            this.repositories = new ArrayList<>( repositories.size() );
            for ( RemoteRepository repository : repositories )
            {
                if ( repository.isRepositoryManager() )
                {
                    this.repositories.addAll( repository.getMirroredRepositories() );
                }
                else
                {
                    this.repositories.add( repository );
                }
            }
            this.parentRealm = parentRealm;
            this.foreignImports =
                ( foreignImports != null ) ? foreignImports : Collections.<String, ClassLoader>emptyMap();
            this.filter = dependencyFilter;

            int hash = 17;
            hash = hash * 31 + CacheUtils.pluginHashCode( plugin );
            hash = hash * 31 + Objects.hashCode( workspace );
            hash = hash * 31 + Objects.hashCode( localRepo );
            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );
            hash = hash * 31 + Objects.hashCode( parentRealm );
            hash = hash * 31 + this.foreignImports.hashCode();
            hash = hash * 31 + Objects.hashCode( dependencyFilter );
            this.hashCode = hash;
        }


        public CacheKey( Plugin plugin, DependencyFilter extensionFilter, List<RemoteRepository> repositories,
                         RepositorySystemSession session )
        {
            this.plugin = plugin.clone();
            workspace = RepositoryUtils.getWorkspace( session );
            this.localRepo = session.getLocalRepository();
            this.repositories = new ArrayList<>( repositories.size() );
            for ( RemoteRepository repository : repositories )
            {
                if ( repository.isRepositoryManager() )
                {
                    this.repositories.addAll( repository.getMirroredRepositories() );
                }
                else
                {
                    this.repositories.add( repository );
                }
            }
            this.filter = extensionFilter;

            int hash = 17;
            hash = hash * 31 + CacheUtils.pluginHashCode( plugin );
            hash = hash * 31 + Objects.hashCode( workspace );
            hash = hash * 31 + Objects.hashCode( localRepo );
            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );
            hash = hash * 31 + Objects.hashCode( extensionFilter );
            this.hashCode = hash;
        }


    private Settings readSettings( Source settingsSource, SettingsBuildingRequest request,
                                   DefaultSettingsProblemCollector problems )
    {
        if ( settingsSource == null )
        {
            return new Settings();
        }

        problems.setSource( settingsSource.getLocation() );

        Settings settings;

        try
        {
            Map<String, ?> options = Collections.singletonMap( SettingsReader.IS_STRICT, Boolean.TRUE );

            try
            {
                settings = settingsReader.read( settingsSource.getInputStream(), options );
            }
            catch ( SettingsParseException e )
            {
                options = Collections.singletonMap( SettingsReader.IS_STRICT, Boolean.FALSE );

                settings = settingsReader.read( settingsSource.getInputStream(), options );

                problems.add( SettingsProblem.Severity.WARNING, e.getMessage(), e.getLineNumber(), e.getColumnNumber(),
                              e );
            }
        }
        catch ( SettingsParseException e )
        {
            problems.add( SettingsProblem.Severity.FATAL, "Non-parseable settings " + settingsSource.getLocation()
                + ": " + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e );
            return new Settings();
        }
        catch ( IOException e )
        {
            problems.add( SettingsProblem.Severity.FATAL, "Non-readable settings " + settingsSource.getLocation()
                + ": " + e.getMessage(), -1, -1, e );
            return new Settings();
        }

        settingsValidator.validate( settings, problems );

        return settings;
    }


    private PersistedToolchains readToolchains( Source toolchainsSource, ToolchainsBuildingRequest request,
                                                ProblemCollector problems )
    {
        if ( toolchainsSource == null )
        {
            return new PersistedToolchains();
        }

        PersistedToolchains toolchains;

        try
        {
            Map<String, ?> options = Collections.singletonMap( ToolchainsReader.IS_STRICT, Boolean.TRUE );

            try
            {
                toolchains = toolchainsReader.read( toolchainsSource.getInputStream(), options );
            }
            catch ( ToolchainsParseException e )
            {
                options = Collections.singletonMap( ToolchainsReader.IS_STRICT, Boolean.FALSE );

                toolchains = toolchainsReader.read( toolchainsSource.getInputStream(), options );

                problems.add( Problem.Severity.WARNING, e.getMessage(), e.getLineNumber(), e.getColumnNumber(),
                              e );
            }
        }
        catch ( ToolchainsParseException e )
        {
            problems.add( Problem.Severity.FATAL, "Non-parseable toolchains " + toolchainsSource.getLocation()
                + ": " + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e );
            return new PersistedToolchains();
        }
        catch ( IOException e )
        {
            problems.add( Problem.Severity.FATAL, "Non-readable toolchains " + toolchainsSource.getLocation()
                + ": " + e.getMessage(), -1, -1, e );
            return new PersistedToolchains();
        }

        return toolchains;
    }


    static boolean matchesLayout( String repoLayout, String mirrorLayout )
    {
        boolean result = false;

        // simple checks first to short circuit processing below.
        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
        {
            result = true;
        }
        else if ( mirrorLayout.equals( repoLayout ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] layouts = mirrorLayout.split( "," );
            for ( String layout : layouts )
            {
                // see if this is a negative match
                if ( layout.length() > 1 && layout.startsWith( "!" ) )
                {
                    if ( layout.substring( 1 ).equals( repoLayout ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( layout.equals( repoLayout ) )
                {
                    result = true;
                    break;
                }
                else if ( WILDCARD.equals( layout ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }

        return result;
    }


    static boolean matchesLayout( String repoLayout, String mirrorLayout )
    {
        boolean result = false;

        // simple checks first to short circuit processing below.
        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
        {
            result = true;
        }
        else if ( mirrorLayout.equals( repoLayout ) )
        {
            result = true;
        }
        else
        {
            // process the list
            String[] layouts = mirrorLayout.split( "," );
            for ( String layout : layouts )
            {
                // see if this is a negative match
                if ( layout.length() > 1 && layout.startsWith( "!" ) )
                {
                    if ( layout.substring( 1 ).equals( repoLayout ) )
                    {
                        // explicitly exclude. Set result and stop processing.
                        result = false;
                        break;
                    }
                }
                // check for exact match
                else if ( layout.equals( repoLayout ) )
                {
                    result = true;
                    break;
                }
                else if ( WILDCARD.equals( layout ) )
                {
                    result = true;
                    // don't stop processing in case a future segment explicitly excludes this repo
                }
            }
        }

        return result;
    }    


    public boolean isActive( Profile profile )
    {
        Activation activation = profile.getActivation();
        ActivationOS os = activation.getOs();

        boolean result = ensureAtLeastOneNonNull( os );

        if ( result && os.getFamily() != null )
        {
            result = determineFamilyMatch( os.getFamily() );
        }
        if ( result && os.getName() != null )
        {
            result = determineNameMatch( os.getName() );
        }
        if ( result && os.getArch() != null )
        {
            result = determineArchMatch( os.getArch() );
        }
        if ( result && os.getVersion() != null )
        {
            result = determineVersionMatch( os.getVersion() );
        }
        return result;
    }


    public boolean isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationOS os = activation.getOs();

        if ( os == null )
        {
            return false;
        }

        boolean active = ensureAtLeastOneNonNull( os );

        if ( active && os.getFamily() != null )
        {
            active = determineFamilyMatch( os.getFamily() );
        }
        if ( active && os.getName() != null )
        {
            active = determineNameMatch( os.getName() );
        }
        if ( active && os.getArch() != null )
        {
            active = determineArchMatch( os.getArch() );
        }
        if ( active && os.getVersion() != null )
        {
            active = determineVersionMatch( os.getVersion() );
        }

        return active;
    }


    public <T> Provider<T> scope( final Key<T> key, final Provider<T> unscoped )
    {
        return new Provider<T>()
        {
            @SuppressWarnings( "unchecked" )
            public T get()
            {
                LinkedList<ScopeState> stack = values.get();
                if ( stack == null || stack.isEmpty() )
                {
                    throw new OutOfScopeException( "Cannot access " + key + " outside of a scoping block" );
                }

                ScopeState state = stack.getFirst();

                Provider<?> seeded = state.seeded.get( key );

                if ( seeded != null )
                {
                    return (T) seeded.get();
                }

                T provided = (T) state.provided.get( key );
                if ( provided == null && unscoped != null )
                {
                    provided = unscoped.get();
                    state.provided.put( key, provided );
                }

                return provided;
            }
        };
    }


    public <T> Provider<T> scope( final Key<T> key, final Provider<T> unscoped )
    {
        return new Provider<T>()
        {
            @SuppressWarnings( "unchecked" )
            public T get()
            {
                LinkedList<ScopeState> stack = values.get();
                if ( stack == null || stack.isEmpty() )
                {
                    throw new OutOfScopeException( "Cannot access " + key + " outside of a scoping block" );
                }

                ScopeState state = stack.getFirst();

                Provider<?> seeded = state.seeded.get( key );

                if ( seeded != null )
                {
                    return (T) seeded.get();
                }

                T provided = (T) state.provided.get( key );
                if ( provided == null && unscoped != null )
                {
                    provided = unscoped.get();
                    state.provided.put( key, provided );
                }

                return provided;
            }
        };
    }


    public List<TaskSegment> calculateTaskSegments( MavenSession session, List<String> tasks )
        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
        MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
        PluginVersionResolutionException
    {
        List<TaskSegment> taskSegments = new ArrayList<>( tasks.size() );

        TaskSegment currentSegment = null;

        for ( String task : tasks )
        {
            if ( aggr.equals( task ) )
            {
                boolean aggregating = true;

                if ( currentSegment == null || currentSegment.isAggregating() != aggregating )
                {
                    currentSegment = new TaskSegment( aggregating );
                    taskSegments.add( currentSegment );
                }

                currentSegment.getTasks().add( new GoalTask( task ) );
            }
            else
            {
                // lifecycle phase
                if ( currentSegment == null || currentSegment.isAggregating() )
                {
                    currentSegment = new TaskSegment( false );
                    taskSegments.add( currentSegment );
                }
                currentSegment.getTasks().add( new LifecycleTask( task ) );
            }
        }

        return taskSegments;
    }


    public List<TaskSegment> calculateTaskSegments( MavenSession session, List<String> tasks )
        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
        MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
        PluginVersionResolutionException
    {
        List<TaskSegment> taskSegments = new ArrayList<>( tasks.size() );

        TaskSegment currentSegment = null;

        for ( String task : tasks )
        {
            if ( isGoalSpecification( task ) )
            {
                // "pluginPrefix:goal" or "groupId:artifactId[:version]:goal"

                lifecyclePluginResolver.resolveMissingPluginVersions( session.getTopLevelProject(), session );

                MojoDescriptor mojoDescriptor =
                    mojoDescriptorCreator.getMojoDescriptor( task, session, session.getTopLevelProject() );

                boolean aggregating = mojoDescriptor.isAggregator() || !mojoDescriptor.isProjectRequired();

                if ( currentSegment == null || currentSegment.isAggregating() != aggregating )
                {
                    currentSegment = new TaskSegment( aggregating );
                    taskSegments.add( currentSegment );
                }

                currentSegment.getTasks().add( new GoalTask( task ) );
            }
            else
            {
                // lifecycle phase

                if ( currentSegment == null || currentSegment.isAggregating() )
                {
                    currentSegment = new TaskSegment( false );
                    taskSegments.add( currentSegment );
                }

                currentSegment.getTasks().add( new LifecycleTask( task ) );
            }
        }

        return taskSegments;
    }


    private static void mergeReportSetDefinitions( ReportSet child, ReportSet parent )
    {
        List<String> parentReports = parent.getReports();
        List<String> childReports = child.getReports();

        List<String> reports = new ArrayList<>();

        if ( ( childReports != null ) && !childReports.isEmpty() )
        {
            reports.addAll( childReports );
        }

        if ( parentReports != null )
        {
            for ( String report : parentReports )
            {
                if ( !reports.contains( report ) )
                {
                    reports.add( report );
                }
            }
        }

        child.setReports( reports );

        Xpp3Dom childConfiguration = (Xpp3Dom) child.getConfiguration();
        Xpp3Dom parentConfiguration = (Xpp3Dom) parent.getConfiguration();

        childConfiguration = Xpp3Dom.mergeXpp3Dom( childConfiguration, parentConfiguration );

        child.setConfiguration( childConfiguration );
    }


    private static void mergePluginExecutionDefinitions( PluginExecution child, PluginExecution parent )
    {
        if ( child.getPhase() == null )
        {
            child.setPhase( parent.getPhase() );
        }

        List<String> parentGoals = parent.getGoals();
        List<String> childGoals = child.getGoals();

        List<String> goals = new ArrayList<>();

        if ( ( childGoals != null ) && !childGoals.isEmpty() )
        {
            goals.addAll( childGoals );
        }

        if ( parentGoals != null )
        {
            for (  String goal : parentGoals )
            {
                if ( !goals.contains( goal ) )
                {
                    goals.add( goal );
                }
            }
        }

        child.setGoals( goals );

        Xpp3Dom childConfiguration = (Xpp3Dom) child.getConfiguration();
        Xpp3Dom parentConfiguration = (Xpp3Dom) parent.getConfiguration();

        childConfiguration = Xpp3Dom.mergeXpp3Dom( childConfiguration, parentConfiguration );

        child.setConfiguration( childConfiguration );
    }


    public Artifact createDependencyArtifact( Dependency d )
    {
        VersionRange versionRange;
        try
        {
            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
        }
        catch ( InvalidVersionSpecificationException e )
        {
            // MNG-5368: Log a message instead of returning 'null' silently.
            this.logger.error( String.format( "Invalid version specification '%s' creating dependency artifact '%s'.",
                                              d.getVersion(), d ), e );
            return null;
        }

        Artifact artifact =
            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),
                                                      d.getClassifier(), d.getScope(), d.isOptional() );

        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )
        {
            artifact.setFile( new File( d.getSystemPath() ) );
        }

        if ( !d.getExclusions().isEmpty() )
        {
            List<String> exclusions = new ArrayList<>();

            for ( Exclusion exclusion : d.getExclusions() )
            {
                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );
            }

            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );
        }

        return artifact;
    }


    public Artifact createDependencyArtifact( Dependency d )
    {
        if ( d.getVersion() == null )
        {
            return null;
        }

        VersionRange versionRange;
        try
        {
            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
        }
        catch ( InvalidVersionSpecificationException e )
        {
            return null;
        }

        Artifact artifact =
            createDependencyArtifactX( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),
                                                      d.getClassifier(), d.getScope(), d.isOptional() );

        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )
        {
            artifact.setFile( new File( d.getSystemPath() ) );
        }

        if ( !d.getExclusions().isEmpty() )
        {
            List<String> exclusions = new ArrayList<>();

            for ( Exclusion exclusion : d.getExclusions() )
            {
                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );
            }

            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );
        }

        return artifact;
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();
            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : src )
            {
                if ( sourceDominant
                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }
            }

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                PluginExecution existing = merged.get( key );
                if ( existing != null )
                {
                    mergePluginExecution( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
        throws ArtifactMetadataRetrievalException
    {
        Set<Artifact> dependencies = new HashSet<>();

        if ( "g".equals( artifact.getArtifactId() ) )
        {
            Artifact a = null;
            try
            {
                a = factory.createBuildArtifact( "org.apache.maven", "h", "1.0", "jar" );
                dependencies.add( a );
            }
            catch ( Exception e )
            {
                throw new ArtifactMetadataRetrievalException( "Error retrieving metadata", e, a );
            }
        }

        if ( "i".equals( artifact.getArtifactId() ) )
        {
            Artifact a = null;
            try
            {
                a = factory.createBuildArtifact( "org.apache.maven", "j", "1.0-SNAPSHOT", "jar" );
                dependencies.add( a );
            }
            catch ( Exception e )
            {
                throw new ArtifactMetadataRetrievalException( "Error retrieving metadata", e, a );
            }
        }


        return new ResolutionGroup( artifact, dependencies, remoteRepositories );
    }


    public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
        throws ArtifactMetadataRetrievalException
    {
        Set<Artifact> dependencies = new HashSet<>();

        if ( "g".equals( artifact.getArtifactId() ) )
        {
            Artifact a = null;
            try
            {
                a = factory.createBuildArtifact( "org.apache.maven", "h", "1.0", "jar" );
                dependencies.add( a );
            }
            catch ( Exception e )
            {
                throw new ArtifactMetadataRetrievalException( "Error retrieving metadata", e, a );
            }
        }

        if ( "i".equals( artifact.getArtifactId() ) )
        {
            Artifact a = null;
            try
            {
                a = factory.createBuildArtifact( "org.apache.maven", "j", "1.0-SNAPSHOT", "jar" );
                dependencies.add( a );
            }
            catch ( Exception e )
            {
                throw new ArtifactMetadataRetrievalException( "Error retrieving metadata", e, a );
            }
        }


        return new ResolutionGroup( artifact, dependencies, remoteRepositories );
    }


    public String getLocation()
    {
        StringBuilder buffer = new StringBuilder( 256 );

        if ( getSource().length() > 0 )
        {
            if ( buffer.length() > 0 )
            {
                buffer.append( ", " );
            }
            buffer.append( getSource() );
        }

        if ( getLineNumber() > 0 )
        {
            if ( buffer.length() > 0 )
            {
                buffer.append( ", " );
            }
            buffer.append( "line " ).append( getLineNumber() );
        }

        if ( getColumnNumber() > 0 )
        {
            if ( buffer.length() > 0 )
            {
                buffer.append( ", " );
            }
            buffer.append( "column " ).append( getColumnNumber() );
        }

        return buffer.toString();
    }


    public String getLocation()
    {
        StringBuilder buffer = new StringBuilder( 256 );

        if ( getSource().length() > 0 )
        {
            if ( buffer.length() > 0 )
            {
                buffer.append( ", " );
            }
            buffer.append( getSource() );
        }

        if ( getLineNumber() > 0 )
        {
            if ( buffer.length() > 0 )
            {
                buffer.append( ", " );
            }
            buffer.append( "line " ).append( getLineNumber() );
        }

        if ( getColumnNumber() > 0 )
        {
            if ( buffer.length() > 0 )
            {
                buffer.append( ", " );
            }
            buffer.append( "column " ).append( getColumnNumber() );
        }

        return buffer.toString();
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet rset : src )
            {
                if ( sourceDominant || ( rset.getInherited() != null ? rset.isInherited() : source.isInherited() ) )
                {
                    Object key = getReportSetKey( rset );
                    merged.put( key, rset );
                }
            }

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                ReportSet existing = merged.get( key );
                if ( existing != null )
                {
                    mergeReportSet( element, existing, sourceDominant, context );
                }
                merged.put( key, element );
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected MavenProject getProjectWithDependencies( File pom )
        throws Exception
    {
        ProjectBuildingRequest configuration = newBuildingRequest();
        configuration.setRemoteRepositories( Arrays.asList( new ArtifactRepository[] {} ) );
        configuration.setProcessPlugins( false );
        configuration.setResolveDependencies( true );

        try
        {
            return projectBuilder.build( pom, configuration ).getProject();
        }
        catch ( Exception e )
        {
            Throwable cause = e.getCause();
            if ( cause instanceof ModelBuildingException )
            {
                String message = "In: " + pom + "\n\n";
                for ( ModelProblem problem : ( (ModelBuildingException) cause ).getProblems() )
                {
                    message += problem + "\n";
                }
                System.out.println( message );
            }

            throw e;
        }
    }


    protected MavenProject getProjectWithDependencies( File pom )
        throws Exception
    {
        ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();
        configuration.setLocalRepository( getLocalRepository() );
        configuration.setRemoteRepositories( Arrays.asList( new ArtifactRepository[] {} ) );
        configuration.setProcessPlugins( false );
        configuration.setResolveDependencies( true );
        initRepoSession( configuration );

        try
        {
            return projectBuilder.build( pom, configuration ).getProject();
        }
        catch ( Exception e )
        {
            Throwable cause = e.getCause();
            if ( cause instanceof ModelBuildingException )
            {
                String message = "In: " + pom + "\n\n";
                for ( ModelProblem problem : ( (ModelBuildingException) cause ).getProblems() )
                {
                    message += problem + "\n";
                }
                System.out.println( message );
                fail( message );
            }

            throw e;
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


        private void mergePluginContainerPlugins( PluginContainer target, PluginContainer source )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();

                Map<Object, Plugin> managedPlugins = new LinkedHashMap<>( src.size() * 2 );

                Map<Object, Object> context = Collections.emptyMap();

                for ( Plugin element : src )
                {
                    Object key = getPluginKey( element );
                    managedPlugins.put( key, element );
                }

                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    Plugin managedPlugin = managedPlugins.get( key );
                    if ( managedPlugin != null )
                    {
                        mergePlugin( element, managedPlugin, false, context );
                    }
                }
            }
        }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();
                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element );
                }

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    private Artifact createArtifact( String groupId, String artifactId, VersionRange versionRange, String type,
                                     String classifier, String scope, String inheritedScope, boolean optional )
    {
        String desiredScope = Artifact.SCOPE_RUNTIME;

        if ( inheritedScope == null )
        {
            desiredScope = scope;
        }
        else if ( Artifact.SCOPE_TEST.equals( scope ) || Artifact.SCOPE_PROVIDED.equals( scope ) )
        {
            return null;
        }
        else if ( Artifact.SCOPE_COMPILE.equals( scope ) && Artifact.SCOPE_COMPILE.equals( inheritedScope ) )
        {
            // added to retain compile artifactScope. Remove if you want compile inherited as runtime
            desiredScope = Artifact.SCOPE_COMPILE;
        }

        if ( Artifact.SCOPE_TEST.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_TEST;
        }

        if ( Artifact.SCOPE_PROVIDED.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_PROVIDED;
        }

        if ( Artifact.SCOPE_SYSTEM.equals( scope ) )
        {
            // system scopes come through unchanged...
            desiredScope = Artifact.SCOPE_SYSTEM;
        }

        ArtifactHandler handler = artifactHandlerManager.getArtifactHandler( type );

        return new DefaultArtifact( groupId, artifactId, versionRange, desiredScope, type, classifier, handler,
                                    optional );
    }


    private Artifact createArtifactX( String groupId, String artifactId, VersionRange versionRange, String type,
                                     String classifier, String scope, String inheritedScope, boolean optional )
    {
        String desiredScope = Artifact.SCOPE_RUNTIME;

        if ( inheritedScope == null )
        {
            desiredScope = scope;
        }
        else if ( Artifact.SCOPE_TEST.equals( scope ) || Artifact.SCOPE_PROVIDED.equals( scope ) )
        {
            return null;
        }
        else if ( Artifact.SCOPE_COMPILE.equals( scope ) && Artifact.SCOPE_COMPILE.equals( inheritedScope ) )
        {
            // added to retain compile artifactScope. Remove if you want compile inherited as runtime
            desiredScope = Artifact.SCOPE_COMPILE;
        }

        if ( Artifact.SCOPE_TEST.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_TEST;
        }

        if ( Artifact.SCOPE_PROVIDED.equals( inheritedScope ) )
        {
            desiredScope = Artifact.SCOPE_PROVIDED;
        }

        if ( Artifact.SCOPE_SYSTEM.equals( scope ) )
        {
            // system scopes come through unchanged...
            desiredScope = Artifact.SCOPE_SYSTEM;
        }

        ArtifactHandler handler = artifactHandlerManager.getArtifactHandler( type );

        return new DefaultArtifact( groupId, artifactId, versionRange, desiredScope, type, classifier, handler,
                                    optional );
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


        private void mergePluginContainerPlugins( PluginContainer target, PluginContainer source )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();

                Map<Object, Plugin> managedPlugins = new LinkedHashMap<>( src.size() * 2 );

                Map<Object, Object> context = Collections.emptyMap();

                for ( Plugin element : src )
                {
                    Object key = getPluginKey( element );
                    managedPlugins.put( key, element );
                }

                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    Plugin managedPlugin = managedPlugins.get( key );
                    if ( managedPlugin != null )
                    {
                        mergePlugin( element, managedPlugin, false, context );
                    }
                }
            }
        }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                     Map<Object, Object> context )
        {
            List<ReportSet> src = source.getReportSets();
            if ( !src.isEmpty() )
            {
                List<ReportSet> tgt = target.getReportSets();
                Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportSet element : tgt )
                {
                    Object key = getReportSetKey( element );
                    merged.put( key, element );
                }

                for ( ReportSet element : src )
                {
                    Object key = getReportSetKey( element );
                    ReportSet existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergeReportSet( existing, element, sourceDominant, context );
                    }
                    else
                    {
                        merged.put( key, element );
                    }
                }

                target.setReportSets( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<ReportPlugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<ReportPlugin> tgt = target.getPlugins();
                Map<Object, ReportPlugin> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( ReportPlugin element : tgt )
                {
                    Object key = getReportPluginKey( element );
                    merged.put( key, element );
                }

                for ( ReportPlugin element : src )
                {
                    Object key = getReportPluginKey( element );
                    ReportPlugin existing = merged.get( key );
                    if ( existing == null )
                    {
                        merged.put( key, element );
                    }
                    else
                    {
                        mergeReportPlugin( existing, element, sourceDominant, context );
                    }
                }

                target.setPlugins( new ArrayList<>( merged.values() ) );
            }
        }


    public boolean equals( Object o )
    {
        if ( o == this )
        {
            return true;
        }

        if ( !( o instanceof Artifact ) )
        {
            return false;
        }

        Artifact a = (Artifact) o;

        if ( !a.getGroupId().equals( getGroupId() ) )
        {
            return false;
        }
        else if ( !a.getArtifactId().equals( getArtifactId() ) )
        {
            return false;
        }
        else if ( !a.getVersion().equals( getVersion() ) )
        {
            return false;
        }
        else if ( !a.getType().equals( getType() ) )
        {
            return false;
        }
        else if ( a.getClassifier() == null ? getClassifier() != null : !a.getClassifier().equals( getClassifier() ) )
        {
            return false;
        }

        return true;
    }


    public boolean equals( Object o )
    {
        if ( o == this )
        {
            return true;
        }

        if ( !( o instanceof Artifact ) )
        {
            return false;
        }

        Artifact a = (Artifact) o;

        if ( !a.getGroupId().equals( groupId ) )
        {
            return false;
        }
        else if ( !a.getArtifactId().equals( artifactId ) )
        {
            return false;
        }
        else if ( !a.getVersion().equals( version ) )
        {
            return false;
        }
        else if ( !a.getType().equals( type ) )
        {
            return false;
        }
        else if ( a.getClassifier() == null ? classifier != null : !a.getClassifier().equals( classifier ) )
        {
            return false;
        }

        // We don't consider the version range in the comparison, just the resolved version

        return true;
    }


    private static String toMessage( List<SettingsProblem> problems )
    {
        StringWriter buffer = new StringWriter( 1024 );

        PrintWriter writer = new PrintWriter( buffer );

        writer.print( problems.size() );
        writer.print( ( problems.size() == 1 ) ? " problem was " : " problems were " );
        writer.print( "encountered while building the effective settings" );
        writer.println();

        for ( SettingsProblem problem : problems )
        {
            writer.print( "[" );
            writer.print( problem.getSeverity() );
            writer.print( "] " );
            writer.print( problem.getMessage() );
            writer.print( " @ " );
            writer.println( problem.getLocation() );
        }

        return buffer.toString();
    }


    private static String toMessage( List<Problem> problems )
    {
        StringWriter buffer = new StringWriter( 1024 );

        PrintWriter writer = new PrintWriter( buffer );

        writer.print( problems.size() );
        writer.print( ( problems.size() == 1 ) ? " problem was " : " problems were " );
        writer.print( "encountered while building the effective toolchains" );
        writer.println();

        for ( Problem problem : problems )
        {
            writer.print( "[" );
            writer.print( problem.getSeverity() );
            writer.print( "] " );
            writer.print( problem.getMessage() );
            String location = problem.getLocation();
            if ( !location.isEmpty() )
            {
                writer.print( " @ " );
                writer.print( location );
            }
            writer.println();
        }

        return buffer.toString();
    }


        private void mergePluginContainerPlugins( PluginContainer target, PluginContainer source )
        {
            List<Plugin> src = source.getPlugins();
            if ( !src.isEmpty() )
            {
                List<Plugin> tgt = target.getPlugins();

                Map<Object, Plugin> managedPlugins = new LinkedHashMap<>( src.size() * 2 );

                Map<Object, Object> context = Collections.emptyMap();

                for ( Plugin element : src )
                {
                    Object key = getPluginKey( element );
                    managedPlugins.put( key, element );
                }

                for ( Plugin element : tgt )
                {
                    Object key = getPluginKey( element );
                    Plugin managedPlugin = managedPlugins.get( key );
                    if ( managedPlugin != null )
                    {
                        mergePlugin( element, managedPlugin, false, context );
                    }
                }
            }
        }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                               Map<Object, Object> context )
        {
            List<PluginExecution> src = source.getExecutions();
            if ( !src.isEmpty() )
            {
                List<PluginExecution> tgt = target.getExecutions();

                Map<Object, PluginExecution> merged =
                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

                for ( PluginExecution element : src )
                {
                    Object key = getPluginExecutionKey( element );
                    merged.put( key, element.clone() );
                }

                for ( PluginExecution element : tgt )
                {
                    Object key = getPluginExecutionKey( element );
                    PluginExecution existing = merged.get( key );
                    if ( existing != null )
                    {
                        mergePluginExecution( element, existing, sourceDominant, context );
                    }
                    merged.put( key, element );
                }

                target.setExecutions( new ArrayList<>( merged.values() ) );
            }
        }


    public List<Dependency> getRuntimeDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_RUNTIME.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getSystemDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getCompileDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
                     || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getSystemDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getTestDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            Dependency dependency = new Dependency();

            dependency.setArtifactId( a.getArtifactId() );
            dependency.setGroupId( a.getGroupId() );
            dependency.setVersion( a.getVersion() );
            dependency.setScope( a.getScope() );
            dependency.setType( a.getType() );
            dependency.setClassifier( a.getClassifier() );

            list.add( dependency );
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getSystemDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getCompileDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
                     || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getRuntimeDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_RUNTIME.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getTestDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            Dependency dependency = new Dependency();

            dependency.setArtifactId( a.getArtifactId() );
            dependency.setGroupId( a.getGroupId() );
            dependency.setVersion( a.getVersion() );
            dependency.setScope( a.getScope() );
            dependency.setType( a.getType() );
            dependency.setClassifier( a.getClassifier() );

            list.add( dependency );
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getRuntimeDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_RUNTIME.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getCompileDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO let the scope handler deal with this
            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
                     || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
            {
                Dependency dependency = new Dependency();

                dependency.setArtifactId( a.getArtifactId() );
                dependency.setGroupId( a.getGroupId() );
                dependency.setVersion( a.getVersion() );
                dependency.setScope( a.getScope() );
                dependency.setType( a.getType() );
                dependency.setClassifier( a.getClassifier() );

                list.add( dependency );
            }
        }
        return Collections.unmodifiableList( list );
    }


    public List<Dependency> getTestDependencies()
    {
        Set<Artifact> artifacts = getArtifacts();

        if ( ( artifacts == null ) || artifacts.isEmpty() )
        {
            return Collections.emptyList();
        }

        List<Dependency> list = new ArrayList<>( artifacts.size() );

        for ( Artifact a : getArtifacts() )
        {
            Dependency dependency = new Dependency();

            dependency.setArtifactId( a.getArtifactId() );
            dependency.setGroupId( a.getGroupId() );
            dependency.setVersion( a.getVersion() );
            dependency.setScope( a.getScope() );
            dependency.setType( a.getType() );
            dependency.setClassifier( a.getClassifier() );

            list.add( dependency );
        }
        return Collections.unmodifiableList( list );
    }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return ( value == 0 ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                    int itemValue = ( (IntItem) item ).value;
                    return ( value < itemValue ) ? -1 : ( ( value == itemValue ) ? 0 : 1 );
                case LONG_ITEM:
                case BIGINTEGER_ITEM:
                    return -1;

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return ( value == 0 ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                    return 1;
                case LONG_ITEM:
                    long itemValue = ( (LongItem) item ).value;
                    return ( value < itemValue ) ? -1 : ( ( value == itemValue ) ? 0 : 1 );
                case BIGINTEGER_ITEM:
                    return -1;

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return ( value == 0 ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                    return 1;
                case LONG_ITEM:
                    long itemValue = ( (LongItem) item ).value;
                    return ( value < itemValue ) ? -1 : ( ( value == itemValue ) ? 0 : 1 );
                case BIGINTEGER_ITEM:
                    return -1;

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return BigInteger.ZERO.equals( value ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                case LONG_ITEM:
                    return 1;

                case BIGINTEGER_ITEM:
                    return value.compareTo( ( (BigIntegerItem) item ).value );

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return ( value == 0 ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                    return 1;
                case LONG_ITEM:
                    long itemValue = ( (LongItem) item ).value;
                    return ( value < itemValue ) ? -1 : ( ( value == itemValue ) ? 0 : 1 );
                case BIGINTEGER_ITEM:
                    return -1;

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                // 1-rc < 1, 1-ga > 1
                return comparableQualifier( value ).compareTo( RELEASE_VERSION_INDEX );
            }
            switch ( item.getType() )
            {
                case INT_ITEM:
                case LONG_ITEM:
                case BIGINTEGER_ITEM:
                    return -1; // 1.any < 1.1 ?

                case STRING_ITEM:
                    return comparableQualifier( value ).compareTo( comparableQualifier( ( (StringItem) item ).value ) );

                case LIST_ITEM:
                    return -1; // 1.any < 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


    private Authentication getAuthentication( RepositorySystemSession session, ArtifactRepository repository )
    {
        if ( session != null )
        {
            AuthenticationSelector selector = session.getAuthenticationSelector();
            if ( selector != null )
            {
                RemoteRepository repo = RepositoryUtils.toRepo( repository );
                org.eclipse.aether.repository.Authentication auth = selector.getAuthentication( repo );
                if ( auth != null )
                {
                    repo = new RemoteRepository.Builder( repo ).setAuthentication( auth ).build();
                    AuthenticationContext authCtx = AuthenticationContext.forRepository( session, repo );
                    Authentication result =
                        new Authentication( authCtx.get( AuthenticationContext.USERNAME ),
                                            authCtx.get( AuthenticationContext.PASSWORD ) );
                    result.setPrivateKey( authCtx.get( AuthenticationContext.PRIVATE_KEY_PATH ) );
                    result.setPassphrase( authCtx.get( AuthenticationContext.PRIVATE_KEY_PASSPHRASE ) );
                    authCtx.close();
                    return result;
                }
            }
        }
        return null;
    }


    private Authentication getAuthentication( RepositorySystemSession session, ArtifactRepository repository )
    {
        if ( session != null )
        {
            AuthenticationSelector selector = session.getAuthenticationSelector();
            if ( selector != null )
            {
                RemoteRepository repo = RepositoryUtils.toRepo( repository );
                org.eclipse.aether.repository.Authentication auth = selector.getAuthentication( repo );
                if ( auth != null )
                {
                    repo = new RemoteRepository.Builder( repo ).setAuthentication( auth ).build();
                    AuthenticationContext authCtx = AuthenticationContext.forRepository( session, repo );
                    Authentication result =
                        new Authentication( authCtx.get( AuthenticationContext.USERNAME ),
                                            authCtx.get( AuthenticationContext.PASSWORD ) );
                    result.setPrivateKey( authCtx.get( AuthenticationContext.PRIVATE_KEY_PATH ) );
                    result.setPassphrase( authCtx.get( AuthenticationContext.PRIVATE_KEY_PASSPHRASE ) );
                    authCtx.close();
                    return result;
                }
            }
        }
        return null;
    }


    public void transferSucceeded( TransferEvent event )
    {
        String action = ( event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded" );
        String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";

        TransferResource resource = event.getResource();
        long contentLength = event.getTransferredBytes();
        FileSizeFormat format = new FileSizeFormat( Locale.ENGLISH );

        StringBuilder message = new StringBuilder();
        message.append( action ).append( ' ' ).append( direction ).append( ' ' ).append( resource.getRepositoryId() );
        message.append( ": " );
        message.append( resource.getRepositoryUrl() ).append( resource.getResourceName() );
        message.append( " (" ).append( format.format( contentLength ) );

        long duration = System.currentTimeMillis() - resource.getTransferStartTime();
        if ( duration > 0L )
        {
            double bytesPerSecond = contentLength / ( duration / 1000.0 );
            message.append( " at " ).append( format.format( (long) bytesPerSecond ) ).append( "/s" );
        }

        message.append( ')' );
        out.println( message.toString() );
    }


    public void transferSucceeded( TransferEvent event )
    {
        String action = ( event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded" );
        String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";

        TransferResource resource = event.getResource();
        long contentLength = event.getTransferredBytes();
        FileSizeFormat format = new FileSizeFormat( Locale.ENGLISH );

        StringBuilder message = new StringBuilder();
        message.append( action ).append( ' ' ).append( direction ).append( ' ' ).append( resource.getRepositoryId() );
        message.append( ": " );
        message.append( resource.getRepositoryUrl() ).append( resource.getResourceName() );
        message.append( " (" ).append( format.format( contentLength ) );

        long duration = System.currentTimeMillis() - resource.getTransferStartTime();
        if ( duration > 0L )
        {
            double bytesPerSecond = contentLength / ( duration / 1000.0 );
            message.append( " at " ).append( format.format( (long) bytesPerSecond ) ).append( "/s" );
        }

        message.append( ')' );
        out.info( message.toString() );
    }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return ( value == 0 ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                    int itemValue = ( (IntItem) item ).value;
                    return ( value < itemValue ) ? -1 : ( ( value == itemValue ) ? 0 : 1 );
                case LONG_ITEM:
                case BIGINTEGER_ITEM:
                    return -1;

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return BigInteger.ZERO.equals( value ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                case LONG_ITEM:
                    return 1;

                case BIGINTEGER_ITEM:
                    return value.compareTo( ( (BigIntegerItem) item ).value );

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return ( value == 0 ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                    int itemValue = ( (IntItem) item ).value;
                    return ( value < itemValue ) ? -1 : ( ( value == itemValue ) ? 0 : 1 );
                case LONG_ITEM:
                case BIGINTEGER_ITEM:
                    return -1;

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                // 1-rc < 1, 1-ga > 1
                return comparableQualifier( value ).compareTo( RELEASE_VERSION_INDEX );
            }
            switch ( item.getType() )
            {
                case INT_ITEM:
                case LONG_ITEM:
                case BIGINTEGER_ITEM:
                    return -1; // 1.any < 1.1 ?

                case STRING_ITEM:
                    return comparableQualifier( value ).compareTo( comparableQualifier( ( (StringItem) item ).value ) );

                case LIST_ITEM:
                    return -1; // 1.any < 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_TestResources( BuildBase target, BuildBase source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<Resource> src = source.getTestResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getTestResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setTestResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
                                                 boolean sourceDominant, Map<Object, Object> context )
    {
        List<Plugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<Plugin> tgt = target.getPlugins();
            Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Plugin element : tgt )
            {
                Object key = getPluginKey( element );
                merged.put( key, element );
            }

            for ( Plugin element : src )
            {
                Object key = getPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuildBase_Resources( BuildBase target, BuildBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Resource> src = source.getResources();
        if ( !src.isEmpty() )
        {
            List<Resource> tgt = target.getResources();
            Map<Object, Resource> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Resource element : tgt )
            {
                Object key = getResourceKey( element );
                merged.put( key, element );
            }

            for ( Resource element : src )
            {
                Object key = getResourceKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setResources( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Dependencies( Plugin target, Plugin source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<PluginExecution> src = source.getExecutions();
        if ( !src.isEmpty() )
        {
            List<PluginExecution> tgt = target.getExecutions();

            Map<Object, PluginExecution> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( PluginExecution element : tgt )
            {
                Object key = getPluginExecutionKey( element );
                merged.put( key, element );
            }

            for ( PluginExecution element : src )
            {
                Object key = getPluginExecutionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExecutions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Developers( Model target, Model source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Developer> src = source.getDevelopers();
        if ( !src.isEmpty() )
        {
            List<Developer> tgt = target.getDevelopers();
            Map<Object, Developer> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Developer element : tgt )
            {
                Object key = getDeveloperKey( element );
                merged.put( key, element );
            }

            for ( Developer element : src )
            {
                Object key = getDeveloperKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDevelopers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_MailingLists( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<MailingList> src = source.getMailingLists();
        if ( !src.isEmpty() )
        {
            List<MailingList> tgt = target.getMailingLists();
            Map<Object, MailingList> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( MailingList element : tgt )
            {
                Object key = getMailingListKey( element );
                merged.put( key, element );
            }

            for ( MailingList element : src )
            {
                Object key = getMailingListKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setMailingLists( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                return BigInteger.ZERO.equals( value ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
            }

            switch ( item.getType() )
            {
                case INT_ITEM:
                case LONG_ITEM:
                    return 1;

                case BIGINTEGER_ITEM:
                    return value.compareTo( ( (BigIntegerItem) item ).value );

                case STRING_ITEM:
                    return 1; // 1.1 > 1-sp

                case LIST_ITEM:
                    return 1; // 1.1 > 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


        public int compareTo( Item item )
        {
            if ( item == null )
            {
                // 1-rc < 1, 1-ga > 1
                return comparableQualifier( value ).compareTo( RELEASE_VERSION_INDEX );
            }
            switch ( item.getType() )
            {
                case INT_ITEM:
                case LONG_ITEM:
                case BIGINTEGER_ITEM:
                    return -1; // 1.any < 1.1 ?

                case STRING_ITEM:
                    return comparableQualifier( value ).compareTo( comparableQualifier( ( (StringItem) item ).value ) );

                case LIST_ITEM:
                    return -1; // 1.any < 1-1

                default:
                    throw new IllegalStateException( "invalid item: " + item.getClass() );
            }
        }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeBuild_Extensions( Build target, Build source, boolean sourceDominant,
                                          Map<Object, Object> context )
    {
        List<Extension> src = source.getExtensions();
        if ( !src.isEmpty() )
        {
            List<Extension> tgt = target.getExtensions();
            Map<Object, Extension> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Extension element : tgt )
            {
                Object key = getExtensionKey( element );
                merged.put( key, element );
            }

            for ( Extension element : src )
            {
                Object key = getExtensionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExtensions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeCiManagement_Notifiers( CiManagement target, CiManagement source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Notifier> src = source.getNotifiers();
        if ( !src.isEmpty() )
        {
            List<Notifier> tgt = target.getNotifiers();
            Map<Object, Notifier> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Notifier element : tgt )
            {
                Object key = getNotifierKey( element );
                merged.put( key, element );
            }

            for ( Notifier element : src )
            {
                Object key = getNotifierKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setNotifiers( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependencyManagement_Dependencies( DependencyManagement target, DependencyManagement source,
                                                           boolean sourceDominant, Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReportPlugin_ReportSets( ReportPlugin target, ReportPlugin source, boolean sourceDominant,
                                                 Map<Object, Object> context )
    {
        List<ReportSet> src = source.getReportSets();
        if ( !src.isEmpty() )
        {
            List<ReportSet> tgt = target.getReportSets();
            Map<Object, ReportSet> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportSet element : tgt )
            {
                Object key = getReportSetKey( element );
                merged.put( key, element );
            }

            for ( ReportSet element : src )
            {
                Object key = getReportSetKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setReportSets( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Licenses( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<License> src = source.getLicenses();
        if ( !src.isEmpty() )
        {
            List<License> tgt = target.getLicenses();
            Map<Object, License> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( License element : tgt )
            {
                Object key = getLicenseKey( element );
                merged.put( key, element );
            }

            for ( License element : src )
            {
                Object key = getLicenseKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setLicenses( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<ReportPlugin> src = source.getPlugins();
        if ( !src.isEmpty() )
        {
            List<ReportPlugin> tgt = target.getPlugins();
            Map<Object, ReportPlugin> merged =
                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( ReportPlugin element : tgt )
            {
                Object key = getReportPluginKey( element );
                merged.put( key, element );
            }

            for ( ReportPlugin element : src )
            {
                Object key = getReportPluginKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPlugins( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<Exclusion> src = source.getExclusions();
        if ( !src.isEmpty() )
        {
            List<Exclusion> tgt = target.getExclusions();

            Map<Object, Exclusion> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Exclusion element : tgt )
            {
                Object key = getExclusionKey( element );
                merged.put( key, element );
            }

            for ( Exclusion element : src )
            {
                Object key = getExclusionKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setExclusions( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                      Map<Object, Object> context )
    {
        List<Repository> src = source.getPluginRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getPluginRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setPluginRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Contributors( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        List<Contributor> src = source.getContributors();
        if ( !src.isEmpty() )
        {
            List<Contributor> tgt = target.getContributors();
            Map<Object, Contributor> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Contributor element : tgt )
            {
                Object key = getContributorKey( element );
                merged.put( key, element );
            }

            for ( Contributor element : src )
            {
                Object key = getContributorKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setContributors( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Repository> src = source.getRepositories();
        if ( !src.isEmpty() )
        {
            List<Repository> tgt = target.getRepositories();
            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Repository element : tgt )
            {
                Object key = getRepositoryKey( element );
                merged.put( key, element );
            }

            for ( Repository element : src )
            {
                Object key = getRepositoryKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setRepositories( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModel_Profiles( Model target, Model source, boolean sourceDominant,
                                        Map<Object, Object> context )
    {
        List<Profile> src = source.getProfiles();
        if ( !src.isEmpty() )
        {
            List<Profile> tgt = target.getProfiles();
            Map<Object, Profile> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Profile element : tgt )
            {
                Object key = getProfileKey( element );
                merged.put( key, element );
            }

            for ( Profile element : src )
            {
                Object key = getProfileKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setProfiles( new ArrayList<>( merged.values() ) );
        }
    }


    protected void mergeModelBase_Dependencies( ModelBase target, ModelBase source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        List<Dependency> src = source.getDependencies();
        if ( !src.isEmpty() )
        {
            List<Dependency> tgt = target.getDependencies();
            Map<Object, Dependency> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );

            for ( Dependency element : tgt )
            {
                Object key = getDependencyKey( element );
                merged.put( key, element );
            }

            for ( Dependency element : src )
            {
                Object key = getDependencyKey( element );
                if ( sourceDominant || !merged.containsKey( key ) )
                {
                    merged.put( key, element );
                }
            }

            target.setDependencies( new ArrayList<>( merged.values() ) );
        }
    }


    public ModelSource resolveModel( final Parent parent )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( parent.getGroupId(), parent.getArtifactId(), "", "pom",
                                                           parent.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested parent version range '%s'",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-2199 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested parent version range '%s' does not specify an upper bound",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            parent.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
        }
        catch ( final VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), parent.getGroupId(), parent.getArtifactId(),
                                                  parent.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Dependency dependency )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), "",
                                                           "pom", dependency.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult =
                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested dependency version range '%s'",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-4463 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested dependency version range '%s' does not specify an upper bound",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );
        }
        catch ( VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),
                                                  dependency.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Parent parent )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( parent.getGroupId(), parent.getArtifactId(), "", "pom",
                                                           parent.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested parent version range '%s'",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-2199 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested parent version range '%s' does not specify an upper bound",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            parent.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
        }
        catch ( final VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), parent.getGroupId(), parent.getArtifactId(),
                                                  parent.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Parent parent )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( parent.getGroupId(), parent.getArtifactId(), "", "pom",
                                                           parent.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult =
                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested parent version range '%s'",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-2199 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested parent version range '%s' does not specify an upper bound",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            parent.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
        }
        catch ( final VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), parent.getGroupId(), parent.getArtifactId(),
                                                  parent.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Parent parent )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( parent.getGroupId(), parent.getArtifactId(), "", "pom",
                                                           parent.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested parent version range '%s'",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-2199 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested parent version range '%s' does not specify an upper bound",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            parent.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
        }
        catch ( final VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), parent.getGroupId(), parent.getArtifactId(),
                                                  parent.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Dependency dependency )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), "",
                                                           "pom", dependency.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested dependency version range '%s'",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-4463 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested dependency version range '%s' does not specify an upper bound",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );
        }
        catch ( VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),
                                                  dependency.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Parent parent )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( parent.getGroupId(), parent.getArtifactId(), "", "pom",
                                                           parent.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult =
                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested parent version range '%s'",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-2199 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested parent version range '%s' does not specify an upper bound",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            parent.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
        }
        catch ( final VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), parent.getGroupId(), parent.getArtifactId(),
                                                  parent.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Dependency dependency )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), "",
                                                           "pom", dependency.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult =
                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested dependency version range '%s'",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-4463 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested dependency version range '%s' does not specify an upper bound",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );
        }
        catch ( VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),
                                                  dependency.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Dependency dependency )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), "",
                                                           "pom", dependency.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested dependency version range '%s'",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-4463 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested dependency version range '%s' does not specify an upper bound",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );
        }
        catch ( VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),
                                                  dependency.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Dependency dependency )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), "",
                                                           "pom", dependency.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult =
                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested dependency version range '%s'",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-4463 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested dependency version range '%s' does not specify an upper bound",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );
        }
        catch ( VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),
                                                  dependency.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Dependency dependency )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), "",
                                                           "pom", dependency.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested dependency version range '%s'",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-4463 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested dependency version range '%s' does not specify an upper bound",
                                   dependency.getVersion() ),
                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );

            }

            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );
        }
        catch ( VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),
                                                  dependency.getVersion(), e );

        }
    }


    public ModelSource resolveModel( final Parent parent )
        throws UnresolvableModelException
    {
        try
        {
            final Artifact artifact = new DefaultArtifact( parent.getGroupId(), parent.getArtifactId(), "", "pom",
                                                           parent.getVersion() );

            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );
            versionRangeRequest.setTrace( trace );

            final VersionRangeResult versionRangeResult =
                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );

            if ( versionRangeResult.getHighestVersion() == null )
            {
                throw new UnresolvableModelException(
                    String.format( "No versions matched the requested parent version range '%s'",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            if ( versionRangeResult.getVersionConstraint() != null
                     && versionRangeResult.getVersionConstraint().getRange() != null
                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )
            {
                // Message below is checked for in the MNG-2199 core IT.
                throw new UnresolvableModelException(
                    String.format( "The requested parent version range '%s' does not specify an upper bound",
                                   parent.getVersion() ),
                    parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );

            }

            parent.setVersion( versionRangeResult.getHighestVersion().toString() );

            return resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
        }
        catch ( final VersionRangeResolutionException e )
        {
            throw new UnresolvableModelException( e.getMessage(), parent.getGroupId(), parent.getArtifactId(),
                                                  parent.getVersion(), e );

        }
    }


    private Dependency convert( org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes )
    {
        ArtifactType stereotype = stereotypes.get( dependency.getType() );
        if ( stereotype == null )
        {
            stereotype = new DefaultArtifactType( dependency.getType() );
        }

        boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;

        Map<String, String> props = null;
        if ( system )
        {
            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, dependency.getSystemPath() );
        }

        Artifact artifact =
            new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null,
                                 dependency.getVersion(), props, stereotype );

        List<Exclusion> exclusions = new ArrayList<>( dependency.getExclusions().size() );
        for ( org.apache.maven.model.Exclusion exclusion : dependency.getExclusions() )
        {
            exclusions.add( convert( exclusion ) );
        }

        Dependency result = new Dependency( artifact, dependency.getScope(),
                                            dependency.getOptional() != null
                                                ? dependency.isOptional()
                                                : null,
                                            exclusions );

        return result;
    }


    public static Dependency toDependency( org.apache.maven.model.Dependency dependency,
                                           ArtifactTypeRegistry stereotypes )
    {
        ArtifactType stereotype = stereotypes.get( dependency.getType() );
        if ( stereotype == null )
        {
            stereotype = new DefaultArtifactType( dependency.getType() );
        }

        boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;

        Map<String, String> props = null;
        if ( system )
        {
            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, dependency.getSystemPath() );
        }

        Artifact artifact =
            new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null,
                                 dependency.getVersion(), props, stereotype );

        List<Exclusion> exclusions = new ArrayList<>( dependency.getExclusions().size() );
        for ( org.apache.maven.model.Exclusion exclusion : dependency.getExclusions() )
        {
            exclusions.add( toExclusion( exclusion ) );
        }

        Dependency result = new Dependency( artifact,
                                            dependency.getScope(),
                                            dependency.getOptional() != null
                                                ? dependency.isOptional()
                                                : null,
                                            exclusions );

        return result;
    }


    public String toString()
    {
        StringBuilder sb = new StringBuilder( 256 );

        sb.append( "      id: " ).append( getId() ).append( '\n' );
        sb.append( "      url: " ).append( getUrl() ).append( '\n' );
        sb.append( "   layout: " ).append( layout != null ? layout : "none" ).append( '\n' );

        if ( proxy != null )
        {
            sb.append( "    proxy: " ).append( proxy.getHost() ).append( ':' ).append( proxy.getPort() ).append( '\n' );
        }

        if ( snapshots != null )
        {
            sb.append( "snapshots: [enabled => " ).append( snapshots.isEnabled() );
            sb.append( ", update => " ).append( snapshots.getUpdatePolicy() ).append( "]\n" );
        }

        if ( releases != null )
        {
            sb.append( " releases: [enabled => " ).append( releases.isEnabled() );
            sb.append( ", update => " ).append( releases.getUpdatePolicy() ).append( "]\n" );
        }

        return sb.toString();
    }


    public String toString()
    {
        StringBuilder sb = new StringBuilder( 256 );

        sb.append( "       id: " ).append( getId() ).append( '\n' );
        sb.append( "      url: " ).append( getUrl() ).append( '\n' );
        sb.append( "   layout: " ).append( layout != null ? layout : "none" ).append( '\n' );

        if ( snapshots != null )
        {
            sb.append( "snapshots: [enabled => " ).append( snapshots.isEnabled() );
            sb.append( ", update => " ).append( snapshots.getUpdatePolicy() ).append( "]\n" );
        }

        if ( releases != null )
        {
            sb.append( " releases: [enabled => " ).append( releases.isEnabled() );
            sb.append( ", update => " ).append( releases.getUpdatePolicy() ).append( "]\n" );
        }

        return sb.toString();
    }


    public ArtifactRepository buildArtifactRepository( Repository repo )
        throws InvalidRepositoryException
    {
        if ( repo != null )
        {
            String id = repo.getId();

            if ( StringUtils.isEmpty( id ) )
            {
                throw new InvalidRepositoryException( "Repository identifier missing", "" );
            }

            String url = repo.getUrl();

            if ( StringUtils.isEmpty( url ) )
            {
                throw new InvalidRepositoryException( "URL missing for repository " + id, id );
            }

            ArtifactRepositoryPolicy snapshots = buildArtifactRepositoryPolicy( repo.getSnapshots() );

            ArtifactRepositoryPolicy releases = buildArtifactRepositoryPolicy( repo.getReleases() );

            return createArtifactRepository( id, url, getLayout( repo.getLayout() ), snapshots, releases );
        }
        else
        {
            return null;
        }
    }


    public static ArtifactRepository buildArtifactRepository( org.apache.maven.model.Repository repo )
        throws InvalidRepositoryException
    {
        if ( repo != null )
        {
            String id = repo.getId();

            if ( StringUtils.isEmpty( id ) )
            {
                throw new InvalidRepositoryException( "Repository identifier missing", "" );
            }

            String url = repo.getUrl();

            if ( StringUtils.isEmpty( url ) )
            {
                throw new InvalidRepositoryException( "URL missing for repository " + id, id );
            }

            ArtifactRepositoryPolicy snapshots = buildArtifactRepositoryPolicy( repo.getSnapshots() );

            ArtifactRepositoryPolicy releases = buildArtifactRepositoryPolicy( repo.getReleases() );

            ArtifactRepositoryLayout layout = new DefaultRepositoryLayout();

            return createArtifactRepository( id, url, layout, snapshots, releases );
        }
        else
        {
            return null;
        }
    }


        private static void evaluateArray( Object target, InterpolateObjectAction ctx )
        {
            int len = Array.getLength( target );
            for ( int i = 0; i < len; i++ )
            {
                Object value = Array.get( target, i );
                if ( value != null )
                {
                    if ( String.class == value.getClass() )
                    {
                        String interpolated = ctx.interpolate( (String) value );

                        if ( !interpolated.equals( value ) )
                        {
                            Array.set( target, i, interpolated );
                        }
                    }
                    else
                    {
                        ctx.interpolationTargets.add( value );
                    }
                }
            }
        }


        private void evaluateArray( Object target )
            throws ModelInterpolationException
        {
            int len = Array.getLength( target );
            for ( int i = 0; i < len; i++ )
            {
                Object value = Array.get( target, i );
                if ( value != null )
                {
                    if ( String.class == value.getClass() )
                    {
                        String interpolated =
                            modelInterpolator.interpolateInternal( (String) value, valueSources, postProcessors,
                                                                   debugEnabled );

                        if ( !interpolated.equals( value ) )
                        {
                            Array.set( target, i, interpolated );
                        }
                    }
                    else
                    {
                        interpolationTargets.add( value );
                    }
                }
            }
        }


    public DefaultModelBuildingRequest( ModelBuildingRequest request )
    {
        setPomFile( request.getPomFile() );
        setModelSource( request.getModelSource() );
        setValidationLevel( request.getValidationLevel() );
        setProcessPlugins( request.isProcessPlugins() );
        setTwoPhaseBuilding( request.isTwoPhaseBuilding() );
        setProfiles( request.getProfiles() );
        setActiveProfileIds( request.getActiveProfileIds() );
        setInactiveProfileIds( request.getInactiveProfileIds() );
        setSystemProperties( request.getSystemProperties() );
        setUserProperties( request.getUserProperties() );
        setBuildStartTime( request.getBuildStartTime() );
        setModelResolver( request.getModelResolver() );
        setModelBuildingListener( request.getModelBuildingListener() );
        setModelCache( request.getModelCache() );
    }


    public DefaultProjectBuildingRequest( ProjectBuildingRequest request )
    {
        this();
        setProcessPlugins( request.isProcessPlugins() );
        setProfiles( request.getProfiles() );
        setActiveProfileIds( request.getActiveProfileIds() );
        setInactiveProfileIds( request.getInactiveProfileIds() );
        setSystemProperties( request.getSystemProperties() );
        setUserProperties( request.getUserProperties() );
        setRemoteRepositories( request.getRemoteRepositories() );
        setPluginArtifactRepositories( request.getPluginArtifactRepositories() );
        setRepositorySession( request.getRepositorySession() );
        setLocalRepository( request.getLocalRepository() );
        setBuildStartTime( request.getBuildStartTime() );
        setProject( request.getProject() );
        setResolveDependencies( request.isResolveDependencies() );
        setValidationLevel( request.getValidationLevel() );
    }


    public List<String> getCompileClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() + 1 );

        String d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                // TODO let the scope handler deal with this
                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
                    || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
                {
                    addArtifactPath( a, list );
                }
            }
        }

        return list;
    }


    public List<String> getTestClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() + 2 );

        String d = getBuild().getTestOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                addArtifactPath( a, list );
            }
        }

        return list;
    }


    public List<String> getTestClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() + 2 );

        String d = getBuild().getTestOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                addArtifactPath( a, list );
            }
        }

        return list;
    }


    public List<String> getSystemClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() );

        String d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                // TODO let the scope handler deal with this
                if ( Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
                {
                    addArtifactPath( a, list );
                }
            }
        }
        return list;
    }


    public LocalMetadataResult find( RepositorySystemSession session, LocalMetadataRequest request )
    {
        LocalMetadataResult result = new LocalMetadataResult( request );

        String path;

        Metadata metadata = request.getMetadata();
        String context = request.getContext();
        RemoteRepository remote = request.getRepository();

        if ( remote != null )
        {
            path = getPathForRemoteMetadata( metadata, remote, context );
        }
        else
        {
            path = getPathForLocalMetadata( metadata );
        }

        File file = new File( getRepository().getBasedir(), path );
        if ( file.isFile() )
        {
            result.setFile( file );
        }

        return result;
    }


    public LocalMetadataResult find( RepositorySystemSession session, LocalMetadataRequest request )
    {
        LocalMetadataResult result = new LocalMetadataResult( request );

        String path;

        Metadata metadata = request.getMetadata();
        String context = request.getContext();
        RemoteRepository remote = request.getRepository();

        if ( remote != null )
        {
            path = getPathForRemoteMetadata( metadata, remote, context );
        }
        else
        {
            path = getPathForLocalMetadata( metadata );
        }

        File file = new File( getRepository().getBasedir(), path );
        if ( file.isFile() )
        {
            result.setFile( file );
        }

        return result;
    }


    private static boolean dependenciesEquals( List<Dependency> a, List<Dependency> b )
    {
        if ( a.size() != b.size() )
        {
            return false;
        }

        Iterator<Dependency> aI = a.iterator();
        Iterator<Dependency> bI = b.iterator();

        while ( aI.hasNext() )
        {
            Dependency aD = aI.next();
            Dependency bD = bI.next();

            boolean r = Objects.equals( aD.getGroupId(), bD.getGroupId() ) //
                && Objects.equals( aD.getArtifactId(), bD.getArtifactId() ) //
                && Objects.equals( aD.getVersion(), bD.getVersion() ) //
                && Objects.equals( aD.getType(), bD.getType() ) //
                && Objects.equals( aD.getClassifier(), bD.getClassifier() ) //
                && Objects.equals( aD.getScope(), bD.getScope() );

            r &= exclusionsEquals( aD.getExclusions(), bD.getExclusions() );

            if ( !r )
            {
                return false;
            }
        }

        return true;
    }


    private static boolean exclusionsEquals( List<Exclusion> a, List<Exclusion> b )
    {
        if ( a.size() != b.size() )
        {
            return false;
        }

        Iterator<Exclusion> aI = a.iterator();
        Iterator<Exclusion> bI = b.iterator();

        while ( aI.hasNext() )
        {
            Exclusion aD = aI.next();
            Exclusion bD = bI.next();

            boolean r = Objects.equals( aD.getGroupId(), bD.getGroupId() ) //
                && Objects.equals( aD.getArtifactId(), bD.getArtifactId() );

            if ( !r )
            {
                return false;
            }
        }

        return true;
    }


    public Object getPluginComponent( Plugin plugin, String role, String roleHint )
        throws PluginManagerException, ComponentLookupException
    {
        MavenSession session = legacySupport.getSession();

        PluginDescriptor pluginDescriptor;
        try
        {
            pluginDescriptor =
                pluginManager.getPluginDescriptor( plugin, session.getCurrentProject().getRemotePluginRepositories(),
                                                   session.getRepositorySession() );

            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );
        }
        catch ( Exception e )
        {
            throw new PluginManagerException( plugin, e.getMessage(), e );
        }

        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();
        try
        {
            Thread.currentThread().setContextClassLoader( pluginDescriptor.getClassRealm() );

            return container.lookup( role, roleHint );
        }
        finally
        {
            Thread.currentThread().setContextClassLoader( oldClassLoader );
        }
    }


    public Map<String, Object> getPluginComponents( Plugin plugin, String role )
        throws ComponentLookupException, PluginManagerException
    {
        MavenSession session = legacySupport.getSession();

        PluginDescriptor pluginDescriptor;
        try
        {
            pluginDescriptor =
                pluginManager.getPluginDescriptor( plugin, session.getCurrentProject().getRemotePluginRepositories(),
                                                   session.getRepositorySession() );

            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );
        }
        catch ( Exception e )
        {
            throw new PluginManagerException( plugin, e.getMessage(), e );
        }

        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();
        try
        {
            Thread.currentThread().setContextClassLoader( pluginDescriptor.getClassRealm() );

            return container.lookupMap( role );
        }
        finally
        {
            Thread.currentThread().setContextClassLoader( oldClassLoader );
        }
    }


    public static CoreExtensionEntry discoverFrom( ClassRealm loader )
    {
        Set<String> artifacts = new LinkedHashSet<>();
        Set<String> packages = new LinkedHashSet<>();

        try
        {
            Enumeration<URL> urls = loader.getResources( BUILDER.getExtensionDescriptorLocation() );
            while ( urls.hasMoreElements() )
            {

                try ( InputStream is = urls.nextElement().openStream() )
                {
                    ExtensionDescriptor descriptor = BUILDER.build( is );
                    artifacts.addAll( descriptor.getExportedArtifacts() );
                    packages.addAll( descriptor.getExportedPackages() );
                }
            }
        }
        catch ( IOException ignored )
        {
            // exports descriptors are entirely optional
        }

        return new CoreExtensionEntry( loader, artifacts, packages );
    }


    public static CoreExtensionEntry discoverFrom( ClassRealm loader, Collection<File> classpath )
    {
        Set<String> artifacts = new LinkedHashSet<>();
        Set<String> packages = new LinkedHashSet<>();

        try
        {
            for ( File entry : classpath )
            {
                ExtensionDescriptor descriptor = BUILDER.build( entry );
                if ( descriptor != null )
                {
                    artifacts.addAll( descriptor.getExportedArtifacts() );
                    packages.addAll( descriptor.getExportedPackages() );
                }
            }
        }
        catch ( IOException ignored )
        {
            // exports descriptors are entirely optional
        }

        return new CoreExtensionEntry( loader, artifacts, packages );
    }


    public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )
    {
        String repoId = repository.getId();

        if ( repoId != null && mirrors != null )
        {
            for ( Mirror mirror : mirrors )
            {
                if ( repoId.equals( mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
                {
                    return mirror;
                }
            }

            for ( Mirror mirror : mirrors )
            {
                if ( matchPattern( repository, mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
                {
                    return mirror;
                }
            }
        }

        return null;
    }


    public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )
    {
        String repoId = repository.getId();

        if ( repoId != null && mirrors != null )
        {
            for ( Mirror mirror : mirrors )
            {
                if ( repoId.equals( mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
                {
                    return mirror;
                }
            }

            for ( Mirror mirror : mirrors )
            {
                if ( matchPattern( repository, mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
                {
                    return mirror;
                }
            }
        }

        return null;
    }


    private void assembleDependencyInheritance( Model child, Model parent )
    {
        Map<String, Dependency> depsMap = new LinkedHashMap<>();

        List<Dependency> deps = parent.getDependencies();

        if ( deps != null )
        {
            for ( Dependency dependency : deps )
            {
                depsMap.put( dependency.getManagementKey(), dependency );
            }
        }

        deps = child.getDependencies();

        if ( deps != null )
        {
            for ( Dependency dependency : deps )
            {
                depsMap.put( dependency.getManagementKey(), dependency );
            }
        }

        child.setDependencies( new ArrayList<>( depsMap.values() ) );
    }


    private static List<Dependency> mergeDependencyList( List<Dependency> child, List<Dependency> parent )
    {
        Map<String, Dependency> depsMap = new LinkedHashMap<>();

        if ( parent != null )
        {
            for ( Dependency dependency : parent )
            {
                depsMap.put( dependency.getManagementKey(), dependency );
            }
        }

        if ( child != null )
        {
            for ( Dependency dependency : child )
            {
                depsMap.put( dependency.getManagementKey(), dependency );
            }
        }

        return new ArrayList<>( depsMap.values() );
    }


    private Mirror getMirror( RepositorySystemSession session, ArtifactRepository repository )
    {
        if ( session != null )
        {
            org.eclipse.aether.repository.MirrorSelector selector = session.getMirrorSelector();
            if ( selector != null )
            {
                RemoteRepository repo = selector.getMirror( RepositoryUtils.toRepo( repository ) );
                if ( repo != null )
                {
                    Mirror mirror = new Mirror();
                    mirror.setId( repo.getId() );
                    mirror.setUrl( repo.getUrl() );
                    mirror.setLayout( repo.getContentType() );
                    return mirror;
                }
            }
        }
        return null;
    }


    private Mirror getMirror( RepositorySystemSession session, ArtifactRepository repository )
    {
        if ( session != null )
        {
            org.eclipse.aether.repository.MirrorSelector selector = session.getMirrorSelector();
            if ( selector != null )
            {
                RemoteRepository repo = selector.getMirror( RepositoryUtils.toRepo( repository ) );
                if ( repo != null )
                {
                    Mirror mirror = new Mirror();
                    mirror.setId( repo.getId() );
                    mirror.setUrl( repo.getUrl() );
                    mirror.setLayout( repo.getContentType() );
                    return mirror;
                }
            }
        }
        return null;
    }


    private static String format( LocalRepository localRepository, List<RemoteRepository> remoteRepositories )
    {
        String repos = "[";

        if ( localRepository != null )
        {
            repos += localRepository.getId() + " (" + localRepository.getBasedir() + ")";
        }

        if ( remoteRepositories != null && !remoteRepositories.isEmpty() )
        {
            for ( RemoteRepository repository : remoteRepositories )
            {
                repos += ", ";

                if ( repository != null )
                {
                    repos += repository.getId() + " (" + repository.getUrl() + ")";
                }
            }
        }

        repos += "]";

        return repos;
    }


    private static String format( LocalRepository localRepository, List<RemoteRepository> remoteRepositories )
    {
        String repos = "[";

        if ( localRepository != null )
        {
            repos += localRepository.getId() + " (" + localRepository.getBasedir() + ")";
        }

        if ( remoteRepositories != null && !remoteRepositories.isEmpty() )
        {
            for ( RemoteRepository repository : remoteRepositories )
            {
                repos += ", ";

                if ( repository != null )
                {
                    repos += repository.getId() + " (" + repository.getUrl() + ")";
                }
            }
        }

        repos += "]";

        return repos;
    }


    public static RepositoryPolicy toRepositoryPolicy( org.apache.maven.model.RepositoryPolicy policy )
    {
        boolean enabled = true;
        String checksums = RepositoryPolicy.CHECKSUM_POLICY_WARN;
        String updates = RepositoryPolicy.UPDATE_POLICY_DAILY;

        if ( policy != null )
        {
            enabled = policy.isEnabled();
            if ( policy.getUpdatePolicy() != null )
            {
                updates = policy.getUpdatePolicy();
            }
            if ( policy.getChecksumPolicy() != null )
            {
                checksums = policy.getChecksumPolicy();
            }
        }

        return new RepositoryPolicy( enabled, updates, checksums );
    }


    public static ArtifactRepositoryPolicy buildArtifactRepositoryPolicy( org.apache.maven.model.RepositoryPolicy
                                                                          policy )
    {
        boolean enabled = true;

        String updatePolicy = null;

        String checksumPolicy = null;

        if ( policy != null )
        {
            enabled = policy.isEnabled();

            if ( policy.getUpdatePolicy() != null )
            {
                updatePolicy = policy.getUpdatePolicy();
            }
            if ( policy.getChecksumPolicy() != null )
            {
                checksumPolicy = policy.getChecksumPolicy();
            }
        }

        return new ArtifactRepositoryPolicy( enabled, updatePolicy, checksumPolicy );
    }    


    public ArtifactRepositoryPolicy buildArtifactRepositoryPolicy( RepositoryPolicy policy )
    {
        boolean enabled = true;

        String updatePolicy = null;

        String checksumPolicy = null;

        if ( policy != null )
        {
            enabled = policy.isEnabled();

            if ( policy.getUpdatePolicy() != null )
            {
                updatePolicy = policy.getUpdatePolicy();
            }
            if ( policy.getChecksumPolicy() != null )
            {
                checksumPolicy = policy.getChecksumPolicy();
            }
        }

        return new ArtifactRepositoryPolicy( enabled, updatePolicy, checksumPolicy );
    }


    public static RepositoryPolicy toRepositoryPolicy( org.apache.maven.model.RepositoryPolicy policy )
    {
        boolean enabled = true;
        String checksums = RepositoryPolicy.CHECKSUM_POLICY_WARN;
        String updates = RepositoryPolicy.UPDATE_POLICY_DAILY;

        if ( policy != null )
        {
            enabled = policy.isEnabled();
            if ( policy.getUpdatePolicy() != null )
            {
                updates = policy.getUpdatePolicy();
            }
            if ( policy.getChecksumPolicy() != null )
            {
                checksums = policy.getChecksumPolicy();
            }
        }

        return new RepositoryPolicy( enabled, updates, checksums );
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public String pathOf( Artifact artifact )
    {
        ArtifactHandler artifactHandler = artifact.getArtifactHandler();

        StringBuilder path = new StringBuilder( 128 );

        path.append( formatAsDirectory( artifact.getGroupId() ) ).append( PATH_SEPARATOR );
        path.append( artifact.getArtifactId() ).append( PATH_SEPARATOR );
        path.append( artifact.getBaseVersion() ).append( PATH_SEPARATOR );
        path.append( artifact.getArtifactId() ).append( ARTIFACT_SEPARATOR ).append( artifact.getVersion() );

        if ( artifact.hasClassifier() )
        {
            path.append( ARTIFACT_SEPARATOR ).append( artifact.getClassifier() );
        }

        if ( artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0 )
        {
            path.append( GROUP_SEPARATOR ).append( artifactHandler.getExtension() );
        }

        return path.toString();
    }


    public String pathOf( Artifact artifact )
    {
        ArtifactHandler artifactHandler = artifact.getArtifactHandler();

        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getArtifactId() ).append( ARTIFACT_SEPARATOR ).append( artifact.getVersion() );

        if ( artifact.hasClassifier() )
        {
            path.append( ARTIFACT_SEPARATOR ).append( artifact.getClassifier() );
        }

        if ( artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0 )
        {
            path.append( GROUP_SEPARATOR ).append( artifactHandler.getExtension() );
        }

        return path.toString();
    }


    private void assembleReportingInheritance( Model child, Model parent )
    {
        // Reports :: aggregate
        Reporting childReporting = child.getReporting();
        Reporting parentReporting = parent.getReporting();

        if ( parentReporting != null )
        {
            if ( childReporting == null )
            {
                childReporting = new Reporting();
                child.setReporting( childReporting );
            }

            childReporting.setExcludeDefaults( parentReporting.isExcludeDefaults() );

            if ( StringUtils.isEmpty( childReporting.getOutputDirectory() ) )
            {
                childReporting.setOutputDirectory( parentReporting.getOutputDirectory() );
            }

            mergeReportPluginLists( childReporting, parentReporting, true );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    public ArtifactRepositoryPolicy buildArtifactRepositoryPolicy( RepositoryPolicy policy )
    {
        boolean enabled = true;

        String updatePolicy = null;

        String checksumPolicy = null;

        if ( policy != null )
        {
            enabled = policy.isEnabled();

            if ( policy.getUpdatePolicy() != null )
            {
                updatePolicy = policy.getUpdatePolicy();
            }
            if ( policy.getChecksumPolicy() != null )
            {
                checksumPolicy = policy.getChecksumPolicy();
            }
        }

        return new ArtifactRepositoryPolicy( enabled, updatePolicy, checksumPolicy );
    }


    public static ArtifactRepositoryPolicy buildArtifactRepositoryPolicy( org.apache.maven.model.RepositoryPolicy
                                                                          policy )
    {
        boolean enabled = true;

        String updatePolicy = null;

        String checksumPolicy = null;

        if ( policy != null )
        {
            enabled = policy.isEnabled();

            if ( policy.getUpdatePolicy() != null )
            {
                updatePolicy = policy.getUpdatePolicy();
            }
            if ( policy.getChecksumPolicy() != null )
            {
                checksumPolicy = policy.getChecksumPolicy();
            }
        }

        return new ArtifactRepositoryPolicy( enabled, updatePolicy, checksumPolicy );
    }    


    public String toString()
    {
        if ( artifacts == null )
        {
            return "";
        }
        StringBuilder sb = new StringBuilder( 256 );
        int i = 1;
        sb.append( "---------\n" );
        sb.append( artifacts.size() ).append( '\n' );
        for ( Artifact a : artifacts )
        {
            sb.append( i ).append( ' ' ).append( a ).append( '\n' );
            i++;
        }
        sb.append( "---------\n" );
        return sb.toString();
    }


    public String toString()
    {
        StringBuilder sb = new StringBuilder();

        if ( artifacts != null )
        {
            int i = 1;
            sb.append( "---------\n" );
            sb.append( artifacts.size() ).append( '\n' );
            for ( Artifact a : artifacts )
            {
                sb.append( i ).append( ' ' ).append( a ).append( '\n' );
                i++;
            }
            sb.append( "---------\n" );
        }

        return sb.toString();
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles( String packaging )
    {
        Set<Plugin> plugins;

        // NOTE: The upper-case packaging name is intentional, that's a special hinting mode used for certain tests
        if ( "JAR".equals( packaging ) )
        {
            plugins = new LinkedHashSet<>();

            plugins.add( newPlugin( "maven-compiler-plugin", "compile", "testCompile" ) );
            plugins.add( newPlugin( "maven-resources-plugin", "resources", "testResources" ) );
            plugins.add( newPlugin( "maven-surefire-plugin", "test" ) );
            plugins.add( newPlugin( "maven-jar-plugin", "jar" ) );
            plugins.add( newPlugin( "maven-install-plugin", "install" ) );
            plugins.add( newPlugin( "maven-deploy-plugin", "deploy" ) );
        }
        else
        {
            plugins = Collections.emptySet();
        }

        return plugins;
    }


    public List<String> getCompileClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() + 1 );

        String d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                // TODO let the scope handler deal with this
                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
                    || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
                {
                    addArtifactPath( a, list );
                }
            }
        }

        return list;
    }


    public List<String> getSystemClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() );

        String d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                // TODO let the scope handler deal with this
                if ( Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
                {
                    addArtifactPath( a, list );
                }
            }
        }
        return list;
    }


    public List<String> getCompileClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() + 1 );

        String d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                // TODO let the scope handler deal with this
                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
                    || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
                {
                    addArtifactPath( a, list );
                }
            }
        }

        return list;
    }


    public List<String> getRuntimeClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() + 1 );

        String d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath()
            // TODO let the scope handler deal with this
                && ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_RUNTIME.equals( a.getScope() ) ) )
            {
                addArtifactPath( a, list );
            }
        }
        return list;
    }


    public List<String> getRuntimeClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() + 1 );

        String d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath()
            // TODO let the scope handler deal with this
                && ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_RUNTIME.equals( a.getScope() ) ) )
            {
                addArtifactPath( a, list );
            }
        }
        return list;
    }


    public List<String> getSystemClasspathElements()
        throws DependencyResolutionRequiredException
    {
        List<String> list = new ArrayList<>( getArtifacts().size() );

        String d = getBuild().getOutputDirectory();
        if ( d != null )
        {
            list.add( d );
        }

        for ( Artifact a : getArtifacts() )
        {
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                // TODO let the scope handler deal with this
                if ( Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
                {
                    addArtifactPath( a, list );
                }
            }
        }
        return list;
    }


    public void setRootLoggerLevel( Level level )
    {
        String value;
        switch ( level )
        {
            case DEBUG:
                value = "debug";
                break;

            case INFO:
                value = "info";
                break;

            default:
                value = "error";
                break;
        }
        System.setProperty( "maven.logging.root.level", value );
    }


    public void setRootLoggerLevel( Level level )
    {
        String value;
        switch ( level )
        {
            case DEBUG:
                value = "debug";
                break;

            case INFO:
                value = "info";
                break;

            default:
                value = "error";
                break;
        }
        System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", value );
    }


    protected void mergeBuildBase_Filters( BuildBase target, BuildBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getFilters();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getFilters();
            Set<String> excludes = new LinkedHashSet<>( tgt );
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            for ( String s : src )
            {
                if ( !excludes.contains( s ) )
                {
                    merged.add( s );
                }
            }
            target.setFilters( merged );
        }
    }


    protected void mergePluginExecution_Goals( PluginExecution target, PluginExecution source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<String> src = source.getGoals();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getGoals();
            Set<String> excludes = new LinkedHashSet<>( tgt );
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            for ( String s : src )
            {
                if ( !excludes.contains( s ) )
                {
                    merged.add( s );
                }
            }
            target.setGoals( merged );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( sourceDominant || tgt == null || isSiteEmpty( tgt ) )
            {
                if ( tgt == null )
                {
                    tgt = new Site();
                }
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSite( tgt );
                mergeSite( tgt, src, sourceDominant, context );
            }
            mergeSite_ChildSiteUrlInheritAppendPath( tgt, src, sourceDominant, context );
        }
    }


    private static Repository convertToSettingsRepository( org.apache.maven.model.Repository modelRepo )
    {
        Repository repo = new Repository();

        repo.setId( modelRepo.getId() );
        repo.setLayout( modelRepo.getLayout() );
        repo.setName( modelRepo.getName() );
        repo.setUrl( modelRepo.getUrl() );

        if ( modelRepo.getSnapshots() != null )
        {
            repo.setSnapshots( convertRepositoryPolicy( modelRepo.getSnapshots() ) );
        }
        if ( modelRepo.getReleases() != null )
        {
            repo.setReleases( convertRepositoryPolicy( modelRepo.getReleases() ) );
        }

        return repo;
    }


    private static Repository convertFromProfileXmlRepository( org.apache.maven.profiles.Repository profileXmlRepo )
    {
        Repository repo = new Repository();

        repo.setId( profileXmlRepo.getId() );
        repo.setLayout( profileXmlRepo.getLayout() );
        repo.setName( profileXmlRepo.getName() );
        repo.setUrl( profileXmlRepo.getUrl() );

        if ( profileXmlRepo.getSnapshots() != null )
        {
            repo.setSnapshots( convertRepositoryPolicy( profileXmlRepo.getSnapshots() ) );
        }
        if ( profileXmlRepo.getReleases() != null )
        {
            repo.setReleases( convertRepositoryPolicy( profileXmlRepo.getReleases() ) );
        }

        return repo;
    }


    private static org.apache.maven.model.Repository convertFromSettingsRepository( Repository settingsRepo )
    {
        org.apache.maven.model.Repository repo = new org.apache.maven.model.Repository();

        repo.setId( settingsRepo.getId() );
        repo.setLayout( settingsRepo.getLayout() );
        repo.setName( settingsRepo.getName() );
        repo.setUrl( settingsRepo.getUrl() );

        if ( settingsRepo.getSnapshots() != null )
        {
            repo.setSnapshots( convertRepositoryPolicy( settingsRepo.getSnapshots() ) );
        }
        if ( settingsRepo.getReleases() != null )
        {
            repo.setReleases( convertRepositoryPolicy( settingsRepo.getReleases() ) );
        }

        return repo;
    }


    private static Repository convertFromProfileXmlRepository( org.apache.maven.profiles.Repository profileXmlRepo )
    {
        Repository repo = new Repository();

        repo.setId( profileXmlRepo.getId() );
        repo.setLayout( profileXmlRepo.getLayout() );
        repo.setName( profileXmlRepo.getName() );
        repo.setUrl( profileXmlRepo.getUrl() );

        if ( profileXmlRepo.getSnapshots() != null )
        {
            repo.setSnapshots( convertRepositoryPolicy( profileXmlRepo.getSnapshots() ) );
        }
        if ( profileXmlRepo.getReleases() != null )
        {
            repo.setReleases( convertRepositoryPolicy( profileXmlRepo.getReleases() ) );
        }

        return repo;
    }


    private boolean determineVersionMatch( String version )
    {
        String test = version;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isVersion( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineArchMatch( String arch )
    {
        String test = arch;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isArch( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineVersionMatch( String version )
    {
        String test = version;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isVersion( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineNameMatch( String name )
    {
        String test = name;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isName( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineVersionMatch( String version )
    {
        String test = version;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isVersion( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineFamilyMatch( String family )
    {
        String test = family;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isFamily( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineArchMatch( String arch )
    {
        String test = arch;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isArch( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineNameMatch( String name )
    {
        String test = name;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isName( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineArchMatch( String arch )
    {
        String test = arch;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isArch( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineFamilyMatch( String family )
    {
        String test = family;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isFamily( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private static org.apache.maven.model.Repository convertFromSettingsRepository( Repository settingsRepo )
    {
        org.apache.maven.model.Repository repo = new org.apache.maven.model.Repository();

        repo.setId( settingsRepo.getId() );
        repo.setLayout( settingsRepo.getLayout() );
        repo.setName( settingsRepo.getName() );
        repo.setUrl( settingsRepo.getUrl() );

        if ( settingsRepo.getSnapshots() != null )
        {
            repo.setSnapshots( convertRepositoryPolicy( settingsRepo.getSnapshots() ) );
        }
        if ( settingsRepo.getReleases() != null )
        {
            repo.setReleases( convertRepositoryPolicy( settingsRepo.getReleases() ) );
        }

        return repo;
    }


    private static Repository convertToSettingsRepository( org.apache.maven.model.Repository modelRepo )
    {
        Repository repo = new Repository();

        repo.setId( modelRepo.getId() );
        repo.setLayout( modelRepo.getLayout() );
        repo.setName( modelRepo.getName() );
        repo.setUrl( modelRepo.getUrl() );

        if ( modelRepo.getSnapshots() != null )
        {
            repo.setSnapshots( convertRepositoryPolicy( modelRepo.getSnapshots() ) );
        }
        if ( modelRepo.getReleases() != null )
        {
            repo.setReleases( convertRepositoryPolicy( modelRepo.getReleases() ) );
        }

        return repo;
    }


    private boolean determineNameMatch( String name )
    {
        String test = name;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isName( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    private boolean determineFamilyMatch( String family )
    {
        String test = family;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isFamily( test );

        if ( reverse )
        {
            return !result;
        }
        else
        {
            return result;
        }
    }


    public String pathOf( Artifact artifact )
    {
        ArtifactHandler artifactHandler = artifact.getArtifactHandler();

        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getGroupId() ).append( '/' );
        path.append( artifactHandler.getDirectory() ).append( '/' );
        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );

        if ( artifact.hasClassifier() )
        {
            path.append( '-' ).append( artifact.getClassifier() );
        }

        if ( artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0 )
        {
            path.append( '.' ).append( artifactHandler.getExtension() );
        }

        return path.toString();
    }


    public String pathOf( Artifact artifact )
    {
        ArtifactHandler artifactHandler = artifact.getArtifactHandler();

        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getGroupId() ).append( '/' );
        path.append( artifactHandler.getDirectory() ).append( '/' );
        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );

        if ( artifact.hasClassifier() )
        {
            path.append( '-' ).append( artifact.getClassifier() );
        }

        if ( artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0 )
        {
            path.append( '.' ).append( artifactHandler.getExtension() );
        }

        return path.toString();
    }


    private String getPath( Metadata metadata, String repositoryKey )
    {
        StringBuilder path = new StringBuilder( 128 );

        if ( metadata.getGroupId().length() > 0 )
        {
            path.append( metadata.getGroupId().replace( '.', '/' ) ).append( '/' );

            if ( metadata.getArtifactId().length() > 0 )
            {
                path.append( metadata.getArtifactId() ).append( '/' );

                if ( metadata.getVersion().length() > 0 )
                {
                    path.append( metadata.getVersion() ).append( '/' );
                }
            }
        }

        path.append( insertRepositoryKey( metadata.getType(), repositoryKey ) );

        return path.toString();
    }


    private String getPath( Metadata metadata, String repositoryKey )
    {
        StringBuilder path = new StringBuilder( 128 );

        if ( metadata.getGroupId().length() > 0 )
        {
            path.append( metadata.getGroupId().replace( '.', '/' ) ).append( '/' );

            if ( metadata.getArtifactId().length() > 0 )
            {
                path.append( metadata.getArtifactId() ).append( '/' );

                if ( metadata.getVersion().length() > 0 )
                {
                    path.append( metadata.getVersion() ).append( '/' );
                }
            }
        }

        path.append( insertRepositoryKey( metadata.getType(), repositoryKey ) );

        return path.toString();
    }


    public PluginPrefixResult resolve( PluginPrefixRequest request )
        throws NoPluginFoundForPrefixException
    {
        return new PluginPrefixResult()
        {
            public String getGroupId()
            {
                return "com.foobar";
            }

            public String getArtifactId()
            {
                return "bazbaz";
            }

            public ArtifactRepository getRepository()
            {
                return null;
            }
        };
    }


    public PluginVersionResult resolve( PluginVersionRequest request )
        throws PluginVersionResolutionException
    {
        return new PluginVersionResult()
        {
            public String getVersion()
            {
                return "0.42";
            }

            public ArtifactRepository getRepository()
            {
                return null;
            }
        };
    }


    public Collection<? extends Metadata> prepare( Collection<? extends Artifact> artifacts )
    {
        for ( Artifact artifact : artifacts )
        {
            if ( artifact.isSnapshot() )
            {
                Object key = LocalSnapshotMetadata.getKey( artifact );
                LocalSnapshotMetadata snapshotMetadata = snapshots.get( key );
                if ( snapshotMetadata == null )
                {
                    snapshotMetadata = new LocalSnapshotMetadata( artifact, legacyFormat );
                    snapshots.put( key, snapshotMetadata );
                }
                snapshotMetadata.bind( artifact );
            }
        }

        return Collections.emptyList();
    }


    public Collection<? extends Metadata> prepare( Collection<? extends Artifact> artifacts )
    {
        for ( Artifact artifact : artifacts )
        {
            if ( artifact.isSnapshot() )
            {
                Object key = RemoteSnapshotMetadata.getKey( artifact );
                RemoteSnapshotMetadata snapshotMetadata = snapshots.get( key );
                if ( snapshotMetadata == null )
                {
                    snapshotMetadata = new RemoteSnapshotMetadata( artifact, legacyFormat );
                    snapshots.put( key, snapshotMetadata );
                }
                snapshotMetadata.bind( artifact );
            }
        }

        return snapshots.values();
    }


    public Collection<? extends Metadata> finish( Collection<? extends Artifact> artifacts )
    {
        for ( Artifact artifact : artifacts )
        {
            Object key = VersionsMetadata.getKey( artifact );
            if ( processedVersions.get( key ) == null )
            {
                VersionsMetadata versionsMetadata = versions.get( key );
                if ( versionsMetadata == null )
                {
                    versionsMetadata = new VersionsMetadata( artifact );
                    versions.put( key, versionsMetadata );
                }
            }
        }

        return versions.values();
    }


    public Collection<? extends Metadata> prepare( Collection<? extends Artifact> artifacts )
    {
        for ( Artifact artifact : artifacts )
        {
            if ( artifact.isSnapshot() )
            {
                Object key = RemoteSnapshotMetadata.getKey( artifact );
                RemoteSnapshotMetadata snapshotMetadata = snapshots.get( key );
                if ( snapshotMetadata == null )
                {
                    snapshotMetadata = new RemoteSnapshotMetadata( artifact, legacyFormat );
                    snapshots.put( key, snapshotMetadata );
                }
                snapshotMetadata.bind( artifact );
            }
        }

        return snapshots.values();
    }


    public Collection<? extends Metadata> finish( Collection<? extends Artifact> artifacts )
    {
        for ( Artifact artifact : artifacts )
        {
            Object key = VersionsMetadata.getKey( artifact );
            if ( processedVersions.get( key ) == null )
            {
                VersionsMetadata versionsMetadata = versions.get( key );
                if ( versionsMetadata == null )
                {
                    versionsMetadata = new VersionsMetadata( artifact );
                    versions.put( key, versionsMetadata );
                }
            }
        }

        return versions.values();
    }


    public Collection<? extends Metadata> prepare( Collection<? extends Artifact> artifacts )
    {
        for ( Artifact artifact : artifacts )
        {
            if ( artifact.isSnapshot() )
            {
                Object key = LocalSnapshotMetadata.getKey( artifact );
                LocalSnapshotMetadata snapshotMetadata = snapshots.get( key );
                if ( snapshotMetadata == null )
                {
                    snapshotMetadata = new LocalSnapshotMetadata( artifact, legacyFormat );
                    snapshots.put( key, snapshotMetadata );
                }
                snapshotMetadata.bind( artifact );
            }
        }

        return Collections.emptyList();
    }


    public static Map<String, String> toLegacyMap( Map<String, LifecyclePhase> lifecyclePhases )
    {
        if ( lifecyclePhases == null )
        {
            return null;
        }
        
        if ( lifecyclePhases.isEmpty() )
        {
            return Collections.emptyMap();
        }
        
        Map<String, String> phases = new LinkedHashMap<>();
        for ( Map.Entry<String, LifecyclePhase> e: lifecyclePhases.entrySet() )
        {
            phases.put( e.getKey(), e.getValue().toString() );
        }
        return phases;
    }


    public Map<String, String> getPhases()
    {
        Map<String, LifecyclePhase> lphases = getLifecyclePhases();
        if ( lphases == null )
        {
            return null;
        }

        if ( lphases.isEmpty() )
        {
            return Collections.emptyMap();
        }

        Map<String, String> phases = new LinkedHashMap<>();
        for ( Map.Entry<String, LifecyclePhase> e: lphases.entrySet() )
        {
            phases.put( e.getKey(), e.getValue().toString() );
        }
        return phases;
    }


    public void transformForResolve( Artifact artifact, RepositoryRequest request )
        throws ArtifactResolutionException, ArtifactNotFoundException
    {
        if ( Artifact.LATEST_VERSION.equals( artifact.getVersion() ) )
        {
            try
            {
                String version = resolveVersion( artifact, request );
                if ( Artifact.LATEST_VERSION.equals( version ) )
                {
                    throw new ArtifactNotFoundException( "Unable to determine the latest version", artifact );
                }

                artifact.setBaseVersion( version );
                artifact.updateVersion( version, request.getLocalRepository() );
            }
            catch ( RepositoryMetadataResolutionException e )
            {
                throw new ArtifactResolutionException( e.getMessage(), artifact, e );
            }
        }
    }


    public void transformForResolve( Artifact artifact, RepositoryRequest request )
        throws ArtifactResolutionException, ArtifactNotFoundException
    {
        if ( Artifact.RELEASE_VERSION.equals( artifact.getVersion() ) )
        {
            try
            {
                String version = resolveVersion( artifact, request );

                if ( Artifact.RELEASE_VERSION.equals( version ) )
                {
                    throw new ArtifactNotFoundException( "Unable to determine the release version", artifact );
                }

                artifact.setBaseVersion( version );
                artifact.updateVersion( version, request.getLocalRepository() );
            }
            catch ( RepositoryMetadataResolutionException e )
            {
                throw new ArtifactResolutionException( e.getMessage(), artifact, e );
            }
        }
    }


    public Artifact createPluginArtifact( Plugin plugin )
    {
        String version = plugin.getVersion();
        if ( StringUtils.isEmpty( version ) )
        {
            version = "RELEASE";
        }

        VersionRange versionRange;
        try
        {
            versionRange = VersionRange.createFromVersionSpec( version );
        }
        catch ( InvalidVersionSpecificationException e )
        {
            // MNG-5368: Log a message instead of returning 'null' silently.
            this.logger.error( String.format(
                "Invalid version specification '%s' creating plugin artifact '%s'.",
                version, plugin ), e );

            return null;
        }

        return artifactFactory.createPluginArtifact( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
    }


    public Artifact createPluginArtifact( Plugin plugin )
    {
        VersionRange versionRange;
        try
        {
            String version = plugin.getVersion();
            if ( StringUtils.isEmpty( version ) )
            {
                version = "RELEASE";
            }
            versionRange = VersionRange.createFromVersionSpec( version );
        }
        catch ( InvalidVersionSpecificationException e )
        {
            return null;
        }

        return artifactFactory.createPluginArtifact( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
    }


    public Artifact createPluginArtifact( Plugin plugin )
    {
        String version = plugin.getVersion();
        if ( StringUtils.isEmpty( version ) )
        {
            version = "RELEASE";
        }

        VersionRange versionRange;
        try
        {
            versionRange = VersionRange.createFromVersionSpec( version );
        }
        catch ( InvalidVersionSpecificationException e )
        {
            // MNG-5368: Log a message instead of returning 'null' silently.
            this.logger.error( String.format(
                "Invalid version specification '%s' creating plugin artifact '%s'.",
                version, plugin ), e );

            return null;
        }

        return artifactFactory.createPluginArtifact( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
    }


    public Artifact createPluginArtifact( Plugin plugin )
    {
        VersionRange versionRange;
        try
        {
            String version = plugin.getVersion();
            if ( StringUtils.isEmpty( version ) )
            {
                version = "RELEASE";
            }
            versionRange = VersionRange.createFromVersionSpec( version );
        }
        catch ( InvalidVersionSpecificationException e )
        {
            return null;
        }

        return createPluginArtifactX( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
    }


    public Artifact createPluginArtifact( Plugin plugin )
    {
        VersionRange versionRange;
        try
        {
            String version = plugin.getVersion();
            if ( StringUtils.isEmpty( version ) )
            {
                version = "RELEASE";
            }
            versionRange = VersionRange.createFromVersionSpec( version );
        }
        catch ( InvalidVersionSpecificationException e )
        {
            return null;
        }

        return artifactFactory.createPluginArtifact( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
    }


    public Artifact createPluginArtifact( Plugin plugin )
    {
        VersionRange versionRange;
        try
        {
            String version = plugin.getVersion();
            if ( StringUtils.isEmpty( version ) )
            {
                version = "RELEASE";
            }
            versionRange = VersionRange.createFromVersionSpec( version );
        }
        catch ( InvalidVersionSpecificationException e )
        {
            return null;
        }

        return createPluginArtifactX( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( obj == null )
        {
            return false;
        }
        if ( getClass() != obj.getClass() )
        {
            return false;
        }

        ArtifactRepository other = (ArtifactRepository) obj;

        return eq( getId(), other.getId() );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( obj == null )
        {
            return false;
        }
        if ( getClass() != obj.getClass() )
        {
            return false;
        }

        DelegatingLocalArtifactRepository other = (DelegatingLocalArtifactRepository) obj;

        return eq( buildReactor, other.buildReactor )
            && eq( ideWorkspace, other.ideWorkspace )
            && eq( userLocalArtifactRepository, other.userLocalArtifactRepository );
    }


    protected List<ArtifactRepository> getRemoteRepositories()
        throws InvalidRepositoryException
    {
        File repoDir = new File( getBasedir(), "src/test/remote-repo" ).getAbsoluteFile();

        RepositoryPolicy policy = new RepositoryPolicy();
        policy.setEnabled( true );
        policy.setChecksumPolicy( "ignore" );
        policy.setUpdatePolicy( "always" );

        Repository repository = new Repository();
        repository.setId( RepositorySystem.DEFAULT_REMOTE_REPO_ID );
        repository.setUrl( "file://" + repoDir.toURI().getPath() );
        repository.setReleases( policy );
        repository.setSnapshots( policy );

        return Arrays.asList( repositorySystem.buildArtifactRepository( repository ) );
    }


    public Plugin getPluginDefinitionForPrefix( String prefix, MavenSession session, MavenProject project )
    {
        PluginPrefixRequest request = new DefaultPluginPrefixRequest( prefix, session );
        request.setPom( project.getModel() );

        try
        {
            PluginPrefixResult result = pluginPrefixResolver.resolve( request );

            Plugin plugin = new Plugin();
            plugin.setGroupId( result.getGroupId() );
            plugin.setArtifactId( result.getArtifactId() );

            return plugin;
        }
        catch ( NoPluginFoundForPrefixException e )
        {
            return null;
        }
    }


    public PluginDescriptor getPluginDescriptorForPrefix( String prefix )
    {
        MavenSession session = legacySupport.getSession();

        PluginPrefixRequest request = new DefaultPluginPrefixRequest( prefix, session );

        try
        {
            PluginPrefixResult result = pluginPrefixResolver.resolve( request );

            Plugin plugin = new Plugin();
            plugin.setGroupId( result.getGroupId() );
            plugin.setArtifactId( result.getArtifactId() );

            return loadPluginDescriptor( plugin, session.getCurrentProject(), session );
        }
        catch ( Exception e )
        {
            return null;
        }
    }


        CacheKey( String groupId, String artifactId, String version )
        {
            this.groupId = ( groupId != null ) ? groupId : "";
            this.artifactId = ( artifactId != null ) ? artifactId : "";
            this.version = ( version != null ) ? version : "";

            int hash = 17;
            hash = hash * 31 + this.groupId.hashCode();
            hash = hash * 31 + this.artifactId.hashCode();
            hash = hash * 31 + this.version.hashCode();
            hashCode = hash;
        }


        CacheKey( String groupId, String artifactId, String version, String tag )
        {
            this.groupId = ( groupId != null ) ? groupId : "";
            this.artifactId = ( artifactId != null ) ? artifactId : "";
            this.version = ( version != null ) ? version : "";
            this.tag = ( tag != null ) ? tag : "";

            int hash = 17;
            hash = hash * 31 + this.groupId.hashCode();
            hash = hash * 31 + this.artifactId.hashCode();
            hash = hash * 31 + this.version.hashCode();
            hash = hash * 31 + this.tag.hashCode();
            hashCode = hash;
        }


    protected void mergeModelBase_Properties( ModelBase target, ModelBase source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getProperties() );
            merged.putAll( source.getProperties() );
        }
        else
        {
            merged.putAll( source.getProperties() );
            merged.putAll( target.getProperties() );
        }
        target.setProperties( merged );
        target.setLocation( "properties", InputLocation.merge( target.getLocation( "properties" ),
                                                               source.getLocation( "properties" ), sourceDominant ) );
    }


    protected void mergeContributor_Properties( Contributor target, Contributor source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getProperties() );
            merged.putAll( source.getProperties() );
        }
        else
        {
            merged.putAll( source.getProperties() );
            merged.putAll( target.getProperties() );
        }
        target.setProperties( merged );
        target.setLocation( "properties", InputLocation.merge( target.getLocation( "properties" ),
                                                               source.getLocation( "properties" ), sourceDominant ) );
    }


    protected void mergeContributor_Properties( Contributor target, Contributor source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getProperties() );
            merged.putAll( source.getProperties() );
        }
        else
        {
            merged.putAll( source.getProperties() );
            merged.putAll( target.getProperties() );
        }
        target.setProperties( merged );
        target.setLocation( "properties", InputLocation.merge( target.getLocation( "properties" ),
                                                               source.getLocation( "properties" ), sourceDominant ) );
    }


        protected void mergeModelBase_Properties( ModelBase target, ModelBase source, boolean sourceDominant,
                                                  Map<Object, Object> context )
        {
            Properties merged = new Properties();
            if ( sourceDominant )
            {
                merged.putAll( target.getProperties() );
                putAll( merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY );
            }
            else
            {
                putAll( merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY );
                merged.putAll( target.getProperties() );
            }
            target.setProperties( merged );
            target.setLocation( "properties",
                                InputLocation.merge( target.getLocation( "properties" ),
                                                     source.getLocation( "properties" ), sourceDominant ) );
        }


    protected void mergeContributor_Properties( Contributor target, Contributor source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getProperties() );
            merged.putAll( source.getProperties() );
        }
        else
        {
            merged.putAll( source.getProperties() );
            merged.putAll( target.getProperties() );
        }
        target.setProperties( merged );
        target.setLocation( "properties", InputLocation.merge( target.getLocation( "properties" ),
                                                               source.getLocation( "properties" ), sourceDominant ) );
    }


    protected void mergeNotifier_Configuration( Notifier target, Notifier source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getConfiguration() );
            merged.putAll( source.getConfiguration() );
        }
        else
        {
            merged.putAll( source.getConfiguration() );
            merged.putAll( target.getConfiguration() );
        }
        target.setConfiguration( merged );
    }


    protected void mergeConfigurationContainer_Configuration( ConfigurationContainer target,
                                                              ConfigurationContainer source, boolean sourceDominant,
                                                              Map<Object, Object> context )
    {
        Xpp3Dom src = (Xpp3Dom) source.getConfiguration();
        if ( src != null )
        {
            Xpp3Dom tgt = (Xpp3Dom) target.getConfiguration();
            if ( sourceDominant || tgt == null )
            {
                tgt = Xpp3Dom.mergeXpp3Dom( new Xpp3Dom( src ), tgt );
            }
            else
            {
                tgt = Xpp3Dom.mergeXpp3Dom( tgt, src );
            }
            target.setConfiguration( tgt );
        }
    }


    protected void mergeToolchainModelConfiguration( ToolchainModel target,
                                                    ToolchainModel source )
    {
        Xpp3Dom src = (Xpp3Dom) source.getConfiguration();
        if ( src != null )
        {
            Xpp3Dom tgt = (Xpp3Dom) target.getConfiguration();
            if ( tgt == null )
            {
                tgt = Xpp3Dom.mergeXpp3Dom( new Xpp3Dom( src ), tgt );
            }
            else
            {
                tgt = Xpp3Dom.mergeXpp3Dom( tgt, src );
            }
            target.setConfiguration( tgt );
        }
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    public String getMessage()
    {
        String msg;

        if ( message != null && message.length() > 0 )
        {
            msg = message;
        }
        else
        {
            msg = exception.getMessage();

            if ( msg == null )
            {
                msg = "";
            }
        }

        return msg;
    }


    public String getMessage()
    {
        String msg;

        if ( message != null && message.length() > 0 )
        {
            msg = message;
        }
        else
        {
            msg = exception.getMessage();

            if ( msg == null )
            {
                msg = "";
            }
        }

        return msg;
    }


    public String getMessage()
    {
        String msg;

        if ( message != null && message.length() > 0 )
        {
            msg = message;
        }
        else
        {
            msg = exception.getMessage();

            if ( msg == null )
            {
                msg = "";
            }
        }

        return msg;
    }


    public String getMessage()
    {
        String msg;

        if ( message != null && message.length() > 0 )
        {
            msg = message;
        }
        else
        {
            msg = exception.getMessage();

            if ( msg == null )
            {
                msg = "";
            }
        }

        return msg;
    }


    protected void mergeModelBase_Properties( ModelBase target, ModelBase source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getProperties() );
            merged.putAll( source.getProperties() );
        }
        else
        {
            merged.putAll( source.getProperties() );
            merged.putAll( target.getProperties() );
        }
        target.setProperties( merged );
        target.setLocation( "properties", InputLocation.merge( target.getLocation( "properties" ),
                                                               source.getLocation( "properties" ), sourceDominant ) );
    }


        protected void mergeModelBase_Properties( ModelBase target, ModelBase source, boolean sourceDominant,
                                                  Map<Object, Object> context )
        {
            Properties merged = new Properties();
            if ( sourceDominant )
            {
                merged.putAll( target.getProperties() );
                putAll( merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY );
            }
            else
            {
                putAll( merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY );
                merged.putAll( target.getProperties() );
            }
            target.setProperties( merged );
            target.setLocation( "properties",
                                InputLocation.merge( target.getLocation( "properties" ),
                                                     source.getLocation( "properties" ), sourceDominant ) );
        }


    protected void mergeModelBase_Properties( ModelBase target, ModelBase source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getProperties() );
            merged.putAll( source.getProperties() );
        }
        else
        {
            merged.putAll( source.getProperties() );
            merged.putAll( target.getProperties() );
        }
        target.setProperties( merged );
        target.setLocation( "properties", InputLocation.merge( target.getLocation( "properties" ),
                                                               source.getLocation( "properties" ), sourceDominant ) );
    }


    protected void mergeNotifier_Configuration( Notifier target, Notifier source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getConfiguration() );
            merged.putAll( source.getConfiguration() );
        }
        else
        {
            merged.putAll( source.getConfiguration() );
            merged.putAll( target.getConfiguration() );
        }
        target.setConfiguration( merged );
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Prerequisites( Model target, Model source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Prerequisites src = source.getPrerequisites();
        if ( src != null )
        {
            Prerequisites tgt = target.getPrerequisites();
            if ( tgt == null )
            {
                tgt = new Prerequisites();
                tgt.setMaven( null );
                target.setPrerequisites( tgt );
            }
            mergePrerequisites( tgt, src, sourceDominant, context );
        }
    }


    public String getMessage()
    {
        String msg;

        if ( message != null && message.length() > 0 )
        {
            msg = message;
        }
        else
        {
            msg = exception.getMessage();

            if ( msg == null )
            {
                msg = "";
            }
        }

        return msg;
    }


    public String getMessage()
    {
        String msg;

        if ( message != null && message.length() > 0 )
        {
            msg = message;
        }
        else
        {
            msg = exception.getMessage();

            if ( msg == null )
            {
                msg = "";
            }
        }

        return msg;
    }


    private ProjectModelResolver( ProjectModelResolver original )
    {
        this.session = original.session;
        this.trace = original.trace;
        this.resolver = original.resolver;
        this.remoteRepositoryManager = original.remoteRepositoryManager;
        this.pomRepositories = new ArrayList<>( original.pomRepositories );
        this.externalRepositories = original.externalRepositories;
        this.repositories = new ArrayList<>( original.repositories );
        this.repositoryMerging = original.repositoryMerging;
        this.repositoryIds = new HashSet<>( original.repositoryIds );
        this.modelPool = original.modelPool;
    }


    private DefaultModelResolver( DefaultModelResolver original )
    {
        this.session = original.session;
        this.trace = original.trace;
        this.context = original.context;
        this.resolver = original.resolver;
        this.versionRangeResolver = original.versionRangeResolver;
        this.remoteRepositoryManager = original.remoteRepositoryManager;
        this.repositories = new ArrayList<>( original.repositories );
        this.externalRepositories = original.externalRepositories;
        this.repositoryIds = new HashSet<>( original.repositoryIds );
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Scm( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Scm src = source.getScm();
        if ( src != null )
        {
            Scm tgt = target.getScm();
            if ( tgt == null )
            {
                tgt = new Scm();
                tgt.setTag( null );
                target.setScm( tgt );
            }
            mergeScm( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Parent( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Parent src = source.getParent();
        if ( src != null )
        {
            Parent tgt = target.getParent();
            if ( tgt == null )
            {
                tgt = new Parent();
                tgt.setRelativePath( null );
                target.setParent( tgt );
            }
            mergeParent( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeNotifier_Configuration( Notifier target, Notifier source, boolean sourceDominant,
                                                Map<Object, Object> context )
    {
        Properties merged = new Properties();
        if ( sourceDominant )
        {
            merged.putAll( target.getConfiguration() );
            merged.putAll( source.getConfiguration() );
        }
        else
        {
            merged.putAll( source.getConfiguration() );
            merged.putAll( target.getConfiguration() );
        }
        target.setConfiguration( merged );
    }


        protected void mergeModelBase_Properties( ModelBase target, ModelBase source, boolean sourceDominant,
                                                  Map<Object, Object> context )
        {
            Properties merged = new Properties();
            if ( sourceDominant )
            {
                merged.putAll( target.getProperties() );
                putAll( merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY );
            }
            else
            {
                putAll( merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY );
                merged.putAll( target.getProperties() );
            }
            target.setProperties( merged );
            target.setLocation( "properties",
                                InputLocation.merge( target.getLocation( "properties" ),
                                                     source.getLocation( "properties" ), sourceDominant ) );
        }


    private static boolean repositoriesEquals( List<ArtifactRepository> r1, List<ArtifactRepository> r2 )
    {
        if ( r1.size() != r2.size() )
        {
            return false;
        }

        for ( Iterator<ArtifactRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); )
        {
            if ( !repositoryEquals( it1.next(), it2.next() ) )
            {
                return false;
            }
        }

        return true;
    }


    public static boolean repositoriesEquals( List<RemoteRepository> r1, List<RemoteRepository> r2 )
    {
        if ( r1.size() != r2.size() )
        {
            return false;
        }
    
        for ( Iterator<RemoteRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); )
        {
            if ( !repositoryEquals( it1.next(), it2.next() ) )
            {
                return false;
            }
        }
    
        return true;
    }


    protected void mergeModel_Url( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildProjectUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeSite_Url( Site target, Site source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildSiteUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeModel_Url( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildProjectUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeScm_Url( Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildScmUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeModel_Url( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildProjectUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeScm_Connection( Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getConnection();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setConnection( src );
                target.setLocation( "connection", source.getLocation( "connection" ) );
            }
            else if ( target.getConnection() == null )
            {
                target.setConnection( extrapolateChildUrl( src, source.isChildScmConnectionInheritAppendPath(),
                                                           context ) );
                target.setLocation( "connection", source.getLocation( "connection" ) );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setOrganization( tgt );
                mergeOrganization( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setIssueManagement( tgt );
                mergeIssueManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setCiManagement( tgt );
                mergeCiManagement( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( sourceDominant || tgt == null )
            {
                tgt = new DeploymentRepository();
                tgt.setLocation( "", src.getLocation( "" ) );
                target.setSnapshotRepository( tgt );
                mergeDeploymentRepository( tgt, src, sourceDominant, context );
            }
        }
    }


    protected void mergeSite_Url( Site target, Site source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildSiteUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeScm_Url( Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildScmUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeSite_Url( Site target, Site source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildSiteUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeScm_Connection( Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getConnection();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setConnection( src );
                target.setLocation( "connection", source.getLocation( "connection" ) );
            }
            else if ( target.getConnection() == null )
            {
                target.setConnection( extrapolateChildUrl( src, source.isChildScmConnectionInheritAppendPath(),
                                                           context ) );
                target.setLocation( "connection", source.getLocation( "connection" ) );
            }
        }
    }


    protected void mergeScm_Url( Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getUrl();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setUrl( src );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
            else if ( target.getUrl() == null )
            {
                target.setUrl( extrapolateChildUrl( src, source.isChildScmUrlInheritAppendPath(), context ) );
                target.setLocation( "url", source.getLocation( "url" ) );
            }
        }
    }


    protected void mergeScm_Connection( Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context )
    {
        String src = source.getConnection();
        if ( src != null )
        {
            if ( sourceDominant )
            {
                target.setConnection( src );
                target.setLocation( "connection", source.getLocation( "connection" ) );
            }
            else if ( target.getConnection() == null )
            {
                target.setConnection( extrapolateChildUrl( src, source.isChildScmConnectionInheritAppendPath(),
                                                           context ) );
                target.setLocation( "connection", source.getLocation( "connection" ) );
            }
        }
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( !( obj instanceof VersionRange ) )
        {
            return false;
        }
        VersionRange other = (VersionRange) obj;

        boolean equals =
            recommendedVersion == other.recommendedVersion
                || ( ( recommendedVersion != null ) && recommendedVersion.equals( other.recommendedVersion ) );
        equals &=
            restrictions == other.restrictions
                || ( ( restrictions != null ) && restrictions.equals( other.restrictions ) );
        return equals;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private static boolean validateBannedCharacters( SettingsProblemCollector problems, String fieldName,
                                                     Severity severity, String string, String sourceHint,
                                                     String banned )
    {
        if ( string != null )
        {
            for ( int i = string.length() - 1; i >= 0; i-- )
            {
                if ( banned.indexOf( string.charAt( i ) ) >= 0 )
                {
                    addViolation( problems, severity, fieldName, sourceHint,
                                  "must not contain any of these characters " + banned + " but found "
                                      + string.charAt( i ) );
                    return false;
                }
            }
        }

        return true;
    }


    private boolean validateBannedCharacters( String fieldName, ModelProblemCollector problems, Severity severity,
                                              Version version, String string, String sourceHint,
                                              InputLocationTracker tracker, String banned )
    {
        if ( string != null )
        {
            for ( int i = string.length() - 1; i >= 0; i-- )
            {
                if ( banned.indexOf( string.charAt( i ) ) >= 0 )
                {
                    addViolation( problems, severity, version, fieldName, sourceHint,
                                  "must not contain any of these characters " + banned + " but found "
                                      + string.charAt( i ),
                                  tracker );
                    return false;
                }
            }
        }

        return true;
    }


    public static MavenExecutionPlan getProjectAExceutionPlan()
        throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException,
        PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException,
        NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
    {
        List<MojoExecution> me = new ArrayList<>();
        me.add( createMojoExecution( "initialize", "default-initialize", INITIALIZE ) );
        me.add( createMojoExecution( "resources", "default-resources", PROCESS_RESOURCES ) );
        me.add( createMojoExecution( "compile", "default-compile", COMPILE ) );
        me.add( createMojoExecution( "testResources", "default-testResources", PROCESS_TEST_RESOURCES ) );
        me.add( createMojoExecution( "testCompile", "default-testCompile", TEST_COMPILE ) );
        me.add( createMojoExecution( "test", "default-test", TEST ) );
        me.add( createMojoExecution( "war", "default-war", PACKAGE ) );
        me.add( createMojoExecution( "install", "default-install", INSTALL ) );
        return createExecutionPlan( ProjectDependencyGraphStub.A.getExecutionProject(), me );
    }


    public static MavenExecutionPlan getProjectBExecutionPlan()
        throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException,
        PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException,
        NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
    {
        List<MojoExecution> me = new ArrayList<>();
        me.add( createMojoExecution( "enforce", "enforce-versions", VALIDATE ) );
        me.add( createMojoExecution( "resources", "default-resources", PROCESS_RESOURCES ) );
        me.add( createMojoExecution( "compile", "default-compile", COMPILE ) );
        me.add( createMojoExecution( "testResources", "default-testResources", PROCESS_TEST_RESOURCES ) );
        me.add( createMojoExecution( "testCompile", "default-testCompile", TEST_COMPILE ) );
        me.add( createMojoExecution( "test", "default-test", TEST ) );
        return createExecutionPlan( ProjectDependencyGraphStub.B.getExecutionProject(), me );
    }


    private String path( Artifact artifact )
    {
        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getGroupId().replace( '.', '/' ) ).append( '/' );

        path.append( artifact.getArtifactId() ).append( '/' );

        path.append( artifact.getBaseVersion() ).append( '/' );

        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );

        if ( artifact.getClassifier().length() > 0 )
        {
            path.append( '-' ).append( artifact.getClassifier() );
        }

        path.append( '.' ).append( artifact.getExtension() );

        return path.toString();
    }


    public String getPathForLocalArtifact( Artifact artifact )
    {
        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getGroupId() ).append( '/' );

        path.append( artifact.getExtension() ).append( "s/" );

        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );

        if ( artifact.getClassifier().length() > 0 )
        {
            path.append( '-' ).append( artifact.getClassifier() );
        }

        path.append( '.' ).append( artifact.getExtension() );

        return path.toString();
    }


    private String path( Artifact artifact )
    {
        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getGroupId().replace( '.', '/' ) ).append( '/' );

        path.append( artifact.getArtifactId() ).append( '/' );

        path.append( artifact.getBaseVersion() ).append( '/' );

        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );

        if ( artifact.getClassifier().length() > 0 )
        {
            path.append( '-' ).append( artifact.getClassifier() );
        }

        path.append( '.' ).append( artifact.getExtension() );

        return path.toString();
    }


    public String getPathForLocalArtifact( Artifact artifact )
    {
        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getGroupId() ).append( '/' );

        path.append( artifact.getExtension() ).append( "s/" );

        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );

        if ( artifact.getClassifier().length() > 0 )
        {
            path.append( '-' ).append( artifact.getClassifier() );
        }

        path.append( '.' ).append( artifact.getExtension() );

        return path.toString();
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    private Plugin newPlugin( String artifactId, String... goals )
    {
        Plugin plugin = new Plugin();

        plugin.setGroupId( "org.apache.maven.plugins" );
        plugin.setArtifactId( artifactId );

        for ( String goal : goals )
        {
            PluginExecution pluginExecution = new PluginExecution();
            pluginExecution.setId( "default-" + goal );
            pluginExecution.addGoal( goal );
            plugin.addExecution( pluginExecution );
        }

        return plugin;
    }


    public File translatePath( File path )
    {
        File result = path;

        if ( path != null && basedir != null )
        {
            if ( path.isAbsolute() )
            {
                // path is already absolute, we're done
            }
            else if ( path.getPath().startsWith( File.separator ) )
            {
                // drive-relative Windows path, don't align with base dir but with drive root
                result = path.getAbsoluteFile();
            }
            else
            {
                // an ordinary relative path, align with base dir
                result = new File( new File( basedir, path.getPath() ).toURI().normalize() ).getAbsoluteFile();
            }
        }

        return result;
    }


    public File alignToBaseDirectory( File file )
    {
        // TODO Copied from the DefaultInterpolator. We likely want to resurrect the PathTranslator or at least a
        // similar component for re-usage
        if ( file != null )
        {
            if ( file.isAbsolute() )
            {
                // path was already absolute, just normalize file separator and we're done
            }
            else if ( file.getPath().startsWith( File.separator ) )
            {
                // drive-relative Windows path, don't align with project directory but with drive root
                file = file.getAbsoluteFile();
            }
            else
            {
                // an ordinary relative path, align with project directory
                file = new File( new File( basedir, file.getPath() ).toURI().normalize() ).getAbsoluteFile();
            }
        }
        return file;
    }


    public void init( EventSpy.Context context )
    {
        if ( eventSpies.isEmpty() )
        {
            return;
        }
        for ( EventSpy eventSpy : eventSpies )
        {
            try
            {
                eventSpy.init( context );
            }
            catch ( Exception | LinkageError e )
            {
                logError( "initialize", e, eventSpy );
            }
        }
    }


    public void close()
    {
        if ( eventSpies.isEmpty() )
        {
            return;
        }
        for ( EventSpy eventSpy : eventSpies )
        {
            try
            {
                eventSpy.close();
            }
            catch ( Exception | LinkageError e )
            {
                logError( "close", e, eventSpy );
            }
        }
    }


    public void init( EventSpy.Context context )
    {
        if ( eventSpies.isEmpty() )
        {
            return;
        }
        for ( EventSpy eventSpy : eventSpies )
        {
            try
            {
                eventSpy.init( context );
            }
            catch ( Exception | LinkageError e )
            {
                logError( "initialize", e, eventSpy );
            }
        }
    }


    public void onEvent( Object event )
    {
        if ( eventSpies.isEmpty() )
        {
            return;
        }
        for ( EventSpy eventSpy : eventSpies )
        {
            try
            {
                eventSpy.onEvent( event );
            }
            catch ( Exception | LinkageError e )
            {
                logError( "notify", e, eventSpy );
            }
        }
    }


    public void onEvent( Object event )
    {
        if ( eventSpies.isEmpty() )
        {
            return;
        }
        for ( EventSpy eventSpy : eventSpies )
        {
            try
            {
                eventSpy.onEvent( event );
            }
            catch ( Exception | LinkageError e )
            {
                logError( "notify", e, eventSpy );
            }
        }
    }


    public void close()
    {
        if ( eventSpies.isEmpty() )
        {
            return;
        }
        for ( EventSpy eventSpy : eventSpies )
        {
            try
            {
                eventSpy.close();
            }
            catch ( Exception | LinkageError e )
            {
                logError( "close", e, eventSpy );
            }
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergePluginConfiguration_PluginManagement( PluginConfiguration target, PluginConfiguration source,
                                                              boolean sourceDominant, Map<Object, Object> context )
    {
        PluginManagement src = source.getPluginManagement();
        if ( src != null )
        {
            PluginManagement tgt = target.getPluginManagement();
            if ( tgt == null )
            {
                tgt = new PluginManagement();
                target.setPluginManagement( tgt );
            }
            mergePluginManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDependency( Dependency target, Dependency source, boolean sourceDominant,
                                    Map<Object, Object> context )
    {
        mergeDependency_GroupId( target, source, sourceDominant, context );
        mergeDependency_ArtifactId( target, source, sourceDominant, context );
        mergeDependency_Version( target, source, sourceDominant, context );
        mergeDependency_Type( target, source, sourceDominant, context );
        mergeDependency_Classifier( target, source, sourceDominant, context );
        mergeDependency_Scope( target, source, sourceDominant, context );
        mergeDependency_SystemPath( target, source, sourceDominant, context );
        mergeDependency_Optional( target, source, sourceDominant, context );
        mergeDependency_Exclusions( target, source, sourceDominant, context );
    }


        protected void mergePlugin( Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context )
        {
            if ( source.isInherited() )
            {
                mergeConfigurationContainer( target, source, sourceDominant, context );
            }
            mergePlugin_GroupId( target, source, sourceDominant, context );
            mergePlugin_ArtifactId( target, source, sourceDominant, context );
            mergePlugin_Version( target, source, sourceDominant, context );
            mergePlugin_Extensions( target, source, sourceDominant, context );
            mergePlugin_Dependencies( target, source, sourceDominant, context );
            mergePlugin_Executions( target, source, sourceDominant, context );
        }


    protected void mergeDependency( Dependency target, Dependency source, boolean sourceDominant,
                                    Map<Object, Object> context )
    {
        mergeDependency_GroupId( target, source, sourceDominant, context );
        mergeDependency_ArtifactId( target, source, sourceDominant, context );
        mergeDependency_Version( target, source, sourceDominant, context );
        mergeDependency_Type( target, source, sourceDominant, context );
        mergeDependency_Classifier( target, source, sourceDominant, context );
        mergeDependency_Scope( target, source, sourceDominant, context );
        mergeDependency_SystemPath( target, source, sourceDominant, context );
        mergeDependency_Optional( target, source, sourceDominant, context );
        mergeDependency_Exclusions( target, source, sourceDominant, context );
    }


    protected void mergeContributor( Contributor target, Contributor source, boolean sourceDominant,
                                     Map<Object, Object> context )
    {
        mergeContributor_Name( target, source, sourceDominant, context );
        mergeContributor_Email( target, source, sourceDominant, context );
        mergeContributor_Url( target, source, sourceDominant, context );
        mergeContributor_Organization( target, source, sourceDominant, context );
        mergeContributor_OrganizationUrl( target, source, sourceDominant, context );
        mergeContributor_Timezone( target, source, sourceDominant, context );
        mergeContributor_Roles( target, source, sourceDominant, context );
        mergeContributor_Properties( target, source, sourceDominant, context );
    }


    protected void mergeModelBase( ModelBase target, ModelBase source, boolean sourceDominant,
                                   Map<Object, Object> context )
    {
        mergeModelBase_DistributionManagement( target, source, sourceDominant, context );
        mergeModelBase_Modules( target, source, sourceDominant, context );
        mergeModelBase_Repositories( target, source, sourceDominant, context );
        mergeModelBase_PluginRepositories( target, source, sourceDominant, context );
        mergeModelBase_Dependencies( target, source, sourceDominant, context );
        mergeModelBase_Reporting( target, source, sourceDominant, context );
        mergeModelBase_DependencyManagement( target, source, sourceDominant, context );
        mergeModelBase_Properties( target, source, sourceDominant, context );
    }


    protected void mergeDependency( Dependency target, Dependency source, boolean sourceDominant,
                                    Map<Object, Object> context )
    {
        mergeDependency_GroupId( target, source, sourceDominant, context );
        mergeDependency_ArtifactId( target, source, sourceDominant, context );
        mergeDependency_Version( target, source, sourceDominant, context );
        mergeDependency_Type( target, source, sourceDominant, context );
        mergeDependency_Classifier( target, source, sourceDominant, context );
        mergeDependency_Scope( target, source, sourceDominant, context );
        mergeDependency_SystemPath( target, source, sourceDominant, context );
        mergeDependency_Optional( target, source, sourceDominant, context );
        mergeDependency_Exclusions( target, source, sourceDominant, context );
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Snapshots( Repository target, Repository source, boolean sourceDominant,
                                              Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getSnapshots();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getSnapshots();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setSnapshots( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeRepository_Releases( Repository target, Repository source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        RepositoryPolicy src = source.getReleases();
        if ( src != null )
        {
            RepositoryPolicy tgt = target.getReleases();
            if ( tgt == null )
            {
                tgt = new RepositoryPolicy();
                target.setReleases( tgt );
            }
            mergeRepositoryPolicy( tgt, src, sourceDominant, context );
        }
    }


    public String getPathForLocalArtifact( Artifact artifact )
    {
        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getGroupId() ).append( '/' );

        path.append( artifact.getExtension() ).append( "s/" );

        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );

        if ( artifact.getClassifier().length() > 0 )
        {
            path.append( '-' ).append( artifact.getClassifier() );
        }

        path.append( '.' ).append( artifact.getExtension() );

        return path.toString();
    }


    public String getPathForLocalArtifact( Artifact artifact )
    {
        StringBuilder path = new StringBuilder( 128 );

        path.append( artifact.getGroupId() ).append( '/' );

        path.append( artifact.getExtension() ).append( "s/" );

        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );

        if ( artifact.getClassifier().length() > 0 )
        {
            path.append( '-' ).append( artifact.getClassifier() );
        }

        path.append( '.' ).append( artifact.getExtension() );

        return path.toString();
    }


    public DefaultModelBuildingRequest setSystemProperties( Properties systemProperties )
    {
        if ( systemProperties != null )
        {
            this.systemProperties = new Properties();
            synchronized ( systemProperties )
            { // avoid concurrentmodification if someone else sets/removes an unrelated system property
                this.systemProperties.putAll( systemProperties );
            }
        }
        else
        {
            this.systemProperties = null;
        }

        return this;
    }


    public DefaultSettingsBuildingRequest setSystemProperties( Properties systemProperties )
    {
        if ( systemProperties != null )
        {
            this.systemProperties = new Properties();
            synchronized ( systemProperties )
            { // avoid concurrentmodification if someone else sets/removes an unrelated system property
                this.systemProperties.putAll( systemProperties );
            }
        }
        else
        {
            this.systemProperties = null;
        }

        return this;
    }


    protected AbstractArtifactResolutionException( String message,
                                                   String groupId,
                                                   String artifactId,
                                                   String version,
                                                   String type,
                                                   String classifier,
                                                   List<ArtifactRepository> remoteRepositories,
                                                   List<String> path,
                                                   Throwable t )
    {
        super( constructMessageBase( message, groupId, artifactId, version, type, remoteRepositories, path ), t );

        this.originalMessage = message;
        this.groupId = groupId;
        this.artifactId = artifactId;
        this.type = type;
        this.classifier = classifier;
        this.version = version;
        this.remoteRepositories = remoteRepositories;
        this.path = constructArtifactPath( path, "" );
    }


    DefaultModelResolver( RepositorySystemSession session, RequestTrace trace, String context,
                          ArtifactResolver resolver, VersionRangeResolver versionRangeResolver,
                          RemoteRepositoryManager remoteRepositoryManager, List<RemoteRepository> repositories )
    {
        this.session = session;
        this.trace = trace;
        this.context = context;
        this.resolver = resolver;
        this.versionRangeResolver = versionRangeResolver;
        this.remoteRepositoryManager = remoteRepositoryManager;
        this.repositories = repositories;
        this.externalRepositories = Collections.unmodifiableList( new ArrayList<>( repositories ) );

        this.repositoryIds = new HashSet<>();
    }


    private ArtifactRepositoryPolicy getEffectivePolicy( Collection<ArtifactRepositoryPolicy> policies )
    {
        ArtifactRepositoryPolicy effectivePolicy = null;

        for ( ArtifactRepositoryPolicy policy : policies )
        {
            if ( effectivePolicy == null )
            {
                effectivePolicy = new ArtifactRepositoryPolicy( policy );
            }
            else
            {
                effectivePolicy.merge( policy );
            }
        }

        return effectivePolicy;
    }


    private ArtifactRepositoryPolicy getEffectivePolicy( Collection<ArtifactRepositoryPolicy> policies )
    {
        ArtifactRepositoryPolicy effectivePolicy = null;

        for ( ArtifactRepositoryPolicy policy : policies )
        {
            if ( effectivePolicy == null )
            {
                effectivePolicy = new ArtifactRepositoryPolicy( policy );
            }
            else
            {
                effectivePolicy.merge( policy );
            }
        }

        return effectivePolicy;
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    private void assembleBuildInheritance( Model child, Model parent )
    {
        Build childBuild = child.getBuild();
        Build parentBuild = parent.getBuild();

        if ( parentBuild != null )
        {
            if ( childBuild == null )
            {
                childBuild = new Build();
                child.setBuild( childBuild );
            }

            assembleBuildInheritance( childBuild, parentBuild, true );
        }
    }


    static File resolveFile( File file, String workingDirectory )
    {
        if ( file == null )
        {
            return null;
        }
        else if ( file.isAbsolute() )
        {
            return file;
        }
        else if ( file.getPath().startsWith( File.separator ) )
        {
            // drive-relative Windows path
            return file.getAbsoluteFile();
        }
        else
        {
            return new File( workingDirectory, file.getPath() ).getAbsoluteFile();
        }
    }


    static File resolveFile( File file, String workingDirectory )
    {
        if ( file == null )
        {
            return null;
        }
        else if ( file.isAbsolute() )
        {
            return file;
        }
        else if ( file.getPath().startsWith( File.separator ) )
        {
            // drive-relative Windows path
            return file.getAbsoluteFile();
        }
        else
        {
            return new File( workingDirectory, file.getPath() ).getAbsoluteFile();
        }
    }


    private void injectMirror( ArtifactRepository repository, Mirror mirror )
    {
        if ( mirror != null )
        {
            ArtifactRepository original =
                createArtifactRepository( repository.getId(), repository.getUrl(), repository.getLayout(),
                                          repository.getSnapshots(), repository.getReleases() );

            repository.setMirroredRepositories( Collections.singletonList( original ) );

            repository.setId( mirror.getId() );
            repository.setUrl( mirror.getUrl() );

            if ( StringUtils.isNotEmpty( mirror.getLayout() ) )
            {
                repository.setLayout( getLayout( mirror.getLayout() ) );
            }
        }
    }


    private void injectMirror( ArtifactRepository repository, Mirror mirror )
    {
        if ( mirror != null )
        {
            ArtifactRepository original =
                createArtifactRepository( repository.getId(), repository.getUrl(), repository.getLayout(),
                                          repository.getSnapshots(), repository.getReleases() );

            repository.setMirroredRepositories( Collections.singletonList( original ) );

            repository.setId( mirror.getId() );
            repository.setUrl( mirror.getUrl() );

            if ( StringUtils.isNotEmpty( mirror.getLayout() ) )
            {
                repository.setLayout( getLayout( mirror.getLayout() ) );
            }
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Site( DistributionManagement target, DistributionManagement source,
                                                     boolean sourceDominant, Map<Object, Object> context )
    {
        Site src = source.getSite();
        if ( src != null )
        {
            Site tgt = target.getSite();
            if ( tgt == null )
            {
                tgt = new Site();
                target.setSite( tgt );
            }
            mergeSite( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_SnapshotRepository( DistributionManagement target,
                                                                   DistributionManagement source,
                                                                   boolean sourceDominant,
                                                                   Map<Object, Object> context )
    {
        DeploymentRepository src = source.getSnapshotRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getSnapshotRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setSnapshotRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeDistributionManagement_Repository( DistributionManagement target,
                                                           DistributionManagement source, boolean sourceDominant,
                                                           Map<Object, Object> context )
    {
        DeploymentRepository src = source.getRepository();
        if ( src != null )
        {
            DeploymentRepository tgt = target.getRepository();
            if ( tgt == null )
            {
                tgt = new DeploymentRepository();
                target.setRepository( tgt );
            }
            mergeDeploymentRepository( tgt, src, sourceDominant, context );
        }
    }


    private boolean validateId( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
                                String id, String sourceHint, InputLocationTracker tracker )
    {
        if ( !validateStringNotEmpty( fieldName, problems, severity, version, id, sourceHint, tracker ) )
        {
            return false;
        }
        else
        {
            if ( !isValidId( id ) )
            {
                addViolation( problems, severity, version, fieldName, sourceHint,
                              "with value '" + id + "' does not match a valid id pattern.", tracker );
                return false;
            }
            return true;
        }
    }


    private boolean validateIdWithWildcards( String fieldName, ModelProblemCollector problems, Severity severity,
                                             Version version, String id, String sourceHint,
                                             InputLocationTracker tracker )
    {
        if ( !validateStringNotEmpty( fieldName, problems, severity, version, id, sourceHint, tracker ) )
        {
            return false;
        }
        else
        {
            if ( !isValidIdWithWildCards( id ) )
            {
                addViolation( problems, severity, version, fieldName, sourceHint,
                              "with value '" + id + "' does not match a valid id pattern.", tracker );
                return false;
            }
            return true;
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DependencyManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                        Map<Object, Object> context )
    {
        DependencyManagement src = source.getDependencyManagement();
        if ( src != null )
        {
            DependencyManagement tgt = target.getDependencyManagement();
            if ( tgt == null )
            {
                tgt = new DependencyManagement();
                target.setDependencyManagement( tgt );
            }
            mergeDependencyManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_Reporting( ModelBase target, ModelBase source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        Reporting src = source.getReporting();
        if ( src != null )
        {
            Reporting tgt = target.getReporting();
            if ( tgt == null )
            {
                tgt = new Reporting();
                target.setReporting( tgt );
            }
            mergeReporting( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModelBase_DistributionManagement( ModelBase target, ModelBase source, boolean sourceDominant,
                                                          Map<Object, Object> context )
    {
        DistributionManagement src = source.getDistributionManagement();
        if ( src != null )
        {
            DistributionManagement tgt = target.getDistributionManagement();
            if ( tgt == null )
            {
                tgt = new DistributionManagement();
                target.setDistributionManagement( tgt );
            }
            mergeDistributionManagement( tgt, src, sourceDominant, context );
        }
    }


    private PluginPrefixResult resolveFromProject( PluginPrefixRequest request )
    {
        PluginPrefixResult result = null;

        if ( request.getPom() != null && request.getPom().getBuild() != null )
        {
            Build build = request.getPom().getBuild();

            result = resolveFromProject( request, build.getPlugins() );

            if ( result == null && build.getPluginManagement() != null )
            {
                result = resolveFromProject( request, build.getPluginManagement().getPlugins() );
            }
        }

        return result;
    }


    private PluginVersionResult resolveFromProject( PluginVersionRequest request )
    {
        PluginVersionResult result = null;

        if ( request.getPom() != null && request.getPom().getBuild() != null )
        {
            Build build = request.getPom().getBuild();

            result = resolveFromProject( request, build.getPlugins() );

            if ( result == null && build.getPluginManagement() != null )
            {
                result = resolveFromProject( request, build.getPluginManagement().getPlugins() );
            }
        }

        return result;
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Build( Model target, Model source, boolean sourceDominant, Map<Object, Object> context )
    {
        Build src = source.getBuild();
        if ( src != null )
        {
            Build tgt = target.getBuild();
            if ( tgt == null )
            {
                tgt = new Build();
                target.setBuild( tgt );
            }
            mergeBuild( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_CiManagement( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        CiManagement src = source.getCiManagement();
        if ( src != null )
        {
            CiManagement tgt = target.getCiManagement();
            if ( tgt == null )
            {
                tgt = new CiManagement();
                target.setCiManagement( tgt );
            }
            mergeCiManagement( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_Organization( Model target, Model source, boolean sourceDominant,
                                            Map<Object, Object> context )
    {
        Organization src = source.getOrganization();
        if ( src != null )
        {
            Organization tgt = target.getOrganization();
            if ( tgt == null )
            {
                tgt = new Organization();
                target.setOrganization( tgt );
            }
            mergeOrganization( tgt, src, sourceDominant, context );
        }
    }


    protected void mergeModel_IssueManagement( Model target, Model source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        IssueManagement src = source.getIssueManagement();
        if ( src != null )
        {
            IssueManagement tgt = target.getIssueManagement();
            if ( tgt == null )
            {
                tgt = new IssueManagement();
                target.setIssueManagement( tgt );
            }
            mergeIssueManagement( tgt, src, sourceDominant, context );
        }
    }


    private void invalidMetadata( RepositorySystemSession session, RequestTrace trace,
                                  org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository,
                                  Exception exception )
    {
        RepositoryListener listener = session.getRepositoryListener();
        if ( listener != null )
        {
            RepositoryEvent.Builder event = new RepositoryEvent.Builder( session, EventType.METADATA_INVALID );
            event.setTrace( trace );
            event.setMetadata( metadata );
            event.setException( exception );
            event.setRepository( repository );
            listener.metadataInvalid( event.build() );
        }
    }


    private void invalidMetadata( RepositorySystemSession session, RequestTrace trace,
                                  org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository,
                                  Exception exception )
    {
        RepositoryListener listener = session.getRepositoryListener();
        if ( listener != null )
        {
            RepositoryEvent.Builder event = new RepositoryEvent.Builder( session, EventType.METADATA_INVALID );
            event.setTrace( trace );
            event.setMetadata( metadata );
            event.setException( exception );
            event.setRepository( repository );
            listener.metadataInvalid( event.build() );
        }
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationProperty property = activation.getProperty();

        if ( property == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationOS os = activation.getOs();

        if ( os == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationProperty property = activation.getProperty();

        if ( property == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        String jdk = activation.getJdk();

        if ( jdk == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationProperty property = activation.getProperty();

        if ( property == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationFile file = activation.getFile();

        if ( file == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        String jdk = activation.getJdk();

        if ( jdk == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationOS os = activation.getOs();

        if ( os == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationOS os = activation.getOs();

        if ( os == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationFile file = activation.getFile();

        if ( file == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        String jdk = activation.getJdk();

        if ( jdk == null )
        {
            return false;
        }
        return true;
    }


    public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )
    {
        Activation activation = profile.getActivation();

        if ( activation == null )
        {
            return false;
        }

        ActivationFile file = activation.getFile();

        if ( file == null )
        {
            return false;
        }
        return true;
    }


    protected void mergeContributor( Contributor target, Contributor source, boolean sourceDominant,
                                     Map<Object, Object> context )
    {
        mergeContributor_Name( target, source, sourceDominant, context );
        mergeContributor_Email( target, source, sourceDominant, context );
        mergeContributor_Url( target, source, sourceDominant, context );
        mergeContributor_Organization( target, source, sourceDominant, context );
        mergeContributor_OrganizationUrl( target, source, sourceDominant, context );
        mergeContributor_Timezone( target, source, sourceDominant, context );
        mergeContributor_Roles( target, source, sourceDominant, context );
        mergeContributor_Properties( target, source, sourceDominant, context );
    }


        protected void mergePlugin( Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context )
        {
            if ( source.isInherited() )
            {
                mergeConfigurationContainer( target, source, sourceDominant, context );
            }
            mergePlugin_GroupId( target, source, sourceDominant, context );
            mergePlugin_ArtifactId( target, source, sourceDominant, context );
            mergePlugin_Version( target, source, sourceDominant, context );
            mergePlugin_Extensions( target, source, sourceDominant, context );
            mergePlugin_Dependencies( target, source, sourceDominant, context );
            mergePlugin_Executions( target, source, sourceDominant, context );
        }


    protected void mergeModelBase( ModelBase target, ModelBase source, boolean sourceDominant,
                                   Map<Object, Object> context )
    {
        mergeModelBase_DistributionManagement( target, source, sourceDominant, context );
        mergeModelBase_Modules( target, source, sourceDominant, context );
        mergeModelBase_Repositories( target, source, sourceDominant, context );
        mergeModelBase_PluginRepositories( target, source, sourceDominant, context );
        mergeModelBase_Dependencies( target, source, sourceDominant, context );
        mergeModelBase_Reporting( target, source, sourceDominant, context );
        mergeModelBase_DependencyManagement( target, source, sourceDominant, context );
        mergeModelBase_Properties( target, source, sourceDominant, context );
    }


        protected void mergePlugin( Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context )
        {
            if ( source.isInherited() )
            {
                mergeConfigurationContainer( target, source, sourceDominant, context );
            }
            mergePlugin_GroupId( target, source, sourceDominant, context );
            mergePlugin_ArtifactId( target, source, sourceDominant, context );
            mergePlugin_Version( target, source, sourceDominant, context );
            mergePlugin_Extensions( target, source, sourceDominant, context );
            mergePlugin_Dependencies( target, source, sourceDominant, context );
            mergePlugin_Executions( target, source, sourceDominant, context );
        }


    public List<Artifact> getCompileArtifacts()
    {
        List<Artifact> list = new ArrayList<>( getArtifacts().size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO classpath check doesn't belong here - that's the other method
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                // TODO let the scope handler deal with this
                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
                    || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
                {
                    list.add( a );
                }
            }
        }
        return list;
    }


    public List<Artifact> getSystemArtifacts()
    {
        List<Artifact> list = new ArrayList<>( getArtifacts().size() );

        for ( Artifact a : getArtifacts() )
        {
            // TODO classpath check doesn't belong here - that's the other method
            if ( a.getArtifactHandler().isAddedToClasspath() )
            {
                // TODO let the scope handler deal with this
                if ( Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
                {
                    list.add( a );
                }
            }
        }
        return list;
    }


    private boolean hasErrors( List<SettingsProblem> problems )
    {
        if ( problems != null )
        {
            for ( SettingsProblem problem : problems )
            {
                if ( SettingsProblem.Severity.ERROR.compareTo( problem.getSeverity() ) >= 0 )
                {
                    return true;
                }
            }
        }

        return false;
    }


    public boolean requiresProject( MavenSession session )
    {
        List<String> goals = session.getGoals();
        if ( goals != null )
        {
            for ( String goal : goals )
            {
                if ( !isGoalSpecification( goal ) )
                {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean hasErrors( List<Problem> problems )
    {
        if ( problems != null )
        {
            for ( Problem problem : problems )
            {
                if ( Problem.Severity.ERROR.compareTo( problem.getSeverity() ) >= 0 )
                {
                    return true;
                }
            }
        }

        return false;
    }


    public boolean requiresProject( MavenSession session )
    {
        List<String> goals = session.getGoals();
        if ( goals != null )
        {
            for ( String goal : goals )
            {
                if ( !isGoalSpecification( goal ) )
                {
                    return true;
                }
            }
        }
        return false;
    }


    public void write( OutputStream output, Map<String, Object> options, Model model )
        throws IOException
    {
        Objects.requireNonNull( output, "output cannot be null" );
        Objects.requireNonNull( model, "model cannot be null" );

        String encoding = model.getModelEncoding();
        // TODO Use StringUtils here
        if ( encoding == null || encoding.length() <= 0 )
        {
            encoding = "UTF-8";
        }

        try ( final Writer out = new OutputStreamWriter( output, encoding ) )
        {
            write( out, options, model );
        }
    }


    public void write( OutputStream output, Map<String, Object> options, Settings settings )
        throws IOException
    {
        Objects.requireNonNull( output, "output cannot be null" );
        Objects.requireNonNull( settings, "settings cannot be null" );

        String encoding = settings.getModelEncoding();
        // TODO Use StringUtils here
        if ( encoding == null || encoding.length() <= 0 )
        {
            encoding = "UTF-8";
        }

        try ( final Writer out = new OutputStreamWriter( output, encoding ) )
        {
            write( out, options, settings );
        }
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            LongItem longItem = (LongItem) o;

            return value == longItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            BigIntegerItem that = (BigIntegerItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            StringItem that = (StringItem) o;

            return value.equals( that.value );

        }


    private static <T> List<T> copyList( List<T> original )
    {
        List<T> copy = null;

        if ( original != null )
        {
            copy = new ArrayList<>();

            if ( !original.isEmpty() )
            {
                copy.addAll( original );
            }
        }

        return copy;
    }


    public VersionRange cloneOf()
    {
        List<Restriction> copiedRestrictions = null;

        if ( restrictions != null )
        {
            copiedRestrictions = new ArrayList<>();

            if ( !restrictions.isEmpty() )
            {
                copiedRestrictions.addAll( restrictions );
            }
        }

        return new VersionRange( recommendedVersion, copiedRestrictions );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( this == o )
            {
                return true;
            }
            if ( o == null || getClass() != o.getClass() )
            {
                return false;
            }

            IntItem intItem = (IntItem) o;

            return value == intItem.value;

        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof InversionArtifactFilter ) )
        {
            return false;
        }

        InversionArtifactFilter other = (InversionArtifactFilter) obj;

        return toInvert.equals( other.toInvert );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof OrArtifactFilter ) )
        {
            return false;
        }

        OrArtifactFilter other = (OrArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof TypeArtifactFilter ) )
        {
            return false;
        }

        TypeArtifactFilter other = (TypeArtifactFilter) obj;

        return type.equals( other.type );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }

        final ArtifactStatus that = (ArtifactStatus) o;

        return rank == that.rank;

    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    private static boolean validateStringNotEmpty( SettingsProblemCollector problems, String fieldName, String string,
                                            String sourceHint )
    {
        if ( !validateNotNull( problems, fieldName, string, sourceHint ) )
        {
            return false;
        }

        if ( string.length() > 0 )
        {
            return true;
        }

        addViolation( problems, Severity.ERROR, fieldName, sourceHint, "is missing" );

        return false;
    }


    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,
                                            Version version, String string, String sourceHint,
                                            InputLocationTracker tracker )
    {
        if ( !validateNotNull( fieldName, problems, severity, version, string, sourceHint, tracker ) )
        {
            return false;
        }

        if ( string.length() > 0 )
        {
            return true;
        }

        addViolation( problems, severity, version, fieldName, sourceHint, "is missing.", tracker );

        return false;
    }


    private boolean hasErrors( List<SettingsProblem> problems )
    {
        if ( problems != null )
        {
            for ( SettingsProblem problem : problems )
            {
                if ( SettingsProblem.Severity.ERROR.compareTo( problem.getSeverity() ) >= 0 )
                {
                    return true;
                }
            }
        }

        return false;
    }


    private boolean hasErrors( List<Problem> problems )
    {
        if ( problems != null )
        {
            for ( Problem problem : problems )
            {
                if ( Problem.Severity.ERROR.compareTo( problem.getSeverity() ) >= 0 )
                {
                    return true;
                }
            }
        }

        return false;
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }
            if ( null == obj || !getClass().equals( obj.getClass() ) )
            {
                return false;
            }

            Key that = (Key) obj;
            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    private boolean validateVersion( String fieldName, ModelProblemCollector problems, Severity severity,
                                     Version version, String string, String sourceHint, InputLocationTracker tracker )
    {
        if ( string == null || string.length() <= 0 )
        {
            return true;
        }

        if ( hasExpression( string ) )
        {
            addViolation( problems, severity, version, fieldName, sourceHint,
                          "must be a valid version but is '" + string + "'.", tracker );
            return false;
        }

        return validateBannedCharacters( fieldName, problems, severity, version, string, sourceHint, tracker,
                                         ILLEGAL_VERSION_CHARS );

    }


    private boolean validate20ProperSnapshotVersion( String fieldName, ModelProblemCollector problems,
                                                     Severity severity, Version version, String string,
                                                     String sourceHint, InputLocationTracker tracker )
    {
        if ( string == null || string.length() <= 0 )
        {
            return true;
        }

        if ( string.endsWith( "SNAPSHOT" ) && !string.endsWith( "-SNAPSHOT" ) )
        {
            addViolation( problems, severity, version, fieldName, sourceHint,
                          "uses an unsupported snapshot version format, should be '*-SNAPSHOT' instead.", tracker );
            return false;
        }

        return true;
    }


    private boolean isValidId( String id )
    {
        for ( int i = 0; i < id.length(); i++ )
        {
            char c = id.charAt( i );
            if ( !isValidIdCharacter( c ) )
            {
                return false;
            }
        }
        return true;
    }


    private boolean isValidIdWithWildCards( String id )
    {
        for ( int i = 0; i < id.length(); i++ )
        {
            char c = id.charAt( i );
            if ( !isValidIdWithWildCardCharacter( c ) )
            {
                return false;
            }
        }
        return true;
    }


    private boolean determineNameMatch( String name )
    {
        String test = name;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isName( test );

        return reverse ? !result : result;
    }


    private boolean determineFamilyMatch( String family )
    {
        String test = family;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isFamily( test );

        return reverse ? !result : result;
    }


    private boolean determineArchMatch( String arch )
    {
        String test = arch;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isArch( test );

        return reverse ? !result : result;
    }


    private boolean determineFamilyMatch( String family )
    {
        String test = family;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isFamily( test );

        return reverse ? !result : result;
    }


    private boolean determineVersionMatch( String version )
    {
        String test = version;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isVersion( test );

        return reverse ? !result : result;
    }


    private boolean determineFamilyMatch( String family )
    {
        String test = family;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isFamily( test );

        return reverse ? !result : result;
    }


    private boolean determineArchMatch( String arch )
    {
        String test = arch;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isArch( test );

        return reverse ? !result : result;
    }


    private boolean determineNameMatch( String name )
    {
        String test = name;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isName( test );

        return reverse ? !result : result;
    }


    private boolean determineVersionMatch( String version )
    {
        String test = version;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isVersion( test );

        return reverse ? !result : result;
    }


    private boolean determineNameMatch( String name )
    {
        String test = name;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isName( test );

        return reverse ? !result : result;
    }


    private boolean determineVersionMatch( String version )
    {
        String test = version;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isVersion( test );

        return reverse ? !result : result;
    }


    private boolean determineArchMatch( String arch )
    {
        String test = arch;
        boolean reverse = false;

        if ( test.startsWith( "!" ) )
        {
            reverse = true;
            test = test.substring( 1 );
        }

        boolean result = Os.isArch( test );

        return reverse ? !result : result;
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj ) 
    {
        if ( this == obj ) 
        {
            return true;
        }
        
        if ( !( obj instanceof FileModelSource ) ) 
        {
            return false;
        }
        FileModelSource other = ( FileModelSource ) obj;
        return getFile().equals( other.getFile() );
    }


    protected void mergePatternSet_Includes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getIncludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getIncludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setIncludes( merged );
        }
    }


    protected void mergePatternSet_Excludes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getExcludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getExcludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setExcludes( merged );
        }
    }


    protected void mergePluginExecution_Goals( PluginExecution target, PluginExecution source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<String> src = source.getGoals();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getGoals();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setGoals( merged );
        }
    }


    protected void mergePatternSet_Excludes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getExcludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getExcludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setExcludes( merged );
        }
    }


    protected void mergeBuildBase_Filters( BuildBase target, BuildBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getFilters();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getFilters();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setFilters( merged );
        }
    }


    protected void mergePatternSet_Excludes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getExcludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getExcludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setExcludes( merged );
        }
    }


    protected void mergeContributor_Roles( Contributor target, Contributor source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getRoles();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getRoles();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setRoles( merged );
        }
    }


    protected void mergePatternSet_Excludes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getExcludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getExcludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setExcludes( merged );
        }
    }


    protected void mergeMailingList_OtherArchives( MailingList target, MailingList source, boolean sourceDominant,
                                                   Map<Object, Object> context )
    {
        List<String> src = source.getOtherArchives();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getOtherArchives();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setOtherArchives( merged );
        }
    }


    protected void mergePatternSet_Excludes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getExcludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getExcludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setExcludes( merged );
        }
    }


    protected void mergeModelBase_Modules( ModelBase target, ModelBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getModules();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getModules();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setModules( merged );
        }
    }


    protected void mergePatternSet_Excludes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getExcludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getExcludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setExcludes( merged );
        }
    }


    protected void mergePluginExecution_Goals( PluginExecution target, PluginExecution source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<String> src = source.getGoals();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getGoals();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setGoals( merged );
        }
    }


    protected void mergePatternSet_Includes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getIncludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getIncludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setIncludes( merged );
        }
    }


    protected void mergeBuildBase_Filters( BuildBase target, BuildBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getFilters();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getFilters();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setFilters( merged );
        }
    }


    protected void mergePatternSet_Includes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getIncludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getIncludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setIncludes( merged );
        }
    }


    protected void mergeContributor_Roles( Contributor target, Contributor source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getRoles();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getRoles();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setRoles( merged );
        }
    }


    protected void mergePatternSet_Includes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getIncludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getIncludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setIncludes( merged );
        }
    }


    protected void mergeMailingList_OtherArchives( MailingList target, MailingList source, boolean sourceDominant,
                                                   Map<Object, Object> context )
    {
        List<String> src = source.getOtherArchives();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getOtherArchives();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setOtherArchives( merged );
        }
    }


    protected void mergePatternSet_Includes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getIncludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getIncludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setIncludes( merged );
        }
    }


    protected void mergeModelBase_Modules( ModelBase target, ModelBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getModules();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getModules();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setModules( merged );
        }
    }


    protected void mergePatternSet_Includes( PatternSet target, PatternSet source, boolean sourceDominant,
                                             Map<Object, Object> context )
    {
        List<String> src = source.getIncludes();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getIncludes();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setIncludes( merged );
        }
    }


    protected void mergeBuildBase_Filters( BuildBase target, BuildBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getFilters();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getFilters();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setFilters( merged );
        }
    }


    protected void mergePluginExecution_Goals( PluginExecution target, PluginExecution source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<String> src = source.getGoals();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getGoals();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setGoals( merged );
        }
    }


    protected void mergeContributor_Roles( Contributor target, Contributor source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getRoles();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getRoles();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setRoles( merged );
        }
    }


    protected void mergePluginExecution_Goals( PluginExecution target, PluginExecution source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<String> src = source.getGoals();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getGoals();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setGoals( merged );
        }
    }


    protected void mergeMailingList_OtherArchives( MailingList target, MailingList source, boolean sourceDominant,
                                                   Map<Object, Object> context )
    {
        List<String> src = source.getOtherArchives();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getOtherArchives();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setOtherArchives( merged );
        }
    }


    protected void mergePluginExecution_Goals( PluginExecution target, PluginExecution source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<String> src = source.getGoals();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getGoals();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setGoals( merged );
        }
    }


    protected void mergeModelBase_Modules( ModelBase target, ModelBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getModules();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getModules();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setModules( merged );
        }
    }


    protected void mergePluginExecution_Goals( PluginExecution target, PluginExecution source, boolean sourceDominant,
                                               Map<Object, Object> context )
    {
        List<String> src = source.getGoals();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getGoals();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setGoals( merged );
        }
    }


    protected void mergeContributor_Roles( Contributor target, Contributor source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getRoles();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getRoles();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setRoles( merged );
        }
    }


    protected void mergeBuildBase_Filters( BuildBase target, BuildBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getFilters();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getFilters();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setFilters( merged );
        }
    }


    protected void mergeMailingList_OtherArchives( MailingList target, MailingList source, boolean sourceDominant,
                                                   Map<Object, Object> context )
    {
        List<String> src = source.getOtherArchives();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getOtherArchives();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setOtherArchives( merged );
        }
    }


    protected void mergeBuildBase_Filters( BuildBase target, BuildBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getFilters();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getFilters();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setFilters( merged );
        }
    }


    protected void mergeModelBase_Modules( ModelBase target, ModelBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getModules();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getModules();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setModules( merged );
        }
    }


    protected void mergeBuildBase_Filters( BuildBase target, BuildBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getFilters();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getFilters();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setFilters( merged );
        }
    }


    protected void mergeMailingList_OtherArchives( MailingList target, MailingList source, boolean sourceDominant,
                                                   Map<Object, Object> context )
    {
        List<String> src = source.getOtherArchives();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getOtherArchives();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setOtherArchives( merged );
        }
    }


    protected void mergeContributor_Roles( Contributor target, Contributor source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getRoles();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getRoles();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setRoles( merged );
        }
    }


    protected void mergeModelBase_Modules( ModelBase target, ModelBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getModules();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getModules();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setModules( merged );
        }
    }


    protected void mergeContributor_Roles( Contributor target, Contributor source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getRoles();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getRoles();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setRoles( merged );
        }
    }


    protected void mergeModelBase( ModelBase target, ModelBase source, boolean sourceDominant,
                                   Map<Object, Object> context )
    {
        mergeModelBase_DistributionManagement( target, source, sourceDominant, context );
        mergeModelBase_Modules( target, source, sourceDominant, context );
        mergeModelBase_Repositories( target, source, sourceDominant, context );
        mergeModelBase_PluginRepositories( target, source, sourceDominant, context );
        mergeModelBase_Dependencies( target, source, sourceDominant, context );
        mergeModelBase_Reporting( target, source, sourceDominant, context );
        mergeModelBase_DependencyManagement( target, source, sourceDominant, context );
        mergeModelBase_Properties( target, source, sourceDominant, context );
    }


    protected void mergeContributor( Contributor target, Contributor source, boolean sourceDominant,
                                     Map<Object, Object> context )
    {
        mergeContributor_Name( target, source, sourceDominant, context );
        mergeContributor_Email( target, source, sourceDominant, context );
        mergeContributor_Url( target, source, sourceDominant, context );
        mergeContributor_Organization( target, source, sourceDominant, context );
        mergeContributor_OrganizationUrl( target, source, sourceDominant, context );
        mergeContributor_Timezone( target, source, sourceDominant, context );
        mergeContributor_Roles( target, source, sourceDominant, context );
        mergeContributor_Properties( target, source, sourceDominant, context );
    }


    protected void mergeModelBase_Modules( ModelBase target, ModelBase source, boolean sourceDominant,
                                           Map<Object, Object> context )
    {
        List<String> src = source.getModules();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getModules();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setModules( merged );
        }
    }


    protected void mergeMailingList_OtherArchives( MailingList target, MailingList source, boolean sourceDominant,
                                                   Map<Object, Object> context )
    {
        List<String> src = source.getOtherArchives();
        if ( !src.isEmpty() )
        {
            List<String> tgt = target.getOtherArchives();
            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
            merged.addAll( tgt );
            merged.addAll( src );
            target.setOtherArchives( merged );
        }
    }


    public void transferInitiated( TransferEvent event )
    {
        String action = event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";
        String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";

        TransferResource resource = event.getResource();
        StringBuilder message = new StringBuilder();
        message.append( action ).append( ' ' ).append( direction ).append( ' ' ).append( resource.getRepositoryId() );
        message.append( ": " );
        message.append( resource.getRepositoryUrl() ).append( resource.getResourceName() );

        out.println( message.toString() );
    }


    public void transferInitiated( TransferEvent event )
    {
        String action = event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";
        String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";

        TransferResource resource = event.getResource();
        StringBuilder message = new StringBuilder();
        message.append( action ).append( ' ' ).append( direction ).append( ' ' ).append( resource.getRepositoryId() );
        message.append( ": " );
        message.append( resource.getRepositoryUrl() ).append( resource.getResourceName() );

        out.info( message.toString() );
    }


    public LocalArtifactResult find( RepositorySystemSession session, LocalArtifactRequest request )
    {
        String path = getPathForLocalArtifact( request.getArtifact() );
        File file = new File( getRepository().getBasedir(), path );

        LocalArtifactResult result = new LocalArtifactResult( request );
        if ( file.isFile() )
        {
            result.setFile( file );
            result.setAvailable( true );
        }

        return result;
    }


    public LocalArtifactResult find( RepositorySystemSession session, LocalArtifactRequest request )
    {
        String path = getPathForLocalArtifact( request.getArtifact() );
        File file = new File( getRepository().getBasedir(), path );

        LocalArtifactResult result = new LocalArtifactResult( request );
        if ( file.isFile() )
        {
            result.setFile( file );
            result.setAvailable( true );
        }

        return result;
    }


    public LocalArtifactResult find( RepositorySystemSession session, LocalArtifactRequest request )
    {
        String path = getPathForLocalArtifact( request.getArtifact() );
        File file = new File( getRepository().getBasedir(), path );

        LocalArtifactResult result = new LocalArtifactResult( request );
        if ( file.isFile() )
        {
            result.setFile( file );
            result.setAvailable( true );
        }

        return result;
    }


    public LocalArtifactResult find( RepositorySystemSession session, LocalArtifactRequest request )
    {
        String path = getPathForLocalArtifact( request.getArtifact() );
        File file = new File( getRepository().getBasedir(), path );

        LocalArtifactResult result = new LocalArtifactResult( request );
        if ( file.isFile() )
        {
            result.setFile( file );
            result.setAvailable( true );
        }

        return result;
    }


        private String insertRepositoryKey( String filename, String repositoryKey )
        {
            String result;
            int idx = filename.indexOf( '.' );
            if ( idx < 0 )
            {
                result = filename + '-' + repositoryKey;
            }
            else
            {
                result = filename.substring( 0, idx ) + '-' + repositoryKey + filename.substring( idx );
            }
            return result;
        }


    private String insertRepositoryKey( String filename, String repositoryKey )
    {
        String result;
        int idx = filename.indexOf( '.' );
        if ( idx < 0 )
        {
            result = filename + '-' + repositoryKey;
        }
        else
        {
            result = filename.substring( 0, idx ) + '-' + repositoryKey + filename.substring( idx );
        }
        return result;
    }


    private String insertRepositoryKey( String filename, String repositoryKey )
    {
        String result;
        int idx = filename.indexOf( '.' );
        if ( idx < 0 )
        {
            result = filename + '-' + repositoryKey;
        }
        else
        {
            result = filename.substring( 0, idx ) + '-' + repositoryKey + filename.substring( idx );
        }
        return result;
    }


    private String insertRepositoryKey( String filename, String repositoryKey )
    {
        String result;
        int idx = filename.indexOf( '.' );
        if ( idx < 0 )
        {
            result = filename + '-' + repositoryKey;
        }
        else
        {
            result = filename.substring( 0, idx ) + '-' + repositoryKey + filename.substring( idx );
        }
        return result;
    }


    public void exit()
        throws MojoExecutionException
    {
        final LinkedList<ScopeState> stack = values.get();
        if ( stack == null || stack.isEmpty() )
        {
            throw new IllegalStateException();
        }
        stack.removeFirst();
        if ( stack.isEmpty() )
        {
            values.remove();
        }
    }


    public void exit()
    {
        final LinkedList<ScopeState> stack = values.get();
        if ( stack == null || stack.isEmpty() )
        {
            throw new IllegalStateException();
        }
        stack.removeFirst();
        if ( stack.isEmpty() )
        {
            values.remove();
        }
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
                && version.equals( that.version ) && tag.equals( that.tag );
        }


    public void flush()
    {
        for ( CacheRecord record : cache.values() )
        {
            ClassRealm realm = record.getRealm();
            try
            {
                realm.getWorld().disposeRealm( realm.getId() );
            }
            catch ( NoSuchRealmException e )
            {
                // ignore
            }
        }
        cache.clear();
    }


    public void flush()
    {
        for ( CacheRecord record : cache.values() )
        {
            ClassRealm realm = record.getRealm();
            try
            {
                realm.getWorld().disposeRealm( realm.getId() );
            }
            catch ( NoSuchRealmException e )
            {
                // ignore
            }
        }
        cache.clear();
    }


    public void flush()
    {
        for ( CacheRecord record : cache.values() )
        {
            ClassRealm realm = record.getRealm();
            try
            {
                realm.getWorld().disposeRealm( realm.getId() );
            }
            catch ( NoSuchRealmException e )
            {
                // ignore
            }
        }
        cache.clear();
    }


    public void flush()
    {
        for ( CacheRecord record : cache.values() )
        {
            ClassRealm realm = record.getRealm();
            try
            {
                realm.getWorld().disposeRealm( realm.getId() );
            }
            catch ( NoSuchRealmException e )
            {
                // ignore
            }
        }
        cache.clear();
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return extensionRealms.equals( other.extensionRealms );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return Objects.equals( groupId, that.groupId ) && Objects.equals( artifactId, that.artifactId )
                && Objects.equals( version, that.version )
                && Objects.equals( dependencyArtifacts, that.dependencyArtifacts )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( collect, that.collect ) 
                && Objects.equals( resolve, that.resolve )
                && aggregating == that.aggregating;
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
                && resolveManagedVersions == other.resolveManagedVersions
                && repositoriesEquals( repositories, other.repositories );
        }


    public void flush()
    {
        for ( CacheRecord record : cache.values() )
        {
            ClassRealm realm = record.getRealm();
            try
            {
                realm.getWorld().disposeRealm( realm.getId() );
            }
            catch ( NoSuchRealmException e )
            {
                // ignore
            }
        }
        cache.clear();
    }


    public void flush()
    {
        for ( CacheRecord record : cache.values() )
        {
            ClassRealm realm = record.getRealm();
            try
            {
                realm.getWorld().disposeRealm( realm.getId() );
            }
            catch ( NoSuchRealmException e )
            {
                // ignore
            }
        }
        cache.clear();
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return parentRealm == that.parentRealm 
                && CacheUtils.pluginEquals( plugin, that.plugin )
                && Objects.equals( workspace, that.workspace ) 
                && Objects.equals( localRepo, that.localRepo )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories ) 
                && Objects.equals( filter, that.filter )
                && Objects.equals( foreignImports, that.foreignImports );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object obj )
        {
            if ( this == obj )
            {
                return true;
            }

            if ( !( obj instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) obj;

            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
                && eq( this.workspace, that.workspace )
                && RepositoryUtils.repositoriesEquals( this.repositories, that.repositories );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey that = (CacheKey) o;

            return CacheUtils.pluginEquals( plugin, that.plugin ) 
                && Objects.equals( workspace, that.workspace )
                && Objects.equals( localRepo, that.localRepo ) 
                && RepositoryUtils.repositoriesEquals( repositories, that.repositories )
                && Objects.equals( filter, that.filter );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        public boolean equals( Object o )
        {
            if ( o == this )
            {
                return true;
            }

            if ( !( o instanceof CacheKey ) )
            {
                return false;
            }

            CacheKey other = (CacheKey) o;

            return ids.equals( other.ids ) && files.equals( other.files ) && timestamps.equals( other.timestamps )
                && sizes.equals( other.sizes );
        }


    public Set<Plugin> getNonThreadSafePlugins()
    {
        Set<Plugin> plugins = new HashSet<>();
        for ( ExecutionPlanItem executionPlanItem : planItem )
        {
            final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();
            if ( !mojoExecution.getMojoDescriptor().isThreadSafe() )
            {
                plugins.add( mojoExecution.getPlugin() );
            }
        }
        return plugins;
    }


    public Set<MojoDescriptor> getNonThreadSafeMojos()
    {
        Set<MojoDescriptor> mojos = new HashSet<>();
        for ( ExecutionPlanItem executionPlanItem : planItem )
        {
            final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();
            if ( !mojoExecution.getMojoDescriptor().isThreadSafe() )
            {
                mojos.add( mojoExecution.getMojoDescriptor() );
            }
        }
        return mojos;
    }


    private static Iterable<String> getDistinctPhasesInOrderOfExecutionPlanAppearance(
        List<ExecutionPlanItem> planItems )
    {
        LinkedHashSet<String> result = new LinkedHashSet<>();
        for ( ExecutionPlanItem executionPlanItem : planItems )
        {
            final String phase = executionPlanItem.getLifecyclePhase();
            if ( !result.contains( phase ) )
            {
                result.add( phase );
            }
        }
        return result;
    }


    public Set<MojoDescriptor> getNonThreadSafeMojos()
    {
        Set<MojoDescriptor> mojos = new HashSet<>();
        for ( ExecutionPlanItem executionPlanItem : planItem )
        {
            final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();
            if ( !mojoExecution.getMojoDescriptor().isThreadSafe() )
            {
                mojos.add( mojoExecution.getMojoDescriptor() );
            }
        }
        return mojos;
    }


    private static Iterable<String> getDistinctPhasesInOrderOfExecutionPlanAppearance(
        List<ExecutionPlanItem> planItems )
    {
        LinkedHashSet<String> result = new LinkedHashSet<>();
        for ( ExecutionPlanItem executionPlanItem : planItems )
        {
            final String phase = executionPlanItem.getLifecyclePhase();
            if ( !result.contains( phase ) )
            {
                result.add( phase );
            }
        }
        return result;
    }


    public Set<Plugin> getNonThreadSafePlugins()
    {
        Set<Plugin> plugins = new HashSet<>();
        for ( ExecutionPlanItem executionPlanItem : planItem )
        {
            final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();
            if ( !mojoExecution.getMojoDescriptor().isThreadSafe() )
            {
                plugins.add( mojoExecution.getPlugin() );
            }
        }
        return plugins;
    }


    private void injectDefaultRepositories( MavenExecutionRequest request )
        throws MavenExecutionRequestPopulationException
    {
        Set<String> definedRepositories = repositorySystem.getRepoIds( request.getRemoteRepositories() );

        if ( !definedRepositories.contains( RepositorySystem.DEFAULT_REMOTE_REPO_ID ) )
        {
            try
            {
                request.addRemoteRepository( repositorySystem.createDefaultRemoteRepository( request ) );
            }
            catch ( Exception e )
            {
                throw new MavenExecutionRequestPopulationException( "Cannot create default remote repository.", e );
            }
        }
    }


    private void injectDefaultPluginRepositories( MavenExecutionRequest request )
        throws MavenExecutionRequestPopulationException
    {
        Set<String> definedRepositories = repositorySystem.getRepoIds( request.getPluginArtifactRepositories() );

        if ( !definedRepositories.contains( RepositorySystem.DEFAULT_REMOTE_REPO_ID ) )
        {
            try
            {
                request.addPluginArtifactRepository( repositorySystem.createDefaultRemoteRepository( request ) );
            }
            catch ( Exception e )
            {
                throw new MavenExecutionRequestPopulationException( "Cannot create default remote repository.", e );
            }
        }
    }


    public MavenExecutionRequest addMirror( Mirror mirror )
    {
        Objects.requireNonNull( mirror, "mirror cannot be null" );

        for ( Mirror p : getMirrors() )
        {
            if ( p.getId() != null && p.getId().equals( mirror.getId() ) )
            {
                return this;
            }
        }

        getMirrors().add( mirror );

        return this;
    }


    public MavenExecutionRequest addProfile( Profile profile )
    {
        Objects.requireNonNull( profile, "profile cannot be null" );

        for ( Profile p : getProfiles() )
        {
            if ( p.getId() != null && p.getId().equals( profile.getId() ) )
            {
                return this;
            }
        }

        getProfiles().add( profile );

        return this;
    }


    public MavenExecutionRequest addServer( Server server )
    {
        Objects.requireNonNull( server, "server cannot be null" );

        for ( Server p : getServers() )
        {
            if ( p.getId() != null && p.getId().equals( server.getId() ) )
            {
                return this;
            }
        }

        getServers().add( server );

        return this;
    }


    public MavenExecutionRequest addProfile( Profile profile )
    {
        Objects.requireNonNull( profile, "profile cannot be null" );

        for ( Profile p : getProfiles() )
        {
            if ( p.getId() != null && p.getId().equals( profile.getId() ) )
            {
                return this;
            }
        }

        getProfiles().add( profile );

        return this;
    }


    public MavenExecutionRequest addProxy( Proxy proxy )
    {
        Objects.requireNonNull( proxy, "proxy cannot be null" );

        for ( Proxy p : getProxies() )
        {
            if ( p.getId() != null && p.getId().equals( proxy.getId() ) )
            {
                return this;
            }
        }

        getProxies().add( proxy );

        return this;
    }


    public MavenExecutionRequest addProfile( Profile profile )
    {
        Objects.requireNonNull( profile, "profile cannot be null" );

        for ( Profile p : getProfiles() )
        {
            if ( p.getId() != null && p.getId().equals( profile.getId() ) )
            {
                return this;
            }
        }

        getProfiles().add( profile );

        return this;
    }


    public MavenExecutionRequest addServer( Server server )
    {
        Objects.requireNonNull( server, "server cannot be null" );

        for ( Server p : getServers() )
        {
            if ( p.getId() != null && p.getId().equals( server.getId() ) )
            {
                return this;
            }
        }

        getServers().add( server );

        return this;
    }


    public MavenExecutionRequest addMirror( Mirror mirror )
    {
        Objects.requireNonNull( mirror, "mirror cannot be null" );

        for ( Mirror p : getMirrors() )
        {
            if ( p.getId() != null && p.getId().equals( mirror.getId() ) )
            {
                return this;
            }
        }

        getMirrors().add( mirror );

        return this;
    }


    public MavenExecutionRequest addProxy( Proxy proxy )
    {
        Objects.requireNonNull( proxy, "proxy cannot be null" );

        for ( Proxy p : getProxies() )
        {
            if ( p.getId() != null && p.getId().equals( proxy.getId() ) )
            {
                return this;
            }
        }

        getProxies().add( proxy );

        return this;
    }


    public MavenExecutionRequest addMirror( Mirror mirror )
    {
        Objects.requireNonNull( mirror, "mirror cannot be null" );

        for ( Mirror p : getMirrors() )
        {
            if ( p.getId() != null && p.getId().equals( mirror.getId() ) )
            {
                return this;
            }
        }

        getMirrors().add( mirror );

        return this;
    }


    public MavenExecutionRequest addProxy( Proxy proxy )
    {
        Objects.requireNonNull( proxy, "proxy cannot be null" );

        for ( Proxy p : getProxies() )
        {
            if ( p.getId() != null && p.getId().equals( proxy.getId() ) )
            {
                return this;
            }
        }

        getProxies().add( proxy );

        return this;
    }


    public MavenExecutionRequest addServer( Server server )
    {
        Objects.requireNonNull( server, "server cannot be null" );

        for ( Server p : getServers() )
        {
            if ( p.getId() != null && p.getId().equals( server.getId() ) )
            {
                return this;
            }
        }

        getServers().add( server );

        return this;
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ScopeArtifactFilter ) )
        {
            return false;
        }

        ScopeArtifactFilter other = (ScopeArtifactFilter) obj;

        return equals( scope, other.scope );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        // make sure IncludesArtifactFilter is not equal ExcludesArtifactFilter!
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        IncludesArtifactFilter other = (IncludesArtifactFilter) obj;

        return patterns.equals( other.patterns );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof ExclusionSetFilter ) )
        {
            return false;
        }

        ExclusionSetFilter other = (ExclusionSetFilter) obj;

        return excludes.equals( other.excludes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof CumulativeScopeArtifactFilter ) )
        {
            return false;
        }

        CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;

        return scopes.equals( that.scopes );
    }


    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }

        if ( !( obj instanceof AndArtifactFilter ) )
        {
            return false;
        }

        AndArtifactFilter other = (AndArtifactFilter) obj;

        return filters.equals( other.filters );
    }


        private String insertRepositoryKey( String filename, String repositoryKey )
        {
            String result;
            int idx = filename.indexOf( '.' );
            if ( idx < 0 )
            {
                result = filename + '-' + repositoryKey;
            }
            else
            {
                result = filename.substring( 0, idx ) + '-' + repositoryKey + filename.substring( idx );
            }
            return result;
        }


    private String insertRepositoryKey( String filename, String repositoryKey )
    {
        String result;
        int idx = filename.indexOf( '.' );
        if ( idx < 0 )
        {
            result = filename + '-' + repositoryKey;
        }
        else
        {
            result = filename.substring( 0, idx ) + '-' + repositoryKey + filename.substring( idx );
        }
        return result;
    }


    public LocalArtifactResult find( RepositorySystemSession session, LocalArtifactRequest request )
    {
        String path = getPathForLocalArtifact( request.getArtifact() );
        File file = new File( getRepository().getBasedir(), path );

        LocalArtifactResult result = new LocalArtifactResult( request );
        if ( file.isFile() )
        {
            result.setFile( file );
            result.setAvailable( true );
        }

        return result;
    }


    public LocalArtifactResult find( RepositorySystemSession session, LocalArtifactRequest request )
    {
        String path = getPathForLocalArtifact( request.getArtifact() );
        File file = new File( getRepository().getBasedir(), path );

        LocalArtifactResult result = new LocalArtifactResult( request );
        if ( file.isFile() )
        {
            result.setFile( file );
            result.setAvailable( true );
        }

        return result;
    }
