Clone class 1, 2 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/AntClassLoader.java    private Manifest getJarManifest(final File container) throws IOException {        if (container.isDirectory()) {            return null;        }        final JarFile jarFile = jarFiles.get(container);        if (jarFile == null) {            return null;        }        return jarFile.getManifest();    }
apache_ant/ant/src/main/org/apache/tools/ant/AntClassLoader.java    private Certificate[] getCertificates(final File container, final String entry) {        if (container.isDirectory()) {            return null;        }        final JarFile jarFile = jarFiles.get(container);        if (jarFile == null) {            return null;        }        final JarEntry ent = jarFile.getJarEntry(entry);        return ent == null ? null : ent.getCertificates();    }
Clone class 2, 2 fragments, nominal size 26 lines, similarity 74%
apache_ant/ant/src/main/org/apache/tools/ant/ArgumentProcessorRegistry.java    private void collectArgumentProcessors() {        try {            ClassLoader classLoader = LoaderUtils.getContextClassLoader();            if (classLoader != null) {                Enumeration<URL> resources = classLoader.getResources(SERVICE_ID);                while (resources.hasMoreElements()) {                    URL resource = resources.nextElement();                    URLConnection conn = resource.openConnection();                    conn.setUseCaches(false);                    ArgumentProcessor processor = getProcessorByService(conn.getInputStream());                    registerArgumentProcessor(processor);                }            }            InputStream systemResource = ClassLoader.getSystemResourceAsStream(SERVICE_ID);            if (systemResource != null) {                ArgumentProcessor processor = getProcessorByService(systemResource);                registerArgumentProcessor(processor);            }        } catch (Exception e) {            System.err.println("Unable to load ArgumentProcessor from service "                    + SERVICE_ID + " (" + e.getClass().getName() + ": "                    + e.getMessage() + ")");            if (DEBUG) {                e.printStackTrace(System.err);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/ProjectHelperRepository.java    private void collectProjectHelpers() {        // First, try the system property        Constructor<? extends ProjectHelper> projectHelper = getProjectHelperBySystemProperty();        registerProjectHelper(projectHelper);        // A JDK1.3 'service' ( like in JAXP ). That will plug a helper        // automatically if in CLASSPATH, with the right META-INF/services.        try {            ClassLoader classLoader = LoaderUtils.getContextClassLoader();            if (classLoader != null) {                Enumeration<URL> resources =                    classLoader.getResources(ProjectHelper.SERVICE_ID);                while (resources.hasMoreElements()) {                    URL resource = resources.nextElement();                    URLConnection conn = resource.openConnection();                    conn.setUseCaches(false);                    projectHelper =                        getProjectHelperByService(conn.getInputStream());                    registerProjectHelper(projectHelper);                }            }            InputStream systemResource =                ClassLoader.getSystemResourceAsStream(ProjectHelper.SERVICE_ID);            if (systemResource != null) {                projectHelper = getProjectHelperByService(systemResource);                registerProjectHelper(projectHelper);            }        } catch (Exception e) {            System.err.println("Unable to load ProjectHelper from service "                               + ProjectHelper.SERVICE_ID + " ("                               + e.getClass().getName()                               + ": " + e.getMessage() + ")");            if (DEBUG) {                e.printStackTrace(System.err);            }        }    }
Clone class 3, 2 fragments, nominal size 20 lines, similarity 95%
apache_ant/ant/src/main/org/apache/tools/ant/ComponentHelper.java    public Hashtable<String, Class<?>> getTaskDefinitions() {        synchronized (taskClassDefinitions) {            synchronized (antTypeTable) {                if (rebuildTaskClassDefinitions) {                    taskClassDefinitions.clear();                    for (Map.Entry<String, AntTypeDefinition> e : antTypeTable.entrySet()) {                        final Class<?> clazz = e.getValue().getExposedClass(project);                        if (clazz == null) {                            continue;                        }                        if (Task.class.isAssignableFrom(clazz)) {                            taskClassDefinitions.put(e.getKey(), e.getValue().getTypeClass(project));                        }                    }                    rebuildTaskClassDefinitions = false;                }            }        }        return taskClassDefinitions;    }
apache_ant/ant/src/main/org/apache/tools/ant/ComponentHelper.java    public Hashtable<String, Class<?>> getDataTypeDefinitions() {        synchronized (typeClassDefinitions) {            synchronized (antTypeTable) {                if (rebuildTypeClassDefinitions) {                    typeClassDefinitions.clear();                    for (Map.Entry<String, AntTypeDefinition> e : antTypeTable.entrySet()) {                        final Class<?> clazz = e.getValue().getExposedClass(project);                        if (clazz == null) {                            continue;                        }                        if (!Task.class.isAssignableFrom(clazz)) {                            typeClassDefinitions.put(e.getKey(), e.getValue().getTypeClass(project));                        }                    }                    rebuildTypeClassDefinitions = false;                }            }        }        return typeClassDefinitions;    }
Clone class 4, 2 fragments, nominal size 15 lines, similarity 81%
apache_ant/ant/src/main/org/apache/tools/ant/ComponentHelper.java    private void initTasks() {        ClassLoader classLoader = getClassLoader(null);        Properties props = getDefaultDefinitions(false);        Enumeration<?> e = props.propertyNames();        while (e.hasMoreElements()) {            String name = (String) e.nextElement();            String className = props.getProperty(name);            AntTypeDefinition def = new AntTypeDefinition();            def.setName(name);            def.setClassName(className);            def.setClassLoader(classLoader);            def.setAdaptToClass(Task.class);            def.setAdapterClass(TaskAdapter.class);            antTypeTable.put(name, def);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/ComponentHelper.java    private void initTypes() {        ClassLoader classLoader = getClassLoader(null);        Properties props = getDefaultDefinitions(true);        Enumeration<?> e = props.propertyNames();        while (e.hasMoreElements()) {            String name = (String) e.nextElement();            String className = props.getProperty(name);            AntTypeDefinition def = new AntTypeDefinition();            def.setName(name);            def.setClassName(className);            def.setClassLoader(classLoader);            antTypeTable.put(name, def);        }    }
Clone class 5, 2 fragments, nominal size 22 lines, similarity 86%
apache_ant/ant/src/main/org/apache/tools/ant/DemuxOutputStream.java    public void write(byte[] b, int off, int len) throws IOException {        // find the line breaks and pass other chars through in blocks        int offset = off;        int blockStartOffset = offset;        int remaining = len;        BufferInfo bufferInfo = getBufferInfo();        while (remaining > 0) {            while (remaining > 0 && b[offset] != LF && b[offset] != CR) {                offset++;                remaining--;            }            // either end of buffer or a line separator char            int blockLength = offset - blockStartOffset;            if (blockLength > 0) {                bufferInfo.buffer.write(b, blockStartOffset, blockLength);            }            while (remaining > 0 && (b[offset] == LF || b[offset] == CR)) {                write(b[offset]);                offset++;                remaining--;            }            blockStartOffset = offset;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/LineOrientedOutputStream.java    public final void write(byte[] b, int off, int len) throws IOException {        // find the line breaks and pass other chars through in blocks        int offset = off;        int blockStartOffset = offset;        int remaining = len;        while (remaining > 0) {            while (remaining > 0 && b[offset] != LF && b[offset] != CR) {                offset++;                remaining--;            }            // either end of buffer or a line separator char            int blockLength = offset - blockStartOffset;            if (blockLength > 0) {                buffer.write(b, blockStartOffset, blockLength);            }            while (remaining > 0 && (b[offset] == LF || b[offset] == CR)) {                write(b[offset]);                offset++;                remaining--;            }            blockStartOffset = offset;        }    }
Clone class 6, 2 fragments, nominal size 13 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/Diagnostics.java    private static SAXParser getSAXParser() {        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();        if (saxParserFactory == null) {            return null;        }        SAXParser saxParser = null;        try {            saxParser = saxParserFactory.newSAXParser();        } catch (Exception e) {            // ignore            ignoreThrowable(e);        }        return saxParser;    }
apache_ant/ant/src/main/org/apache/tools/ant/Diagnostics.java    private static Transformer getXSLTProcessor() {        TransformerFactory transformerFactory = TransformerFactory.newInstance();        if (transformerFactory == null) {            return null;        }        Transformer transformer = null;        try {            transformer = transformerFactory.newTransformer();        } catch (Exception e) {            // ignore            ignoreThrowable(e);        }        return transformer;    }
Clone class 7, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/DirectoryScanner.java    public synchronized void setIncludes(final String[] includes) {        if (includes == null) {            this.includes = null;        } else {            this.includes = new String[includes.length];            for (int i = 0; i < includes.length; i++) {                this.includes[i] = normalizePattern(includes[i]);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/DirectoryScanner.java    public synchronized void setExcludes(final String[] excludes) {        if (excludes == null) {            this.excludes = null;        } else {            this.excludes = new String[excludes.length];            for (int i = 0; i < excludes.length; i++) {                this.excludes[i] = normalizePattern(excludes[i]);            }        }    }
Clone class 8, 2 fragments, nominal size 13 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/DirectoryScanner.java    private boolean isIncluded(final TokenizedPath path) {        ensureNonPatternSetsReady();        if (isCaseSensitive()            ? includeNonPatterns.containsKey(path.toString())            : includeNonPatterns.containsKey(path.toString().toUpperCase())) {            return true;        }        for (int i = 0; i < includePatterns.length; i++) {            if (includePatterns[i].matchPath(path, isCaseSensitive())) {                return true;            }        }        return false;    }
apache_ant/ant/src/main/org/apache/tools/ant/DirectoryScanner.java    private boolean isExcluded(final TokenizedPath name) {        ensureNonPatternSetsReady();        if (isCaseSensitive()            ? excludeNonPatterns.containsKey(name.toString())            : excludeNonPatterns.containsKey(name.toString().toUpperCase())) {            return true;        }        for (int i = 0; i < excludePatterns.length; i++) {            if (excludePatterns[i].matchPath(name, isCaseSensitive())) {                return true;            }        }        return false;    }
Clone class 9, 2 fragments, nominal size 12 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/DirectoryScanner.java    public String[] getIncludedFiles() {        String[] files;        synchronized (this) {            if (filesIncluded == null) {                throw new IllegalStateException("Must call scan() first");            }            files = new String[filesIncluded.size()];            filesIncluded.copyInto(files);        }        Arrays.sort(files);        return files;    }
apache_ant/ant/src/main/org/apache/tools/ant/DirectoryScanner.java    public String[] getIncludedDirectories() {        String[] directories;        synchronized (this) {            if (dirsIncluded == null) {                throw new IllegalStateException("Must call scan() first");            }            directories = new String[dirsIncluded.size()];            dirsIncluded.copyInto(directories);        }        Arrays.sort(directories);        return directories;    }
Clone class 10, 2 fragments, nominal size 22 lines, similarity 82%
apache_ant/ant/src/main/org/apache/tools/ant/filters/HeadFilter.java    public int read() throws IOException {        if (!getInitialized()) {            initialize();            setInitialized(true);        }        while (line == null || line.length() == 0) {            line = lineTokenizer.getToken(in);            if (line == null) {                return -1;            }            line = headFilter(line);            if (eof) {                return -1;            }            linePos = 0;        }        int ch = line.charAt(linePos);        linePos++;        if (linePos == line.length()) {            line = null;        }        return ch;    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/TailFilter.java    public int read() throws IOException {        if (!getInitialized()) {            initialize();            setInitialized(true);        }        while (line == null || line.length() == 0) {            line = lineTokenizer.getToken(in);            line = tailFilter(line);            if (line == null) {                return -1;            }            linePos = 0;        }        int ch = line.charAt(linePos);        linePos++;        if (linePos == line.length()) {            line = null;        }        return ch;    }
Clone class 11, 8 fragments, nominal size 14 lines, similarity 71%
apache_ant/ant/src/main/org/apache/tools/ant/filters/HeadFilter.java    private void initialize() {        Parameter[] params = getParameters();        if (params != null) {            for (int i = 0; i < params.length; i++) {                if (LINES_KEY.equals(params[i].getName())) {                    lines = Long.parseLong(params[i].getValue());                    continue;                }                if (SKIP_KEY.equals(params[i].getName())) {                    skip = Long.parseLong(params[i].getValue());                    continue;                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/TabsToSpaces.java    private void initialize() {        Parameter[] params = getParameters();        if (params != null) {            for (int i = 0; i < params.length; i++) {                if (params[i] != null) {                    if (TAB_LENGTH_KEY.equals(params[i].getName())) {                        tabLength = Integer.parseInt(params[i].getValue());                        break;                    }                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/TailFilter.java    private void initialize() {        Parameter[] params = getParameters();        if (params != null) {            for (int i = 0; i < params.length; i++) {                if (LINES_KEY.equals(params[i].getName())) {                    setLines(Long.parseLong(params[i].getValue()));                    continue;                }                if (SKIP_KEY.equals(params[i].getName())) {                    skip = Long.parseLong(params[i].getValue());                    continue;                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/LineContains.java    private void initialize() {        Parameter[] params = getParameters();        if (params != null) {            for (int i = 0; i < params.length; i++) {                if (CONTAINS_KEY.equals(params[i].getType())) {                    contains.addElement(params[i].getValue());                } else if (NEGATE_KEY.equals(params[i].getType())) {                    setNegate(Project.toBoolean(params[i].getValue()));                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/StripLineComments.java    private void initialize() {        Parameter[] params = getParameters();        if (params != null) {            for (int i = 0; i < params.length; i++) {                if (COMMENTS_KEY.equals(params[i].getType())) {                    comments.addElement(params[i].getValue());                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/PrefixLines.java    private void initialize() {        Parameter[] params = getParameters();        if (params != null) {            for (int i = 0; i < params.length; i++) {                if (PREFIX_KEY.equals(params[i].getName())) {                    prefix = params[i].getValue();                    break;                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/StripLineBreaks.java    private void initialize() {        String userDefinedLineBreaks = null;        Parameter[] params = getParameters();        if (params != null) {            for (int i = 0; i < params.length; i++) {                if (LINE_BREAKS_KEY.equals(params[i].getName())) {                    userDefinedLineBreaks = params[i].getValue();                    break;                }            }        }        if (userDefinedLineBreaks != null) {            lineBreaks = userDefinedLineBreaks;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/SuffixLines.java    private void initialize() {        Parameter[] params = getParameters();        if (params != null) {            for (int i = 0; i < params.length; i++) {                if (SUFFIX_KEY.equals(params[i].getName())) {                    suffix = params[i].getValue();                    break;                }            }        }    }
Clone class 12, 3 fragments, nominal size 34 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/filters/LineContains.java    public int read() throws IOException {        if (!getInitialized()) {            initialize();            setInitialized(true);        }        int ch = -1;        if (line != null) {            ch = line.charAt(0);            if (line.length() == 1) {                line = null;            } else {                line = line.substring(1);            }        } else {            final int containsSize = contains.size();            for (line = readLine(); line != null; line = readLine()) {                boolean matches = true;                for (int i = 0; matches && i < containsSize; i++) {                    String containsStr = (String) contains.elementAt(i);                    matches = line.indexOf(containsStr) >= 0;                }                if (matches ^ isNegated()) {                    break;                }            }            if (line != null) {                return read();            }        }        return ch;    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/StripLineComments.java    public int read() throws IOException {        if (!getInitialized()) {            initialize();            setInitialized(true);        }        int ch = -1;        if (line != null) {            ch = line.charAt(0);            if (line.length() == 1) {                line = null;            } else {                line = line.substring(1);            }        } else {            line = readLine();            final int commentsSize = comments.size();            while (line != null) {                for (int i = 0; i < commentsSize; i++) {                    String comment = comments.elementAt(i);                    if (line.startsWith(comment)) {                        line = null;                        break;                    }                }                if (line == null) {                    // line started with comment                    line = readLine();                } else {                    break;                }            }            if (line != null) {                return read();            }        }        return ch;    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/LineContainsRegExp.java    public int read() throws IOException {        if (!getInitialized()) {            initialize();            setInitialized(true);        }        int ch = -1;        if (line != null) {            ch = line.charAt(0);            if (line.length() == 1) {                line = null;            } else {                line = line.substring(1);            }        } else {            final int regexpsSize = regexps.size();            for (line = readLine(); line != null; line = readLine()) {                boolean matches = true;                for (int i = 0; matches && i < regexpsSize; i++) {                    RegularExpression regexp                        = (RegularExpression) regexps.elementAt(i);                    Regexp re = regexp.getRegexp(getProject());                    matches = re.matches(line, regexpOptions);                }                if (matches ^ isNegated()) {                    break;                }            }            if (line != null) {                return read();            }        }        return ch;    }
Clone class 13, 2 fragments, nominal size 31 lines, similarity 79%
apache_ant/ant/src/main/org/apache/tools/ant/filters/PrefixLines.java    public int read() throws IOException {        if (!getInitialized()) {            initialize();            setInitialized(true);        }        int ch = -1;        if (queuedData != null && queuedData.length() == 0) {            queuedData = null;        }        if (queuedData != null) {            ch = queuedData.charAt(0);            queuedData = queuedData.substring(1);            if (queuedData.length() == 0) {                queuedData = null;            }        } else {            queuedData = readLine();            if (queuedData == null) {                ch = -1;            } else {                if (prefix != null) {                    queuedData = prefix + queuedData;                }                return read();            }        }        return ch;    }
apache_ant/ant/src/main/org/apache/tools/ant/filters/SuffixLines.java    public int read() throws IOException {        if (!getInitialized()) {            initialize();            setInitialized(true);        }        int ch = -1;        if (queuedData != null && queuedData.length() == 0) {            queuedData = null;        }        if (queuedData != null) {            ch = queuedData.charAt(0);            queuedData = queuedData.substring(1);            if (queuedData.length() == 0) {                queuedData = null;            }        } else {            queuedData = readLine();            if (queuedData == null) {                ch = -1;            } else {                if (suffix != null) {                    String lf = "";                    if (queuedData.endsWith("\r\n")) {                        lf = "\r\n";                    } else if (queuedData.endsWith("\n")) {                        lf = "\n";                    }                    queuedData =                        queuedData.substring(0,                                             queuedData.length() - lf.length())                        + suffix + lf;                }                return read();            }        }        return ch;    }
Clone class 14, 2 fragments, nominal size 14 lines, similarity 71%
apache_ant/ant/src/main/org/apache/tools/ant/filters/ReplaceTokens.java    private Properties getProperties(Resource resource) {        InputStream in = null;        Properties props = new Properties();        try {            in = resource.getInputStream();            props.load(in);        } catch (IOException ioe) {            ioe.printStackTrace();        } finally {            FileUtils.close(in);        }        return props;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Replace.java    public Properties getProperties(Resource propertyResource)        throws BuildException {        Properties props = new Properties();        InputStream in = null;        try {            in = propertyResource.getInputStream();            props.load(in);        } catch (IOException e) {            String message = "Property resource (" + propertyResource.getName()                + ") cannot be loaded.";            throw new BuildException(message);        } finally {            FileUtils.close(in);        }        return props;    }
Clone class 15, 2 fragments, nominal size 17 lines, similarity 88%
apache_ant/ant/src/main/org/apache/tools/ant/filters/TokenFilter.java        private void initialize() {            if (initialized) {                return;            }            options = convertRegexOptions(flags);            if (from == null) {                throw new BuildException("Missing pattern in replaceregex");            }            regularExpression = new RegularExpression();            regularExpression.setPattern(from);            regexp = regularExpression.getRegexp(getProject());            if (to == null) {                to = "";            }            substitution = new Substitution();            substitution.setExpression(to);        }
apache_ant/ant/src/main/org/apache/tools/ant/filters/TokenFilter.java        private void initialize() {            if (initialized) {                return;            }            options = convertRegexOptions(flags);            if (from == null) {                throw new BuildException("Missing from in containsregex");            }            regularExpression = new RegularExpression();            regularExpression.setPattern(from);            regexp = regularExpression.getRegexp(getProject());            if (to == null) {                return;            }            substitution = new Substitution();            substitution.setExpression(to);        }
Clone class 16, 2 fragments, nominal size 21 lines, similarity 73%
apache_ant/ant/src/main/org/apache/tools/ant/helper/DefaultExecutor.java    public void executeTargets(Project project, String[] targetNames)        throws BuildException {        BuildException thrownException = null;        for (int i = 0; i < targetNames.length; i++) {            try {                project.executeTarget(targetNames[i]);            } catch (BuildException ex) {                if (project.isKeepGoingMode()) {                    thrownException = ex;                } else {                    throw ex;                }            }        }        if (thrownException != null) {            throw thrownException;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/helper/IgnoreDependenciesExecutor.java    public void executeTargets(Project project, String[] targetNames)        throws BuildException {        Hashtable<String, Target> targets = project.getTargets();        BuildException thrownException = null;        for (int i = 0; i < targetNames.length; i++) {            try {                Target t = targets.get(targetNames[i]);                if (t == null) {                  throw new BuildException("Unknown target " + targetNames[i]);                }                t.performTasks();            } catch (BuildException ex) {                if (project.isKeepGoingMode()) {                    thrownException = ex;                } else {                    throw ex;                }            }        }        if (thrownException != null) {            throw thrownException;        }    }
Clone class 17, 2 fragments, nominal size 20 lines, similarity 71%
apache_ant/ant/src/main/org/apache/tools/ant/helper/ProjectHelper2.java        public InputSource resolveEntity(String publicId, String systemId) {            context.getProject().log("resolving systemId: " + systemId, Project.MSG_VERBOSE);            if (systemId.startsWith("file:")) {                String path = FILE_UTILS.fromURI(systemId);                File file = new File(path);                if (!file.isAbsolute()) {                    file = FILE_UTILS.resolveFile(context.getBuildFileParent(), path);                    context.getProject().log(                                             "Warning: '" + systemId + "' in " + context.getBuildFile()                                             + " should be expressed simply as '" + path.replace('\\', '/')                                             + "' for compliance with other XML tools", Project.MSG_WARN);                }                context.getProject().log("file=" + file, Project.MSG_DEBUG);                try {                    InputSource inputSource = new InputSource(new FileInputStream(file));                    inputSource.setSystemId(FILE_UTILS.toURI(file.getAbsolutePath()));                    return inputSource;                } catch (FileNotFoundException fne) {                    context.getProject().log(file.getAbsolutePath() + " could not be found",                                             Project.MSG_WARN);                }            }            // use default if not file or file not found            context.getProject().log("could not resolve systemId", Project.MSG_DEBUG);            return null;        }
apache_ant/ant/src/main/org/apache/tools/ant/helper/ProjectHelperImpl.java        public InputSource resolveEntity(String publicId, String systemId) {            helperImpl.project.log("resolving systemId: " + systemId, Project.MSG_VERBOSE);            if (systemId.startsWith("file:")) {                String path = FILE_UTILS.fromURI(systemId);                File file = new File(path);                if (!file.isAbsolute()) {                    file = FILE_UTILS.resolveFile(helperImpl.buildFileParent, path);                    helperImpl.project.log("Warning: '" + systemId + "' in " + helperImpl.buildFile                            + " should be expressed simply as '" + path.replace('\\', '/')                            + "' for compliance with other XML tools", Project.MSG_WARN);                }                try {                    InputSource inputSource = new InputSource(new FileInputStream(file));                    inputSource.setSystemId(FILE_UTILS.toURI(file.getAbsolutePath()));                    return inputSource;                } catch (FileNotFoundException fne) {                    helperImpl.project.log(file.getAbsolutePath() + " could not be found",                            Project.MSG_WARN);                }            }            // use default if not file or file not found            return null;        }
Clone class 18, 4 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java    public void buildFinished(final BuildEvent event) {        if (initialized) {            final String categoryString = PROJECT_LOG;            final Log log = getLog(categoryString, event.getProject().getName());            if (event.getException() == null) {                realLog(log, "Build finished.", Project.MSG_INFO, null);            } else {                realLog(log, "Build finished with error.", Project.MSG_ERR,                        event.getException());            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java    public void targetFinished(final BuildEvent event) {        if (initialized) {            final String targetName = event.getTarget().getName();            final Log log = getLog(TARGET_LOG,                    event.getTarget().getName());            if (event.getException() == null) {                realLog(log, "Target end: " + targetName, Project.MSG_DEBUG, null);            } else {                realLog(log, "Target \"" + targetName                        + "\" finished with error.", Project.MSG_ERR,                        event.getException());            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/listener/Log4jListener.java    public void targetFinished(final BuildEvent event) {        if (initialized) {            final String targetName = event.getTarget().getName();            final Logger cat = Logger.getLogger(Target.class.getName());            if (event.getException() == null) {                cat.info("Target \"" + targetName + "\" finished.");            } else {                cat.error("Target \"" + targetName                    + "\" finished with error.", event.getException());            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/listener/Log4jListener.java    public void buildFinished(final BuildEvent event) {        if (initialized) {            final Logger log = Logger.getLogger(Project.class.getName());            if (event.getException() == null) {                log.info("Build finished.");            } else {                log.error("Build finished with error.", event.getException());            }        }    }
Clone class 19, 2 fragments, nominal size 18 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java    public void taskStarted(final BuildEvent event) {        if (initialized) {            final Task task = event.getTask();            Object real = task;            if (task instanceof UnknownElement) {                final Object realObj = ((UnknownElement) task).getTask();                if (realObj != null) {                    real = realObj;                }            }            final Log log = getLog(real.getClass().getName(), null);            if (log.isTraceEnabled()) {                realLog(log, "Task \"" + task.getTaskName() + "\" started ",                        Project.MSG_VERBOSE, null);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java    public void taskFinished(final BuildEvent event) {        if (initialized) {            final Task task = event.getTask();            Object real = task;            if (task instanceof UnknownElement) {                final Object realObj = ((UnknownElement) task).getTask();                if (realObj != null) {                    real = realObj;                }            }            final Log log = getLog(real.getClass().getName(), null);            if (event.getException() == null) {                if (log.isTraceEnabled()) {                    realLog(log, "Task \"" + task.getTaskName() + "\" finished.",                            Project.MSG_VERBOSE, null);                }            } else {                realLog(log, "Task \"" + task.getTaskName()                        + "\" finished with error.", Project.MSG_ERR,                        event.getException());            }        }    }
Clone class 20, 2 fragments, nominal size 11 lines, similarity 81%
apache_ant/ant/src/main/org/apache/tools/ant/Main.java    private int handleArgLogger(final String[] args, int pos) {        if (loggerClassname != null) {            throw new BuildException(                "Only one logger class may be specified.");        }        try {            loggerClassname = args[++pos];        } catch (final ArrayIndexOutOfBoundsException aioobe) {            throw new BuildException(                "You must specify a classname when using the -logger argument");        }        return pos;    }
apache_ant/ant/src/main/org/apache/tools/ant/Main.java    private int handleArgInputHandler(final String[] args, int pos) {        if (inputHandlerClassname != null) {            throw new BuildException("Only one input handler class may "                                     + "be specified.");        }        try {            inputHandlerClassname = args[++pos];        } catch (final ArrayIndexOutOfBoundsException aioobe) {            throw new BuildException("You must specify a classname when"                                     + " using the -inputhandler"                                     + " argument");        }        return pos;    }
Clone class 21, 2 fragments, nominal size 12 lines, similarity 91%
apache_ant/ant/src/main/org/apache/tools/ant/Project.java    public void demuxOutput(final String output, final boolean isWarning) {        final Task task = getThreadTask(Thread.currentThread());        if (task == null) {            log(output, isWarning ? MSG_WARN : MSG_INFO);        } else {            if (isWarning) {                task.handleErrorOutput(output);            } else {                task.handleOutput(output);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/Project.java    public void demuxFlush(final String output, final boolean isError) {        final Task task = getThreadTask(Thread.currentThread());        if (task == null) {            fireMessageLogged(this, output, isError ? MSG_ERR : MSG_INFO);        } else {            if (isError) {                task.handleErrorFlush(output);            } else {                task.handleFlush(output);            }        }    }
Clone class 22, 3 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/Project.java    public void fireBuildFinished(final Throwable exception) {        final BuildEvent event = new BuildEvent(this);        event.setException(exception);        final BuildListener[] currListeners = listeners;        for (int i = 0; i < currListeners.length; i++) {            currListeners[i].buildFinished(event);        }        // Inform IH to clear the cache        IntrospectionHelper.clearCache();    }
apache_ant/ant/src/main/org/apache/tools/ant/Project.java    public void fireSubBuildFinished(final Throwable exception) {        final BuildEvent event = new BuildEvent(this);        event.setException(exception);        final BuildListener[] currListeners = listeners;        for (int i = 0; i < currListeners.length; i++) {            if (currListeners[i] instanceof SubBuildListener) {                ((SubBuildListener) currListeners[i]).subBuildFinished(event);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/Project.java    public void fireSubBuildStarted() {        final BuildEvent event = new BuildEvent(this);        final BuildListener[] currListeners = listeners;        for (int i = 0; i < currListeners.length; i++) {            if (currListeners[i] instanceof SubBuildListener) {                ((SubBuildListener) currListeners[i]).subBuildStarted(event);            }        }    }
Clone class 23, 2 fragments, nominal size 13 lines, similarity 92%
apache_ant/ant/src/main/org/apache/tools/ant/ProjectHelperRepository.java    public ProjectHelper getProjectHelperForBuildFile(Resource buildFile) throws BuildException {        for (Iterator<ProjectHelper> it = getHelpers(); it.hasNext();) {            ProjectHelper helper = it.next();            if (helper.canParseBuildFile(buildFile)) {                if (DEBUG) {                    System.out.println("ProjectHelper "                                       + helper.getClass().getName()                                       + " selected for the build file "                                       + buildFile);                }                return helper;            }        }        throw new RuntimeException("BUG: at least the ProjectHelper2 should "                                   + "have supported the file " + buildFile);    }
apache_ant/ant/src/main/org/apache/tools/ant/ProjectHelperRepository.java    public ProjectHelper getProjectHelperForAntlib(Resource antlib) throws BuildException {        for (Iterator<ProjectHelper> it = getHelpers(); it.hasNext();) {            ProjectHelper helper = it.next();            if (helper.canParseAntlibDescriptor(antlib)) {                if (DEBUG) {                    System.out.println("ProjectHelper "                                       + helper.getClass().getName()                                       + " selected for the antlib "                                       + antlib);                }                return helper;            }        }        throw new RuntimeException("BUG: at least the ProjectHelper2 should "                                   + "have supported the file " + antlib);    }
Clone class 24, 2 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/property/LocalPropertyStack.java    public Object evaluate(String property, PropertyHelper helper) {        synchronized (LOCK) {            for (Map<String, Object> map : stack) {                Object ret = map.get(property);                if (ret != null) {                    return ret;                }            }        }        return null;    }
apache_ant/ant/src/main/org/apache/tools/ant/property/LocalPropertyStack.java    private Map<String, Object> getMapForProperty(String property) {        synchronized (LOCK) {            for (Map<String, Object> map : stack) {                if (map.get(property) != null) {                    return map;                }            }        }        return null;    }
Clone class 25, 2 fragments, nominal size 13 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/PropertyHelper.java    public void copyInheritedProperties(Project other) {        //avoid concurrent modification:        synchronized (inheritedProperties) {            Enumeration<String> e = inheritedProperties.keys();            while (e.hasMoreElements()) {                String arg = e.nextElement().toString();                if (other.getUserProperty(arg) != null) {                    continue;                }                Object value = inheritedProperties.get(arg);                other.setInheritedProperty(arg, value.toString());            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/PropertyHelper.java    public void copyUserProperties(Project other) {        //avoid concurrent modification:        synchronized (userProperties) {            Enumeration<String> e = userProperties.keys();            while (e.hasMoreElements()) {                Object arg = e.nextElement();                if (inheritedProperties.containsKey(arg)) {                    continue;                }                Object value = userProperties.get(arg);                other.setUserProperty(arg.toString(), value.toString());            }        }    }
Clone class 26, 2 fragments, nominal size 12 lines, similarity 83%
apache_ant/ant/src/main/org/apache/tools/ant/Target.java    public Target(Target other) {        this.name = other.name;        this.ifString = other.ifString;        this.unlessString = other.unlessString;        this.ifCondition = other.ifCondition;        this.unlessCondition = other.unlessCondition;        this.dependencies = other.dependencies;        this.location = other.location;        this.project = other.project;        this.description = other.description;        // The children are added to after this cloning        this.children = other.children;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/AbstractFileSet.java    protected AbstractFileSet(AbstractFileSet fileset) {        this.dir = fileset.dir;        this.defaultPatterns = fileset.defaultPatterns;        this.additionalPatterns = fileset.additionalPatterns;        this.selectors = fileset.selectors;        this.useDefaultExcludes = fileset.useDefaultExcludes;        this.caseSensitive = fileset.caseSensitive;        this.followSymlinks = fileset.followSymlinks;        this.errorOnMissingDir = fileset.errorOnMissingDir;        this.maxLevelsOfSymlinks = fileset.maxLevelsOfSymlinks;        setProject(fileset.getProject());    }
Clone class 27, 2 fragments, nominal size 12 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/Target.java    public void setIf(Condition condition) {        if (ifCondition == null) {            ifCondition = condition;        } else {            And andCondition = new And();            andCondition.setProject(getProject());            andCondition.setLocation(getLocation());            andCondition.add(ifCondition);            andCondition.add(condition);            ifCondition = andCondition;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/Target.java    public void setUnless(Condition condition) {        if (unlessCondition == null) {            unlessCondition = condition;        } else {            Or orCondition = new Or();            orCondition.setProject(getProject());            orCondition.setLocation(getLocation());            orCondition.add(unlessCondition);            orCondition.add(condition);            unlessCondition = orCondition;        }    }
Clone class 28, 2 fragments, nominal size 14 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java    protected OutputStream getOutputStream() {        if (this.outputStream == null) {            if (output != null) {                try {                    setOutputStream(new PrintStream(                                        new BufferedOutputStream(                                            new FileOutputStream(output                                                                 .getPath(),                                                                 append))));                } catch (IOException e) {                    throw new BuildException(e, getLocation());                }            } else {                setOutputStream(new LogOutputStream(this, Project.MSG_INFO));            }        }        return this.outputStream;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java    protected OutputStream getErrorStream() {        if (this.errorStream == null) {            if (error != null) {                try {                    setErrorStream(new PrintStream(                                       new BufferedOutputStream(                                           new FileOutputStream(error.getPath(),                                                                append))));                } catch (IOException e) {                    throw new BuildException(e, getLocation());                }            } else {                setErrorStream(new LogOutputStream(this, Project.MSG_WARN));            }        }        return this.errorStream;    }
Clone class 29, 2 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/AntStructure.java        public static final boolean isNmtoken(final String s) {            final int length = s.length();            for (int i = 0; i < length; i++) {                final char c = s.charAt(i);                // TODO - we are committing CombiningChar and Extender here                if (!Character.isLetterOrDigit(c)                    && c != '.' && c != '-' && c != '_' && c != ':') {                    return false;                }            }            return true;        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Replace.java    private boolean processFilterChain() {        final int size = replacefilters.size();        for (int i = 0; i < size; i++) {            Replacefilter filter = (Replacefilter) replacefilters.get(i);            if (!filter.process()) {                return false;            }        }        return true;    }
Clone class 30, 3 fragments, nominal size 10 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Concat.java    public void add(ResourceCollection c) {        synchronized (this) {            if (rc == null) {                rc = new Resources();                rc.setProject(getProject());                rc.setCache(true);            }        }        rc.add(c);    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Delete.java    public void add(ResourceCollection rc) {        if (rc == null) {            return;        }        if (rcs == null) {            rcs = new Resources();            rcs.setCache(true);        }        rcs.add(rc);    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/SQLExec.java    public void add(ResourceCollection rc) {        if (rc == null) {            throw new BuildException("Cannot add null ResourceCollection");        }        synchronized (this) {            if (resources == null) {                resources = new Union();            }        }        resources.add(rc);    }
Clone class 31, 2 fragments, nominal size 10 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/condition/And.java    public boolean eval() throws BuildException {        Enumeration e = getConditions();        while (e.hasMoreElements()) {            Condition c = (Condition) e.nextElement();            if (!c.eval()) {                return false;            }        }        return true;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/condition/Or.java    public boolean eval() throws BuildException {        Enumeration e = getConditions();        while (e.hasMoreElements()) {            Condition c = (Condition) e.nextElement();            if (c.eval()) {                return true;            }        }        return false;    }
Clone class 32, 3 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/condition/HasMethod.java    private boolean isFieldFound(Class clazz) {        Field[] fields = clazz.getDeclaredFields();        for (int i = 0; i < fields.length; i++) {            Field fieldEntry = fields[i];            if (fieldEntry.getName().equals(field)) {                return true;            }        }        return false;    }
apache_ant/ant/src/main/org/apache/tools/ant/util/SplitClassLoader.java    private boolean isSplit(String classname) {        String simplename = classname.substring(classname.lastIndexOf('.') + 1);        for (int i = 0; i < splitClasses.length; i++) {            if (simplename.equals(splitClasses[i])                || simplename.startsWith(splitClasses[i] + '$')) {                return true;            }        }        return false;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/condition/HasMethod.java    private boolean isMethodFound(Class clazz) {        Method[] methods = clazz.getDeclaredMethods();        for (int i = 0; i < methods.length; i++) {            Method methodEntry = methods[i];            if (methodEntry.getName().equals(method)) {                return true;            }        }        return false;    }
Clone class 33, 2 fragments, nominal size 11 lines, similarity 90%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/condition/IsLastModified.java    public void setPattern(final String pattern) {        dfFactory = new Touch.DateFormatFactory() {            public DateFormat getPrimaryFormat() {                return new SimpleDateFormat(pattern);            }            public DateFormat getFallbackFormat() {                return null;            }        };    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Touch.java    public void setPattern(final String pattern) {        dfFactory = new DateFormatFactory() {            public DateFormat getPrimaryFormat() {                return new SimpleDateFormat(pattern);            }            public DateFormat getFallbackFormat() {                return null;            }        };    }
Clone class 34, 2 fragments, nominal size 15 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/condition/ParserSupports.java    public boolean evalFeature() {        XMLReader reader = getReader();        if (value == null) {            value = "true";        }        boolean v = Project.toBoolean(value);        try {            reader.setFeature(feature, v);        } catch (SAXNotRecognizedException e) {            log(FEATURE + NOT_RECOGNIZED + feature, Project.MSG_VERBOSE);            return false;        } catch (SAXNotSupportedException e) {            log(FEATURE + NOT_SUPPORTED + feature, Project.MSG_VERBOSE);            return false;        }        return true;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/condition/ParserSupports.java    public boolean evalProperty() {        XMLReader reader = getReader();        try {            reader.setProperty(property, value);        } catch (SAXNotRecognizedException e) {            log(PROPERTY + NOT_RECOGNIZED + property, Project.MSG_VERBOSE);            return false;        } catch (SAXNotSupportedException e) {            log(PROPERTY + NOT_SUPPORTED + property, Project.MSG_VERBOSE);            return false;        }        return true;    }
Clone class 35, 2 fragments, nominal size 18 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java    private boolean doFileIsNew(Vector entries, String line) {        int index = line.indexOf(FILE_IS_NEW);        if (index == -1) {            return false;        }        // it is a new file        // set the revision but not the prevrevision        String filename = line.substring(0, index);        String rev = null;        int indexrev = line.indexOf(REVISION, index);        if (indexrev != -1) {            rev = line.substring(indexrev + REVISION.length());        }        CvsTagEntry entry = new CvsTagEntry(filename, rev);        entries.addElement(entry);        log(entry.toString(), Project.MSG_VERBOSE);        return true;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java    private boolean doFileWasRemoved(Vector entries, String line) {        if (ignoreRemoved) {            return false;        }        int index = line.indexOf(FILE_WAS_REMOVED);        if (index == -1) {            return false;        }        // it is a removed file        String filename = line.substring(0, index);        String rev = null;        int indexrev = line.indexOf(REVISION, index);        if (indexrev != -1) {            rev = line.substring(indexrev + REVISION.length());        }        CvsTagEntry entry = new CvsTagEntry(filename, null, rev);        entries.addElement(entry);        log(entry.toString(), Project.MSG_VERBOSE);        return true;    }
Clone class 36, 3 fragments, nominal size 10 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/cvslib/CvsUser.java    public void validate() throws BuildException {        if (null == userID) {            final String message = "Username attribute must be set.";            throw new BuildException(message);        }        if (null == displayName) {            final String message =                "Displayname attribute must be set for userID " + userID;            throw new BuildException(message);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/extension/resolvers/AntResolver.java    private void validate() {        if (null == antfile) {            final String message = "Must specify Buildfile";            throw new BuildException(message);        }        if (null == destfile) {            final String message = "Must specify destination file";            throw new BuildException(message);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibResolveTask.java    private void validate() throws BuildException {        if (null == propertyName) {            final String message = "Property attribute must be specified.";            throw new BuildException(message);        }        if (null == requiredExtension) {            final String message = "Extension element must be specified.";            throw new BuildException(message);        }    }
Clone class 37, 2 fragments, nominal size 10 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Ear.java    public void setAppxml(File descr) {        deploymentDescriptor = descr;        if (!deploymentDescriptor.exists()) {            throw new BuildException("Deployment descriptor: "                                     + deploymentDescriptor                                     + " does not exist.");        }        // Create a ZipFileSet for this file, and pass it up.        ZipFileSet fs = new ZipFileSet();        fs.setFile(deploymentDescriptor);        fs.setFullpath(XML_DESCRIPTOR_PATH);        super.addFileset(fs);    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/War.java    public void setWebxml(File descr) {        deploymentDescriptor = descr;        if (!deploymentDescriptor.exists()) {            throw new BuildException("Deployment descriptor: "                                     + deploymentDescriptor                                     + " does not exist.");        }        // Create a ZipFileSet for this file, and pass it up.        ZipFileSet fs = new ZipFileSet();        fs.setFile(deploymentDescriptor);        fs.setFullpath(XML_DESCRIPTOR_PATH);        super.addFileset(fs);    }
Clone class 38, 2 fragments, nominal size 17 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Jar.java    private Manifest getManifestFromJar(File jarFile) throws IOException {        ZipFile zf = null;        try {            zf = new ZipFile(jarFile);            // must not use getEntry as "well behaving" applications            // must accept the manifest in any capitalization            Enumeration<? extends ZipEntry> e = zf.entries();            while (e.hasMoreElements()) {                ZipEntry ze = e.nextElement();                if (ze.getName().equalsIgnoreCase(MANIFEST_NAME)) {                    InputStreamReader isr =                        new InputStreamReader(zf.getInputStream(ze), "UTF-8");                    return getManifest(isr);                }            }            return null;        } finally {            FileUtils.close(zf);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Jar.java    private boolean jarHasIndex(File jarFile) throws IOException {        ZipFile zf = null;        try {            zf = new ZipFile(jarFile);            Enumeration<? extends ZipEntry> e = zf.entries();            while (e.hasMoreElements()) {                ZipEntry ze = e.nextElement();                if (ze.getName().equalsIgnoreCase(INDEX_NAME)) {                    return true;                }            }            return false;        } finally {            FileUtils.close(zf);        }    }
Clone class 39, 2 fragments, nominal size 23 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/launcher/PerlScriptCommandLauncher.java    public Process exec(Project project, String[] cmd, String[] env,                        File workingDir) throws IOException {        if (project == null) {            if (workingDir == null) {                return exec(project, cmd, env);            }            throw new IOException("Cannot locate antRun script: "                                  + "No project provided");        }        // Locate the auxiliary script        String antHome = project.getProperty(MagicNames.ANT_HOME);        if (antHome == null) {            throw new IOException("Cannot locate antRun script: "                                  + "Property '" + MagicNames.ANT_HOME                                  + "' not found");        }        String antRun = FILE_UTILS.resolveFile(project.getBaseDir(),                                               antHome + File.separator                                               + myScript).toString();        // Build the command        File commandDir = workingDir;        if (workingDir == null) {            commandDir = project.getBaseDir();        }        // CheckStyle:MagicNumber OFF        String[] newcmd = new String[cmd.length + 3];        newcmd[0] = "perl";        newcmd[1] = antRun;        newcmd[2] = commandDir.getAbsolutePath();        System.arraycopy(cmd, 0, newcmd, 3, cmd.length);        // CheckStyle:MagicNumber ON        return exec(project, newcmd, env);    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/launcher/ScriptCommandLauncher.java    public Process exec(Project project, String[] cmd, String[] env,                        File workingDir) throws IOException {        if (project == null) {            if (workingDir == null) {                return exec(project, cmd, env);            }            throw new IOException("Cannot locate antRun script: "                                  + "No project provided");        }        // Locate the auxiliary script        String antHome = project.getProperty(MagicNames.ANT_HOME);        if (antHome == null) {            throw new IOException("Cannot locate antRun script: "                                  + "Property '" + MagicNames.ANT_HOME                                  + "' not found");        }        String antRun = FILE_UTILS.resolveFile(project.getBaseDir(),                                               antHome + File.separator                                               + myScript).toString();        // Build the command        File commandDir = workingDir;        if (workingDir == null) {            commandDir = project.getBaseDir();        }        String[] newcmd = new String[cmd.length + 2];        newcmd[0] = antRun;        newcmd[1] = commandDir.getAbsolutePath();        System.arraycopy(cmd, 0, newcmd, 2, cmd.length);        return exec(project, newcmd, env);    }
Clone class 40, 2 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/MacroDef.java        public boolean equals(Object obj) {            if (obj == this) {              return true;            }            if (obj == null || !obj.getClass().equals(getClass())) {                return false;            }            TemplateElement t = (TemplateElement) obj;            return                (name == null ? t.name == null : name.equals(t.name))                && optional == t.optional                && implicit == t.implicit;        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ssh/Directory.java    public boolean equals(Object obj) {        if (obj == this) {            return true;        }        if (!(obj instanceof Directory)) {            return false;        }        Directory d = (Directory) obj;        return this.directory.equals(d.directory);    }
Clone class 41, 2 fragments, nominal size 24 lines, similarity 91%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/MakeUrl.java    private String filesetsToURL() {        if (filesets.isEmpty()) {            return "";        }        int count = 0;        StringBuilder urls = new StringBuilder();        ListIterator<FileSet> list = filesets.listIterator();        while (list.hasNext()) {            FileSet set = list.next();            DirectoryScanner scanner = set.getDirectoryScanner(getProject());            String[] files = scanner.getIncludedFiles();            for (int i = 0; i < files.length; i++) {                File f = new File(scanner.getBasedir(), files[i]);                validateFile(f);                String asUrl = toURL(f);                urls.append(asUrl);                log(asUrl, Project.MSG_DEBUG);                urls.append(separator);                count++;            }        }        //at this point there is one trailing space to remove, if the list is not empty.        return stripTrailingSeparator(urls, count);    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/MakeUrl.java    private String pathsToURL() {        if (paths.isEmpty()) {            return "";        }        int count = 0;        StringBuilder urls = new StringBuilder();        ListIterator<Path> list = paths.listIterator();        while (list.hasNext()) {            Path path = list.next();            String[] elements = path.list();            for (int i = 0; i < elements.length; i++) {                File f = new File(elements[i]);                validateFile(f);                String asUrl = toURL(f);                urls.append(asUrl);                log(asUrl, Project.MSG_DEBUG);                urls.append(separator);                count++;            }        }        //at this point there is one trailing space to remove, if the list is not empty.        return stripTrailingSeparator(urls, count);    }
Clone class 42, 2 fragments, nominal size 14 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java    protected void addClasspathEntry(String resource) {        /*         * pre Ant 1.6 this method used to call getClass().getResource         * while Ant 1.6 will call ClassLoader.getResource().         *         * The difference is that Class.getResource expects a leading         * slash for "absolute" resources and will strip it before         * delegating to ClassLoader.getResource - so we now have to         * emulate Class's behavior.         */        if (resource.startsWith("/")) {            resource = resource.substring(1);        } else {            resource = "org/apache/tools/ant/taskdefs/optional/"                + resource;        }        File f = LoaderUtils.getResourceSource(getClass().getClassLoader(),                                               resource);        if (f != null) {            log("Found " + f.getAbsolutePath(), Project.MSG_DEBUG);            createClasspath().setLocation(f);        } else {            log("Couldn\'t find " + resource, Project.MSG_VERBOSE);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java    private void addClasspathEntry(String resource) {        /*         * pre Ant 1.6 this method used to call getClass().getResource         * while Ant 1.6 will call ClassLoader.getResource().         *         * The difference is that Class.getResource expects a leading         * slash for "absolute" resources and will strip it before         * delegating to ClassLoader.getResource - so we now have to         * emulate Class's behavior.         */        if (resource.startsWith("/")) {            resource = resource.substring(1);        } else {            resource = "org/apache/tools/ant/taskdefs/optional/jdepend/"                + resource;        }        File f = LoaderUtils.getResourceSource(getClass().getClassLoader(),                                               resource);        if (f != null) {            log("Found " + f.getAbsolutePath(), Project.MSG_DEBUG);            runtimeClasses.createPath().setLocation(f);        } else {            log("Couldn\'t find " + resource, Project.MSG_DEBUG);        }    }
Clone class 43, 2 fragments, nominal size 12 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ccm/CCMCheck.java    private void doit() {        Commandline commandLine = new Commandline();        // build the command line from what we got the format is        // ccm co /t .. files        // as specified in the CCM.EXE help        commandLine.setExecutable(getCcmCommand());        commandLine.createArgument().setValue(getCcmAction());        checkOptions(commandLine);        int result = run(commandLine);        if (Execute.isFailure(result)) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ccm/CCMReconfigure.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        int result = 0;        // build the command line from what we got the format        // as specified in the CCM.EXE help        commandLine.setExecutable(getCcmCommand());        commandLine.createArgument().setValue(getCcmAction());        checkOptions(commandLine);        result = run(commandLine);        if (Execute.isFailure(result)) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
Clone class 44, 4 fragments, nominal size 12 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ccm/Continuus.java    protected int run(Commandline cmd, ExecuteStreamHandler handler) {        try {            Execute exe = new Execute(handler);            exe.setAntRun(getProject());            exe.setWorkingDirectory(getProject().getBaseDir());            exe.setCommandline(cmd.getCommandline());            return exe.execute();        } catch (java.io.IOException e) {            throw new BuildException(e, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/sos/SOS.java    protected int run(Commandline cmd) {        try {            Execute exe = new Execute(new LogStreamHandler(this,                    Project.MSG_INFO,                    Project.MSG_WARN));            exe.setAntRun(getProject());            exe.setWorkingDirectory(getProject().getBaseDir());            exe.setCommandline(cmd.getCommandline());            exe.setVMLauncher(false);  // Use the OS VM launcher so we get environment variables            return exe.execute();        } catch (java.io.IOException e) {            throw new BuildException(e, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/ClearCase.java    protected int run(Commandline cmd) {        try {            Project aProj = getProject();            Execute exe                = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));            exe.setAntRun(aProj);            exe.setWorkingDirectory(aProj.getBaseDir());            exe.setCommandline(cmd.getCommandline());            return exe.execute();        } catch (java.io.IOException e) {            throw new BuildException(e, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java    protected int runCmd(Commandline cmd, ExecuteStreamHandler out) {        try {            Project aProj = getProject();            Execute exe = new Execute(out);            exe.setAntRun(aProj);            exe.setWorkingDirectory(aProj.getBaseDir());            exe.setCommandline(cmd.getCommandline());            return exe.execute();        } catch (java.io.IOException e) {            String msg = "Failed executing: " + cmd.toString()                + ". Exception: " + e.getMessage();            throw new BuildException(msg, getLocation());        }    }
Clone class 45, 13 fragments, nominal size 19 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCCheckin.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got. the format is        // cleartool checkin [options...] [viewpath ...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_CHECKIN);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getViewPathBasename(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkattr.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Check for required attributes        if (getTypeName() == null) {            throw new BuildException("Required attribute TypeName not specified");        }        if (getTypeValue() == null) {            throw new BuildException("Required attribute TypeValue not specified");        }        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got. the format is        // cleartool mkattr [options...] [viewpath ...]        // as specified in the CLEARTOOL help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_MKATTR);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getViewPathBasename(), Project.MSG_VERBOSE);        }        // For debugging        // System.out.println(commandLine.toString());        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCLock.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got the format is        // cleartool lock [options...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_LOCK);        // Check the command line options        checkOptions(commandLine);        // For debugging        // System.out.println(commandLine.toString());        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getOpType(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkbl.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got. the format is        // cleartool checkin [options...] [viewpath ...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_MKBL);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getBaselineRootName(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCUpdate.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got the format is        // cleartool update [options...] [viewpath ...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_UPDATE);        // Check the command line options        checkOptions(commandLine);        // For debugging        getProject().log(commandLine.toString(), Project.MSG_DEBUG);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getViewPathBasename(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkdir.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got. the format is        // cleartool mkelem [options...] [viewpath ...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_MKDIR);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getViewPathBasename(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMklbtype.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        int result = 0;        // Check for required attributes        if (getTypeName() == null) {            throw new BuildException("Required attribute TypeName not specified");        }        // build the command line from what we got. the format is        // cleartool mklbtype [options...] type-selector...        // as specified in the CLEARTOOL help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_MKLBTYPE);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getTypeSpecifier(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMklabel.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Check for required attributes        if (getTypeName() == null) {            throw new BuildException("Required attribute TypeName not specified");        }        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got. the format is        // cleartool mklabel [options...] [viewpath ...]        // as specified in the CLEARTOOL help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_MKLABEL);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getViewPathBasename(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCUnCheckout.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got the format is        // cleartool uncheckout [options...] [viewpath ...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_UNCHECKOUT);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getViewPathBasename(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCCheckout.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got the format is        // cleartool checkout [options...] [viewpath ...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_CHECKOUT);        checkOptions(commandLine);        /*         * If configured to not care about whether the element is         * already checked out to the current view.         * Then check to see if it is checked out.         */        if (!getNotco() && lsCheckout()) {            getProject().log("Already checked out in this view: "                    + getViewPathBasename(), Project.MSG_VERBOSE);            return;        }        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getViewPathBasename(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCUnlock.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got the format is        // cleartool lock [options...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_UNLOCK);        // Check the command line options        checkOptions(commandLine);        // For debugging        // System.out.println(commandLine.toString());        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getOpType(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkelem.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        Project aProj = getProject();        int result = 0;        // Default the viewpath to basedir if it is not specified        if (getViewPath() == null) {            setViewPath(aProj.getBaseDir().getPath());        }        // build the command line from what we got. the format is        // cleartool mkelem [options...] [viewpath ...]        // as specified in the CLEARTOOL.EXE help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_MKELEM);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getViewPathBasename(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCRmtype.java    public void execute() throws BuildException {        Commandline commandLine = new Commandline();        int result = 0;        // Check for required attributes        if (getTypeKind() == null) {            throw new BuildException("Required attribute TypeKind not specified");        }        if (getTypeName() == null) {            throw new BuildException("Required attribute TypeName not specified");        }        // build the command line from what we got. the format is        // cleartool rmtype [options...] type-selector...        // as specified in the CLEARTOOL help        commandLine.setExecutable(getClearToolCommand());        commandLine.createArgument().setValue(COMMAND_RMTYPE);        checkOptions(commandLine);        if (!getFailOnErr()) {            getProject().log("Ignoring any errors that occur for: "                    + getTypeSpecifier(), Project.MSG_VERBOSE);        }        result = run(commandLine);        if (Execute.isFailure(result) && getFailOnErr()) {            String msg = "Failed executing: " + commandLine.toString();            throw new BuildException(msg, getLocation());        }    }
Clone class 46, 3 fragments, nominal size 25 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCCheckin.java    private void checkOptions(Commandline cmd) {        if (getComment() != null) {            // -c            getCommentCommand(cmd);        } else {            if (getCommentFile() != null) {                // -cfile                getCommentFileCommand(cmd);            } else {                cmd.createArgument().setValue(FLAG_NOCOMMENT);            }        }        if (getNoWarn()) {            // -nwarn            cmd.createArgument().setValue(FLAG_NOWARN);        }        if (getPreserveTime()) {            // -ptime            cmd.createArgument().setValue(FLAG_PRESERVETIME);        }        if (getKeepCopy()) {            // -keep            cmd.createArgument().setValue(FLAG_KEEPCOPY);        }        if (getIdentical()) {            // -identical            cmd.createArgument().setValue(FLAG_IDENTICAL);        }        // viewpath        cmd.createArgument().setValue(getViewPath());    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkbl.java    private void checkOptions(Commandline cmd) {        if (getComment() != null) {            // -c            getCommentCommand(cmd);        } else {            if (getCommentFile() != null) {                // -cfile                getCommentFileCommand(cmd);            } else {                cmd.createArgument().setValue(FLAG_NOCOMMENT);            }        }        if (getIdentical()) {            // -identical            cmd.createArgument().setValue(FLAG_IDENTICAL);        }       if (getFull()) {           // -full           cmd.createArgument().setValue(FLAG_FULL);       } else {           // -incremental           cmd.createArgument().setValue(FLAG_INCREMENTAL);       }       if (getNlabel()) {           // -nlabel           cmd.createArgument().setValue(FLAG_NLABEL);       }       // baseline_root_name        cmd.createArgument().setValue(getBaselineRootName());    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkelem.java    private void checkOptions(Commandline cmd) {        if (getComment() != null) {            // -c            getCommentCommand(cmd);        } else {            if (getCommentFile() != null) {                // -cfile                getCommentFileCommand(cmd);            } else {                cmd.createArgument().setValue(FLAG_NOCOMMENT);            }        }        if (getNoWarn()) {            // -nwarn            cmd.createArgument().setValue(FLAG_NOWARN);        }        /*         * Should choose either -ci or -nco.         */        if (getNoCheckout() && getCheckin()) {            throw new BuildException("Should choose either [nocheckout | checkin]");        }        if (getNoCheckout()) {            // -nco            cmd.createArgument().setValue(FLAG_NOCHECKOUT);        }        if (getCheckin()) {            // -ci            cmd.createArgument().setValue(FLAG_CHECKIN);            if (getPreserveTime()) {                // -ptime                cmd.createArgument().setValue(FLAG_PRESERVETIME);            }        }        if (getMaster()) {            // -master            cmd.createArgument().setValue(FLAG_MASTER);        }        if (getEltype() != null) {            // -eltype            getEltypeCommand(cmd);        }        // viewpath        cmd.createArgument().setValue(getViewPath());    }
Clone class 47, 2 fragments, nominal size 31 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCCheckout.java    private void checkOptions(Commandline cmd) {        // ClearCase items        if (getReserved()) {            // -reserved            cmd.createArgument().setValue(FLAG_RESERVED);        } else {            // -unreserved            cmd.createArgument().setValue(FLAG_UNRESERVED);        }        if (getOut() != null) {            // -out            getOutCommand(cmd);        } else {            if (getNoData()) {                // -ndata                cmd.createArgument().setValue(FLAG_NODATA);            }        }        if (getBranch() != null) {            // -branch            getBranchCommand(cmd);        } else {            if (getVersion()) {                // -version                cmd.createArgument().setValue(FLAG_VERSION);            }        }        if (getNoWarn()) {            // -nwarn            cmd.createArgument().setValue(FLAG_NOWARN);        }        if (getComment() != null) {            // -c            getCommentCommand(cmd);        } else {            if (getCommentFile() != null) {                // -cfile                getCommentFileCommand(cmd);            } else {                cmd.createArgument().setValue(FLAG_NOCOMMENT);            }        }        // viewpath        cmd.createArgument().setValue(getViewPath());        // Print out info about the notco option        // System.out.println( "Notco: " + (getNotco() ? "yes" : "no") );    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMklbtype.java    private void checkOptions(Commandline cmd) {        if (getReplace()) {            // -replace            cmd.createArgument().setValue(FLAG_REPLACE);        }        if (getOrdinary()) {            // -ordinary            cmd.createArgument().setValue(FLAG_ORDINARY);        } else {            if (getGlobal()) {                // -global                cmd.createArgument().setValue(FLAG_GLOBAL);            }        }        if (getPbranch()) {            // -pbranch            cmd.createArgument().setValue(FLAG_PBRANCH);        }        if (getShared()) {            // -shared            cmd.createArgument().setValue(FLAG_SHARED);        }        if (getComment() != null) {            // -c            getCommentCommand(cmd);        } else {            if (getCommentFile() != null) {                // -cfile                getCommentFileCommand(cmd);            } else {                cmd.createArgument().setValue(FLAG_NOCOMMENT);            }        }        // type-name@vob        cmd.createArgument().setValue(getTypeSpecifier());    }
Clone class 48, 3 fragments, nominal size 24 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkattr.java    private void checkOptions(Commandline cmd) {        if (getReplace()) {            // -replace            cmd.createArgument().setValue(FLAG_REPLACE);        }        if (getRecurse()) {            // -recurse            cmd.createArgument().setValue(FLAG_RECURSE);        }        if (getVersion() != null) {            // -version            getVersionCommand(cmd);        }        if (getComment() != null) {            // -c            getCommentCommand(cmd);        } else {            if (getCommentFile() != null) {                // -cfile                getCommentFileCommand(cmd);            } else {                cmd.createArgument().setValue(FLAG_NOCOMMENT);            }        }        if (getTypeName() != null) {            // type            getTypeCommand(cmd);        }        if (getTypeValue() != null) {            // type value            getTypeValueCommand(cmd);        }        // viewpath        cmd.createArgument().setValue(getViewPath());    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMklabel.java    private void checkOptions(Commandline cmd) {        if (getReplace()) {            // -replace            cmd.createArgument().setValue(FLAG_REPLACE);        }        if (getRecurse()) {            // -recurse            cmd.createArgument().setValue(FLAG_RECURSE);        }        if (getVersion() != null) {            // -version            getVersionCommand(cmd);        }        if (getComment() != null) {            // -c            getCommentCommand(cmd);        } else {            if (getCommentFile() != null) {                // -cfile                getCommentFileCommand(cmd);            } else {                cmd.createArgument().setValue(FLAG_NOCOMMENT);            }        }        if (getTypeName() != null) {            // type            getTypeCommand(cmd);        }        // viewpath        cmd.createArgument().setValue(getViewPath());    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCRmtype.java    private void checkOptions(Commandline cmd) {        if (getIgnore()) {            // -ignore            cmd.createArgument().setValue(FLAG_IGNORE);        }        if (getRmAll()) {            // -rmall -force            cmd.createArgument().setValue(FLAG_RMALL);            cmd.createArgument().setValue(FLAG_FORCE);        }        if (getComment() != null) {            // -c            getCommentCommand(cmd);        } else {            if (getCommentFile() != null) {                // -cfile                getCommentFileCommand(cmd);            } else {                cmd.createArgument().setValue(FLAG_NOCOMMENT);            }        }        // type-kind:type-name        cmd.createArgument().setValue(getTypeSpecifier());    }
Clone class 49, 6 fragments, nominal size 15 lines, similarity 86%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPool.java    public int getClassEntry(String className) {        int index = -1;        final int size = entries.size();        for (int i = 0; i < size && index == -1; ++i) {            Object element = entries.get(i);            if (element instanceof ClassCPInfo) {                ClassCPInfo classinfo = (ClassCPInfo) element;                if (classinfo.getClassName().equals(className)) {                    index = i;                }            }        }        return index;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPool.java    public int getFieldRefEntry(String fieldClassName, String fieldName,                                String fieldType) {        int index = -1;        final int size = entries.size();        for (int i = 0; i < size && index == -1; ++i) {            Object element = entries.get(i);            if (element instanceof FieldRefCPInfo) {                FieldRefCPInfo fieldRefEntry = (FieldRefCPInfo) element;                if (fieldRefEntry.getFieldClassName().equals(fieldClassName)                     && fieldRefEntry.getFieldName().equals(fieldName)                     && fieldRefEntry.getFieldType().equals(fieldType)) {                    index = i;                }            }        }        return index;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPool.java    public int getMethodRefEntry(String methodClassName, String methodName,                                 String methodType) {        int index = -1;        final int size = entries.size();        for (int i = 0; i < size && index == -1; ++i) {            Object element = entries.get(i);            if (element instanceof MethodRefCPInfo) {                MethodRefCPInfo methodRefEntry = (MethodRefCPInfo) element;                if (methodRefEntry.getMethodClassName().equals(methodClassName)                     && methodRefEntry.getMethodName().equals(methodName)                     && methodRefEntry.getMethodType().equals(methodType)) {                    index = i;                }            }        }        return index;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPool.java    public int getInterfaceMethodRefEntry(String interfaceMethodClassName,                                          String interfaceMethodName,                                          String interfaceMethodType) {        int index = -1;        final int size = entries.size();        for (int i = 0; i < size && index == -1; ++i) {            Object element = entries.get(i);            if (element instanceof InterfaceMethodRefCPInfo) {                InterfaceMethodRefCPInfo interfaceMethodRefEntry                     = (InterfaceMethodRefCPInfo) element;                if (interfaceMethodRefEntry.getInterfaceMethodClassName().equals(                        interfaceMethodClassName)                     && interfaceMethodRefEntry.getInterfaceMethodName().equals(                         interfaceMethodName)                     && interfaceMethodRefEntry.getInterfaceMethodType().equals(                         interfaceMethodType)) {                    index = i;                }            }        }        return index;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPool.java    public int getConstantEntry(Object constantValue) {        int index = -1;        final int size = entries.size();        for (int i = 0; i < size && index == -1; ++i) {            Object element = entries.get(i);            if (element instanceof ConstantCPInfo) {                ConstantCPInfo constantEntry = (ConstantCPInfo) element;                if (constantEntry.getValue().equals(constantValue)) {                    index = i;                }            }        }        return index;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPool.java    public int getNameAndTypeEntry(String name, String type) {        int index = -1;        final int size = entries.size();        for (int i = 0; i < size && index == -1; ++i) {            Object element = entries.get(i);            if (element instanceof NameAndTypeCPInfo) {                NameAndTypeCPInfo nameAndTypeEntry                    = (NameAndTypeCPInfo) element;                if (nameAndTypeEntry.getName().equals(name)                     && nameAndTypeEntry.getType().equals(type)) {                    index = i;                }            }        }        return index;    }
Clone class 50, 3 fragments, nominal size 10 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/FieldRefCPInfo.java    public void resolve(ConstantPool constantPool) {        ClassCPInfo fieldClass            = (ClassCPInfo) constantPool.getEntry(classIndex);        fieldClass.resolve(constantPool);        fieldClassName = fieldClass.getClassName();        NameAndTypeCPInfo nt            = (NameAndTypeCPInfo) constantPool.getEntry(nameAndTypeIndex);        nt.resolve(constantPool);        fieldName = nt.getName();        fieldType = nt.getType();        super.resolve(constantPool);    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/MethodRefCPInfo.java    public void resolve(ConstantPool constantPool) {        ClassCPInfo methodClass             = (ClassCPInfo) constantPool.getEntry(classIndex);        methodClass.resolve(constantPool);        methodClassName = methodClass.getClassName();        NameAndTypeCPInfo nt             = (NameAndTypeCPInfo) constantPool.getEntry(nameAndTypeIndex);        nt.resolve(constantPool);        methodName = nt.getName();        methodType = nt.getType();        super.resolve(constantPool);    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/InterfaceMethodRefCPInfo.java    public void resolve(ConstantPool constantPool) {        ClassCPInfo interfaceMethodClass             = (ClassCPInfo) constantPool.getEntry(classIndex);        interfaceMethodClass.resolve(constantPool);        interfaceMethodClassName = interfaceMethodClass.getClassName();        NameAndTypeCPInfo nt             = (NameAndTypeCPInfo) constantPool.getEntry(nameAndTypeIndex);        nt.resolve(constantPool);        interfaceMethodName = nt.getName();        interfaceMethodType = nt.getType();        super.resolve(constantPool);    }
Clone class 51, 2 fragments, nominal size 23 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandDeploymentTool.java    protected DescriptorHandler getBorlandDescriptorHandler(final File srcDir) {        DescriptorHandler handler =            new DescriptorHandler(getTask(), srcDir) {                    protected void processElement() {                        if (currentElement.equals("type-storage")) {                            // Get the filename of vendor specific descriptor                            String fileNameWithMETA = currentText;                            //trim the META_INF\ off of the file name                            String fileName                                = fileNameWithMETA.substring(META_DIR.length(),                                    fileNameWithMETA.length());                            File descriptorFile = new File(srcDir, fileName);                            ejbFiles.put(fileNameWithMETA, descriptorFile);                        }                    }                };        handler.registerDTD(PUBLICID_BORLAND_EJB,                            borlandDTD == null ? DEFAULT_BAS_DTD_LOCATION : borlandDTD);        for (Iterator i = getConfig().dtdLocations.iterator(); i.hasNext();) {            EjbJar.DTDLocation dtdLocation = (EjbJar.DTDLocation) i.next();            handler.registerDTD(dtdLocation.getPublicId(), dtdLocation.getLocation());        }        return handler;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java    protected DescriptorHandler getWeblogicDescriptorHandler(final File srcDir) {        DescriptorHandler handler =            new DescriptorHandler(getTask(), srcDir) {                protected void processElement() {                    if (currentElement.equals("type-storage")) {                        // Get the filename of vendor specific descriptor                        String fileNameWithMETA = currentText;                        //trim the META_INF\ off of the file name                        String fileName                             = fileNameWithMETA.substring(META_DIR.length(),                            fileNameWithMETA.length());                        File descriptorFile = new File(srcDir, fileName);                        ejbFiles.put(fileNameWithMETA, descriptorFile);                    }                }            };        handler.registerDTD(PUBLICID_WEBLOGIC_EJB510, DEFAULT_WL51_DTD_LOCATION);        handler.registerDTD(PUBLICID_WEBLOGIC_EJB510, DEFAULT_WL60_51_DTD_LOCATION);        handler.registerDTD(PUBLICID_WEBLOGIC_EJB600, DEFAULT_WL60_DTD_LOCATION);        handler.registerDTD(PUBLICID_WEBLOGIC_EJB700, DEFAULT_WL70_DTD_LOCATION);        handler.registerDTD(PUBLICID_WEBLOGIC_EJB510, weblogicDTD);        handler.registerDTD(PUBLICID_WEBLOGIC_EJB600, weblogicDTD);        for (Iterator i = getConfig().dtdLocations.iterator(); i.hasNext();) {            EjbJar.DTDLocation dtdLocation = (EjbJar.DTDLocation) i.next();            handler.registerDTD(dtdLocation.getPublicId(), dtdLocation.getLocation());        }        return handler;    }
Clone class 52, 2 fragments, nominal size 23 lines, similarity 73%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandGenerateClient.java    protected  void executeForkV4() throws BuildException {        try {            log("mode : fork " + BorlandDeploymentTool.BAS, Project.MSG_DEBUG);            ExecTask execTask = new ExecTask(this);            execTask.setDir(new File("."));            execTask.setExecutable("iastool");            execTask.createArg().setValue("generateclient");            if (debug) {                execTask.createArg().setValue("-trace");            }            execTask.createArg().setValue("-short");            execTask.createArg().setValue("-jarfile");            // ejb jar file            execTask.createArg().setValue(ejbjarfile.getAbsolutePath());            //client jar file            execTask.createArg().setValue("-single");            execTask.createArg().setValue("-clientjarfile");            execTask.createArg().setValue(clientjarfile.getAbsolutePath());            log("Calling iastool", Project.MSG_VERBOSE);            execTask.execute();        } catch (Exception e) {            // Have to catch this because of the semantics of calling main()            String msg = "Exception while calling generateclient Details: "                + e.toString();            throw new BuildException(msg, e);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandGenerateClient.java    protected  void executeForkV5() throws BuildException {        try {            log("mode : fork " + BorlandDeploymentTool.BES, Project.MSG_DEBUG);            ExecTask execTask = new ExecTask(this);            execTask.setDir(new File("."));            execTask.setExecutable("iastool");            if (debug) {                execTask.createArg().setValue("-debug");            }            execTask.createArg().setValue("-genclient");            execTask.createArg().setValue("-jars");            // ejb jar file            execTask.createArg().setValue(ejbjarfile.getAbsolutePath());            //client jar file            execTask.createArg().setValue("-target");            execTask.createArg().setValue(clientjarfile.getAbsolutePath());            //classpath            execTask.createArg().setValue("-cp");            execTask.createArg().setValue(classpath.toString());            log("Calling iastool", Project.MSG_VERBOSE);            execTask.execute();        } catch (Exception e) {            // Have to catch this because of the semantics of calling main()            String msg = "Exception while calling generateclient Details: "                + e.toString();            throw new BuildException(msg, e);        }    }
Clone class 53, 2 fragments, nominal size 18 lines, similarity 77%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/DescriptorHandler.java    public void startElement(String name, AttributeList attrs)        throws SAXException {        this.currentElement = name;        currentText = "";        if (name.equals(EJB_REF) || name.equals(EJB_LOCAL_REF)) {            inEJBRef = true;        } else if (parseState == STATE_LOOKING_EJBJAR && name.equals(EJB_JAR)) {            parseState = STATE_IN_EJBJAR;        } else if (parseState == STATE_IN_EJBJAR && name.equals(ENTERPRISE_BEANS)) {            parseState = STATE_IN_BEANS;        } else if (parseState == STATE_IN_BEANS && name.equals(SESSION_BEAN)) {            parseState = STATE_IN_SESSION;        } else if (parseState == STATE_IN_BEANS && name.equals(ENTITY_BEAN)) {            parseState = STATE_IN_ENTITY;        } else if (parseState == STATE_IN_BEANS && name.equals(MESSAGE_BEAN)) {            parseState = STATE_IN_MESSAGE;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/DescriptorHandler.java    public void endElement(String name) throws SAXException {        processElement();        currentText = "";        this.currentElement = "";        if (name.equals(EJB_REF) || name.equals(EJB_LOCAL_REF)) {            inEJBRef = false;        } else if (parseState == STATE_IN_ENTITY && name.equals(ENTITY_BEAN)) {            parseState = STATE_IN_BEANS;        } else if (parseState == STATE_IN_SESSION && name.equals(SESSION_BEAN)) {            parseState = STATE_IN_BEANS;        } else if (parseState == STATE_IN_MESSAGE && name.equals(MESSAGE_BEAN)) {            parseState = STATE_IN_BEANS;        } else if (parseState == STATE_IN_BEANS && name.equals(ENTERPRISE_BEANS)) {            parseState = STATE_IN_EJBJAR;        } else if (parseState == STATE_IN_EJBJAR && name.equals(EJB_JAR)) {            parseState = STATE_LOOKING_EJBJAR;        }    }
Clone class 54, 2 fragments, nominal size 10 lines, similarity 90%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java    protected DescriptorHandler getDescriptorHandler(File srcDir) {        DescriptorHandler h = new DescriptorHandler(getTask(), srcDir);        registerKnownDTDs(h);        // register any DTDs supplied by the user        for (Iterator i = getConfig().dtdLocations.iterator(); i.hasNext();) {            EjbJar.DTDLocation dtdLocation = (EjbJar.DTDLocation) i.next();            h.registerDTD(dtdLocation.getPublicId(), dtdLocation.getLocation());        }        return h;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java    protected DescriptorHandler getDescriptorHandler(File srcDir) {        DescriptorHandler handler = new DescriptorHandler(getTask(), srcDir);        // register all the DTDs, both the ones that are known and        // any supplied by the user        handler.registerDTD(PUBLICID_EJB11, ejb11DTD);        for (Iterator i = getConfig().dtdLocations.iterator(); i.hasNext();) {            EjbJar.DTDLocation dtdLocation = (EjbJar.DTDLocation) i.next();            handler.registerDTD(dtdLocation.getPublicId(), dtdLocation.getLocation());        }        return handler;    }
Clone class 55, 2 fragments, nominal size 121 lines, similarity 95%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {        boolean rebuild = false;        JarFile genericJar = null;        JarFile wlJar = null;        File newWLJarFile = null;        JarOutputStream newJarStream = null;        ClassLoader genericLoader = null;        try {            log("Checking if weblogic Jar needs to be rebuilt for jar " + weblogicJarFile.getName(),                Project.MSG_VERBOSE);            // Only go forward if the generic and the weblogic file both exist            if (genericJarFile.exists() && genericJarFile.isFile()                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {                //open jar files                genericJar = new JarFile(genericJarFile);                wlJar = new JarFile(weblogicJarFile);                Hashtable genericEntries = new Hashtable();                Hashtable wlEntries = new Hashtable();                Hashtable replaceEntries = new Hashtable();                //get the list of generic jar entries                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {                    JarEntry je = (JarEntry) e.nextElement();                    genericEntries.put(je.getName().replace('\\', '/'), je);                }                //get the list of weblogic jar entries                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {                    JarEntry je = (JarEntry) e.nextElement();                    wlEntries.put(je.getName(), je);                }                //Cycle Through generic and make sure its in weblogic                genericLoader = getClassLoaderFromJar(genericJarFile);                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {                    String filepath = (String) e.nextElement();                    if (wlEntries.containsKey(filepath)) {                        // File name/path match                        // Check files see if same                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);                        if ((genericEntry.getCrc() != wlEntry.getCrc())                            || (genericEntry.getSize() != wlEntry.getSize())) {                            if (genericEntry.getName().endsWith(".class")) {                                //File are different see if its an object or an interface                                String classname                                    = genericEntry.getName()                                    .replace(File.separatorChar, '.')                                    .replace('/', '.');                                classname = classname.substring(0, classname.lastIndexOf(".class"));                                Class genclass = genericLoader.loadClass(classname);                                if (genclass.isInterface()) {                                    //Interface changed   rebuild jar.                                    log("Interface " + genclass.getName()                                        + " has changed", Project.MSG_VERBOSE);                                    rebuild = true;                                    break;                                } else {                                    //Object class Changed   update it.                                    replaceEntries.put(filepath, genericEntry);                                }                            } else {                                // is it the manifest. If so ignore it                                if (!genericEntry.getName().equals("META-INF/MANIFEST.MF")) {                                    //File other then class changed   rebuild                                    log("Non class file " + genericEntry.getName()                                        + " has changed", Project.MSG_VERBOSE);                                    rebuild = true;                                    break;                                }                            }                        }                    } else {                        // a file doesn't exist rebuild                        log("File " + filepath + " not present in weblogic jar",                            Project.MSG_VERBOSE);                        rebuild = true;                        break;                    }                }                if (!rebuild) {                    log("No rebuild needed - updating jar", Project.MSG_VERBOSE);                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + ".temp");                    if (newWLJarFile.exists()) {                        newWLJarFile.delete();                    }                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));                    newJarStream.setLevel(0);                    //Copy files from old weblogic jar                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];                        int bytesRead;                        InputStream is;                        JarEntry je = (JarEntry) e.nextElement();                        if (je.getCompressedSize() == -1                            || je.getCompressedSize() == je.getSize()) {                            newJarStream.setLevel(0);                        } else {                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);                        }                        // Update with changed Bean class                        if (replaceEntries.containsKey(je.getName())) {                            log("Updating Bean class from generic Jar "                                + je.getName(), Project.MSG_VERBOSE);                            // Use the entry from the generic jar                            je = (JarEntry) replaceEntries.get(je.getName());                            is = genericJar.getInputStream(je);                        } else {                            //use fle from original weblogic jar                            is = wlJar.getInputStream(je);                        }                        newJarStream.putNextEntry(new JarEntry(je.getName()));                        while ((bytesRead = is.read(buffer)) != -1) {                            newJarStream.write(buffer, 0, bytesRead);                        }                        is.close();                    }                } else {                    log("Weblogic Jar rebuild needed due to changed "                         + "interface or XML", Project.MSG_VERBOSE);                }            } else {                rebuild = true;            }        } catch (ClassNotFoundException cnfe) {            String cnfmsg = "ClassNotFoundException while processing ejb-jar file"                 + ". Details: "                 + cnfe.getMessage();            throw new BuildException(cnfmsg, cnfe);        } catch (IOException ioe) {            String msg = "IOException while processing ejb-jar file "                 + ". Details: "                 + ioe.getMessage();            throw new BuildException(msg, ioe);        } finally {            FileUtils.close(genericJar);            FileUtils.close(wlJar);            FileUtils.close(newJarStream);            if (newJarStream != null) {                try {                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);                } catch (IOException renameException) {                    log(renameException.getMessage(), Project.MSG_WARN);                    rebuild = true;                }            }            if (genericLoader != null                && genericLoader instanceof AntClassLoader) {                AntClassLoader loader = (AntClassLoader) genericLoader;                loader.cleanup();            }        }        return rebuild;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {        boolean rebuild = false;        JarFile genericJar = null;        JarFile wasJar = null;        File newwasJarFile = null;        JarOutputStream newJarStream = null;        ClassLoader genericLoader = null;        try {            log("Checking if websphere Jar needs to be rebuilt for jar "                + websphereJarFile.getName(), Project.MSG_VERBOSE);            // Only go forward if the generic and the websphere file both exist            if (genericJarFile.exists() && genericJarFile.isFile()                 && websphereJarFile.exists() && websphereJarFile.isFile()) {                //open jar files                genericJar = new JarFile(genericJarFile);                wasJar = new JarFile(websphereJarFile);                Hashtable genericEntries = new Hashtable();                Hashtable wasEntries = new Hashtable();                Hashtable replaceEntries = new Hashtable();                //get the list of generic jar entries                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {                    JarEntry je = (JarEntry) e.nextElement();                    genericEntries.put(je.getName().replace('\\', '/'), je);                }                //get the list of websphere jar entries                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {                    JarEntry je = (JarEntry) e.nextElement();                    wasEntries.put(je.getName(), je);                }                //Cycle Through generic and make sure its in websphere                genericLoader = getClassLoaderFromJar(genericJarFile);                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {                    String filepath = (String) e.nextElement();                    if (wasEntries.containsKey(filepath)) {                        // File name/path match                        // Check files see if same                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);                        if ((genericEntry.getCrc() != wasEntry.getCrc())                            || (genericEntry.getSize() != wasEntry.getSize())) {                            if (genericEntry.getName().endsWith(".class")) {                                //File are different see if its an object or an interface                                String classname                                    = genericEntry.getName().replace(File.separatorChar, '.');                                classname = classname.substring(0, classname.lastIndexOf(".class"));                                Class genclass = genericLoader.loadClass(classname);                                if (genclass.isInterface()) {                                    //Interface changed   rebuild jar.                                    log("Interface " + genclass.getName()                                        + " has changed", Project.MSG_VERBOSE);                                    rebuild = true;                                    break;                                } else {                                    //Object class Changed   update it.                                    replaceEntries.put(filepath, genericEntry);                                }                            } else {                                // is it the manifest. If so ignore it                                if (!genericEntry.getName().equals("META-INF/MANIFEST.MF")) {                                    //File other then class changed   rebuild                                    log("Non class file " + genericEntry.getName()                                        + " has changed", Project.MSG_VERBOSE);                                    rebuild = true;                                }                                break;                            }                        }                    } else {                        // a file doesn't exist rebuild                        log("File " + filepath + " not present in websphere jar",                            Project.MSG_VERBOSE);                        rebuild = true;                        break;                    }                }                if (!rebuild) {                    log("No rebuild needed - updating jar", Project.MSG_VERBOSE);                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + ".temp");                    if (newwasJarFile.exists()) {                        newwasJarFile.delete();                    }                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));                    newJarStream.setLevel(0);                    //Copy files from old websphere jar                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];                        int bytesRead;                        InputStream is;                        JarEntry je = (JarEntry) e.nextElement();                        if (je.getCompressedSize() == -1                            || je.getCompressedSize() == je.getSize()) {                            newJarStream.setLevel(0);                        } else {                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);                        }                        // Update with changed Bean class                        if (replaceEntries.containsKey(je.getName())) {                            log("Updating Bean class from generic Jar " + je.getName(),                                Project.MSG_VERBOSE);                            // Use the entry from the generic jar                            je = (JarEntry) replaceEntries.get(je.getName());                            is = genericJar.getInputStream(je);                        } else {                            //use fle from original websphere jar                            is = wasJar.getInputStream(je);                        }                        newJarStream.putNextEntry(new JarEntry(je.getName()));                        while ((bytesRead = is.read(buffer)) != -1) {                            newJarStream.write(buffer, 0, bytesRead);                        }                        is.close();                    }                } else {                    log("websphere Jar rebuild needed due to changed "                        + "interface or XML", Project.MSG_VERBOSE);                }            } else {                rebuild = true;            }        } catch (ClassNotFoundException cnfe) {            String cnfmsg = "ClassNotFoundException while processing ejb-jar file"                 + ". Details: "                 + cnfe.getMessage();            throw new BuildException(cnfmsg, cnfe);        } catch (IOException ioe) {            String msg = "IOException while processing ejb-jar file "                 + ". Details: "                 + ioe.getMessage();            throw new BuildException(msg, ioe);        } finally {            // need to close files and perhaps rename output            FileUtils.close(genericJar);            FileUtils.close(wasJar);            FileUtils.close(newJarStream);            if (newJarStream != null) {                try {                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);                } catch (IOException renameException) {                    log(renameException.getMessage(), Project.MSG_WARN);                    rebuild = true;                }            }            if (genericLoader != null                && genericLoader instanceof AntClassLoader) {                AntClassLoader loader = (AntClassLoader) genericLoader;                loader.cleanup();            }        }        return rebuild;    }
Clone class 56, 2 fragments, nominal size 24 lines, similarity 95%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/extension/Extension.java    public Compatibility getCompatibilityWith(final Extension required) {        // Extension Name must match        if (!extensionName.equals(required.getExtensionName())) {            return INCOMPATIBLE;        }        // Available specification version must be >= required        final DeweyDecimal requiredSpecificationVersion            = required.getSpecificationVersion();        if (null != requiredSpecificationVersion) {            if (null == specificationVersion                || !isCompatible(specificationVersion, requiredSpecificationVersion)) {                return REQUIRE_SPECIFICATION_UPGRADE;            }        }        // Implementation Vendor ID must match        final String requiredImplementationVendorID            = required.getImplementationVendorID();        if (null != requiredImplementationVendorID) {            if (null == implementationVendorID                || !implementationVendorID.equals(requiredImplementationVendorID)) {                return REQUIRE_VENDOR_SWITCH;            }        }        // Implementation version must be >= required        final DeweyDecimal requiredImplementationVersion            = required.getImplementationVersion();        if (null != requiredImplementationVersion) {            if (null == implementationVersion                || !isCompatible(implementationVersion, requiredImplementationVersion)) {                return REQUIRE_IMPLEMENTATION_UPGRADE;            }        }        // This available optional package satisfies the requirements        return COMPATIBLE;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/extension/Specification.java    public Compatibility getCompatibilityWith(final Specification other) {        // Specification Name must match        if (!specificationTitle.equals(other.getSpecificationTitle())) {            return INCOMPATIBLE;        }        // Available specification version must be >= required        final DeweyDecimal otherSpecificationVersion            = other.getSpecificationVersion();        if (null != specificationVersion) {            if (null == otherSpecificationVersion                || !isCompatible(specificationVersion, otherSpecificationVersion)) {                return REQUIRE_SPECIFICATION_UPGRADE;            }        }        // Implementation Vendor ID must match        final String otherImplementationVendor            = other.getImplementationVendor();        if (null != implementationVendor) {            if (null == otherImplementationVendor                || !implementationVendor.equals(otherImplementationVendor)) {                return REQUIRE_VENDOR_SWITCH;            }        }        // Implementation version must be >= required        final String otherImplementationVersion            = other.getImplementationVersion();        if (null != implementationVersion) {            if (null == otherImplementationVersion                || !implementationVersion.equals(otherImplementationVersion)) {                return REQUIRE_IMPLEMENTATION_CHANGE;            }        }        // This available optional package satisfies the requirements        return COMPATIBLE;    }
Clone class 57, 2 fragments, nominal size 41 lines, similarity 86%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/extension/Extension.java    public String toString() {        final String brace = ": ";        final StringBuffer sb = new StringBuffer(EXTENSION_NAME.toString());        sb.append(brace);        sb.append(extensionName);        sb.append(StringUtils.LINE_SEP);        if (null != specificationVersion) {            sb.append(SPECIFICATION_VERSION);            sb.append(brace);            sb.append(specificationVersion);            sb.append(StringUtils.LINE_SEP);        }        if (null != specificationVendor) {            sb.append(SPECIFICATION_VENDOR);            sb.append(brace);            sb.append(specificationVendor);            sb.append(StringUtils.LINE_SEP);        }        if (null != implementationVersion) {            sb.append(IMPLEMENTATION_VERSION);            sb.append(brace);            sb.append(implementationVersion);            sb.append(StringUtils.LINE_SEP);        }        if (null != implementationVendorID) {            sb.append(IMPLEMENTATION_VENDOR_ID);            sb.append(brace);            sb.append(implementationVendorID);            sb.append(StringUtils.LINE_SEP);        }        if (null != implementationVendor) {            sb.append(IMPLEMENTATION_VENDOR);            sb.append(brace);            sb.append(implementationVendor);            sb.append(StringUtils.LINE_SEP);        }        if (null != implementationURL) {            sb.append(IMPLEMENTATION_URL);            sb.append(brace);            sb.append(implementationURL);            sb.append(StringUtils.LINE_SEP);        }        return sb.toString();    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/extension/Specification.java    public String toString() {        final String brace = ": ";        final StringBuffer sb            = new StringBuffer(SPECIFICATION_TITLE.toString());        sb.append(brace);        sb.append(specificationTitle);        sb.append(StringUtils.LINE_SEP);        if (null != specificationVersion) {            sb.append(SPECIFICATION_VERSION);            sb.append(brace);            sb.append(specificationVersion);            sb.append(StringUtils.LINE_SEP);        }        if (null != specificationVendor) {            sb.append(SPECIFICATION_VENDOR);            sb.append(brace);            sb.append(specificationVendor);            sb.append(StringUtils.LINE_SEP);        }        if (null != implementationTitle) {            sb.append(IMPLEMENTATION_TITLE);            sb.append(brace);            sb.append(implementationTitle);            sb.append(StringUtils.LINE_SEP);        }        if (null != implementationVersion) {            sb.append(IMPLEMENTATION_VERSION);            sb.append(brace);            sb.append(implementationVersion);            sb.append(StringUtils.LINE_SEP);        }        if (null != implementationVendor) {            sb.append(IMPLEMENTATION_VENDOR);            sb.append(brace);            sb.append(implementationVendor);            sb.append(StringUtils.LINE_SEP);        }        return sb.toString();    }
Clone class 58, 2 fragments, nominal size 16 lines, similarity 77%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibAvailableTask.java    private void validate() throws BuildException {        if (null == requiredExtension) {            final String message = "Extension element must be specified.";            throw new BuildException(message);        }        if (null == libraryFile && extensionFileSets.isEmpty()) {            final String message = "File attribute not specified.";            throw new BuildException(message);        }        if (null != libraryFile && !libraryFile.exists()) {            final String message = "File '" + libraryFile + "' does not exist.";            throw new BuildException(message);        }        if (null != libraryFile && !libraryFile.isFile()) {            final String message = "\'" + libraryFile + "\' is not a file.";            throw new BuildException(message);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibDisplayTask.java    private void validate() throws BuildException {        if (null == libraryFile && libraryFileSets.isEmpty()) {            final String message = "File attribute not specified.";            throw new BuildException(message);        }        if (null != libraryFile && !libraryFile.exists()) {            final String message = "File '" + libraryFile + "' does not exist.";            throw new BuildException(message);        }        if (null != libraryFile && !libraryFile.isFile()) {            final String message = "\'" + libraryFile + "\' is not a file.";            throw new BuildException(message);        }    }
Clone class 59, 2 fragments, nominal size 12 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/j2ee/JonasHotDeploymentTool.java    protected boolean isActionValid() {        boolean valid = false;        String action = getTask().getAction();        for (int i = 0; i < VALID_ACTIONS.length; i++) {            if (action.equals(VALID_ACTIONS[i])) {                valid = true;                break;            }        }        return valid;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/j2ee/WebLogicHotDeploymentTool.java    protected boolean isActionValid() {        boolean valid = false;        String action = getTask().getAction();        for (int i = 0; i < VALID_ACTIONS.length; i++) {            if (action.equals(VALID_ACTIONS[i])) {                valid = true;                break;            }        }        return valid;    }
Clone class 60, 2 fragments, nominal size 26 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java    private String createOutputFileName(File destFile, String optionalOutputFile,                                        boolean plain) {        String suffix = DEFAULT_SUFFIX_HTML;        String javaccFile = destFile.getAbsolutePath().replace('\\', '/');        if (plain) {            suffix = DEFAULT_SUFFIX_TEXT;        }        if ((optionalOutputFile == null) || optionalOutputFile.equals("")) {            int filePos = javaccFile.lastIndexOf("/");            if (filePos >= 0) {                javaccFile = javaccFile.substring(filePos + 1);            }            int suffixPos = javaccFile.lastIndexOf('.');            if (suffixPos == -1) {                optionalOutputFile = javaccFile + suffix;            } else {                String currentSuffix = javaccFile.substring(suffixPos);                if (currentSuffix.equals(suffix)) {                    optionalOutputFile = javaccFile + suffix;                } else {                    optionalOutputFile = javaccFile.substring(0, suffixPos)                        + suffix;                }            }        } else {            optionalOutputFile = optionalOutputFile.replace('\\', '/');        }        return (getProject().getBaseDir() + "/" + optionalOutputFile)            .replace('\\', '/');    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java    private String createOutputFileName(File destFile, String optionalOutputFile,                                        String outputDir) {        optionalOutputFile = validateOutputFile(optionalOutputFile,                                                outputDir);        String jjtreeFile = destFile.getAbsolutePath().replace('\\', '/');        if ((optionalOutputFile == null) || optionalOutputFile.equals("")) {            int filePos = jjtreeFile.lastIndexOf("/");            if (filePos >= 0) {                jjtreeFile = jjtreeFile.substring(filePos + 1);            }            int suffixPos = jjtreeFile.lastIndexOf('.');            if (suffixPos == -1) {                optionalOutputFile = jjtreeFile + DEFAULT_SUFFIX;            } else {                String currentSuffix = jjtreeFile.substring(suffixPos);                if (currentSuffix.equals(DEFAULT_SUFFIX)) {                    optionalOutputFile = jjtreeFile + DEFAULT_SUFFIX;                } else {                    optionalOutputFile = jjtreeFile.substring(0, suffixPos)                        + DEFAULT_SUFFIX;                }            }        }        if ((outputDir == null) || outputDir.equals("")) {            outputDir = getDefaultOutputDirectory();        }        return (outputDir + "/" + optionalOutputFile).replace('\\', '/');    }
Clone class 61, 2 fragments, nominal size 12 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/javah/Gcjh.java    public boolean compile(Javah javah) throws BuildException {        Commandline cmd = setupGcjhCommand(javah);        try {            Execute.runCommand(javah, cmd.getCommandline());            return true;        } catch (BuildException e) {            if (e.getMessage().indexOf("failed with return code") == -1) {                throw e;            }        }        return false;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/javah/Kaffeh.java    public boolean compile(Javah javah) throws BuildException {        Commandline cmd = setupKaffehCommand(javah);        try {            Execute.runCommand(javah, cmd.getCommandline());            return true;        } catch (BuildException e) {            if (e.getMessage().indexOf("failed with return code") == -1) {                throw e;            }        }        return false;    }
Clone class 62, 2 fragments, nominal size 30 lines, similarity 93%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/javah/Gcjh.java    private Commandline setupGcjhCommand(Javah javah) {        Commandline cmd = new Commandline();        cmd.setExecutable(JavaEnvUtils.getJdkExecutable("gcjh"));        if (javah.getDestdir() != null) {            cmd.createArgument().setValue("-d");            cmd.createArgument().setFile(javah.getDestdir());        }        if (javah.getOutputfile() != null) {            cmd.createArgument().setValue("-o");            cmd.createArgument().setFile(javah.getOutputfile());        }        Path cp = new Path(javah.getProject());        if (javah.getBootclasspath() != null) {            cp.append(javah.getBootclasspath());        }        cp = cp.concatSystemBootClasspath("ignore");        if (javah.getClasspath() != null) {            cp.append(javah.getClasspath());        }        if (cp.size() > 0) {            cmd.createArgument().setValue("--classpath");            cmd.createArgument().setPath(cp);        }        if (!javah.getOld()) {            cmd.createArgument().setValue("-jni");        }        cmd.addArguments(javah.getCurrentArgs());        javah.logAndAddFiles(cmd);        return cmd;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/javah/Kaffeh.java    private Commandline setupKaffehCommand(Javah javah) {        Commandline cmd = new Commandline();        cmd.setExecutable(JavaEnvUtils.getJdkExecutable("kaffeh"));        if (javah.getDestdir() != null) {            cmd.createArgument().setValue("-d");            cmd.createArgument().setFile(javah.getDestdir());        }        if (javah.getOutputfile() != null) {            cmd.createArgument().setValue("-o");            cmd.createArgument().setFile(javah.getOutputfile());        }        Path cp = new Path(javah.getProject());        if (javah.getBootclasspath() != null) {            cp.append(javah.getBootclasspath());        }        cp = cp.concatSystemBootClasspath("ignore");        if (javah.getClasspath() != null) {            cp.append(javah.getClasspath());        }        if (cp.size() > 0) {            cmd.createArgument().setValue("-classpath");            cmd.createArgument().setPath(cp);        }        if (!javah.getOld()) {            cmd.createArgument().setValue("-jni");        }        cmd.addArguments(javah.getCurrentArgs());        javah.logAndAddFiles(cmd);        return cmd;    }
Clone class 63, 2 fragments, nominal size 13 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/javah/JavahAdapterFactory.java    public static JavahAdapter getAdapter(String choice,                                          ProjectComponent log,                                          Path classpath)        throws BuildException {        if ((JavaEnvUtils.isKaffe() && choice == null)            || Kaffeh.IMPLEMENTATION_NAME.equals(choice)) {            return new Kaffeh();        } else if ((JavaEnvUtils.isGij() && choice == null)            || Gcjh.IMPLEMENTATION_NAME.equals(choice)) {            return new Gcjh();        } else if (ForkingJavah.IMPLEMENTATION_NAME.equals(choice)) {            return new ForkingJavah();        } else if (SunJavah.IMPLEMENTATION_NAME.equals(choice)) {            return new SunJavah();        } else if (choice != null) {            return resolveClassName(choice,                                    // Memory leak in line below                                    log.getProject()                                    .createClassLoader(classpath));        }        return new ForkingJavah();    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/Native2AsciiAdapterFactory.java    public static Native2AsciiAdapter getAdapter(String choice,                                                 ProjectComponent log,                                                 Path classpath)        throws BuildException {        if ((shouldUseKaffee() && choice == null)            || KaffeNative2Ascii.IMPLEMENTATION_NAME.equals(choice)) {            return new KaffeNative2Ascii();        } else if (SunNative2Ascii.IMPLEMENTATION_NAME.equals(choice)) {            return new SunNative2Ascii();        } else if (BuiltinNative2Ascii.IMPLEMENTATION_NAME.equals(choice)) {            return new BuiltinNative2Ascii();        } else if (choice != null) {            return resolveClassName(choice,                                    // Memory leak in line below                                    log.getProject()                                    .createClassLoader(classpath));        }        return new BuiltinNative2Ascii();    }
Clone class 64, 2 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/jsp/JspC.java    private File getActualDestDir() {        File dest = null;        if (packageName == null) {            dest = destDir;        } else {            String path = destDir.getPath() + File.separatorChar                + packageName.replace('.', File.separatorChar);            dest = new File(path);        }        return dest;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/UpToDate.java    private FileNameMapper getMapper() {        FileNameMapper mapper = null;        if (mapperElement == null) {            MergingMapper mm = new MergingMapper();            mm.setTo(targetFile.getAbsolutePath());            mapper = mm;        } else {            mapper = mapperElement.getImplementation();        }        return mapper;    }
Clone class 65, 2 fragments, nominal size 14 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/BriefJUnitResultFormatter.java    public void startTestSuite(JUnitTest suite) {        if (output == null) {            return; // Quick return - no output do nothing.        }        StringBuffer sb = new StringBuffer("Testsuite: ");        sb.append(suite.getName());        sb.append(StringUtils.LINE_SEP);        try {            output.write(sb.toString());            output.flush();        } catch (IOException ex) {            throw new BuildException(ex);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java    public void startTestSuite(JUnitTest suite) throws BuildException {        if (out == null) {            return; // Quick return - no output do nothing.        }        StringBuffer sb = new StringBuffer("Testsuite: ");        sb.append(suite.getName());        sb.append(StringUtils.LINE_SEP);        try {            out.write(sb.toString().getBytes());            out.flush();        } catch (IOException ex) {            throw new BuildException("Unable to write output", ex);        }    }
Clone class 66, 2 fragments, nominal size 18 lines, similarity 73%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/BriefJUnitResultFormatter.java    protected synchronized void formatError(String type, Test test,                                            Throwable error) {        if (test != null) {            endTest(test);        }        try {            resultWriter.write(formatTest(test) + type);            resultWriter.newLine();            resultWriter.write(String.valueOf(error.getMessage()));            resultWriter.newLine();            String strace = JUnitTestRunner.getFilteredTrace(error);            resultWriter.write(strace);            resultWriter.newLine();            resultWriter.newLine();        } catch (IOException ex) {            throw new BuildException(ex);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java    private void formatError(String type, Test test, Throwable t) {        synchronized (wri) {            if (test != null) {                endTest(test);                failed.put(test, Boolean.TRUE);            }            try {                wri.write(type);                wri.newLine();                wri.write(String.valueOf(t.getMessage()));                wri.newLine();                String strace = JUnitTestRunner.getFilteredTrace(t);                wri.write(strace);                wri.newLine();            } catch (IOException ex) {                throw new BuildException(ex);            }        }    }
Clone class 67, 2 fragments, nominal size 15 lines, similarity 93%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/BriefJUnitResultFormatter.java    public void formatSkip(Test test, String message) {        if (test != null) {            endTest(test);        }        try {            resultWriter.write(formatTest(test) + "SKIPPED");            if (message != null) {                resultWriter.write(": ");                resultWriter.write(message);            }            resultWriter.newLine();        } catch (IOException ex) {            throw new BuildException(ex);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java    public void formatSkip(Test test, String message) {        if (test != null) {            endTest(test);        }        try {            wri.write("\tSKIPPED");            if (message != null) {                wri.write(": ");                wri.write(message);            }            wri.newLine();        } catch (IOException ex) {            throw new BuildException(ex);        }    }
Clone class 68, 3 fragments, nominal size 10 lines, similarity 90%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java    protected void handleFlush(final String output) {        if (runner != null) {            runner.handleFlush(output);            if (showOutput) {                super.handleFlush(output);            }        } else {            super.handleFlush(output);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java    public void handleErrorFlush(final String output) {        if (runner != null) {            runner.handleErrorFlush(output);            if (showOutput) {                super.handleErrorFlush(output);            }        } else {            super.handleErrorFlush(output);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java    public void handleErrorOutput(final String output) {        if (runner != null) {            runner.handleErrorOutput(output);            if (showOutput) {                super.handleErrorOutput(output);            }        } else {            super.handleErrorOutput(output);        }    }
Clone class 69, 4 fragments, nominal size 10 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTest.java    public Object clone() {        try {            JUnitTest t = (JUnitTest) super.clone();            t.props = props == null ? null : (Properties) props.clone();            t.formatters = (Vector) formatters.clone();            return t;        } catch (CloneNotSupportedException e) {            // plain impossible            return this;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionContainer.java    public Object clone() {        try {            BaseResourceCollectionContainer c                = (BaseResourceCollectionContainer) super.clone();            c.rc = new ArrayList<ResourceCollection>(rc);            c.coll = null;            return c;        } catch (CloneNotSupportedException e) {            throw new BuildException(e);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/MappedResourceCollection.java    public Object clone() {        try {            MappedResourceCollection c =                (MappedResourceCollection) super.clone();            c.nested = nested;            c.mapper = mapper;            c.cachedColl = null;            return c;        } catch (CloneNotSupportedException e) {            throw new BuildException(e);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/PatternSet.java    public Object clone() {        try {            PatternSet ps = (PatternSet) super.clone();            ps.includeList = new ArrayList<NameEntry>(includeList);            ps.excludeList = new ArrayList<NameEntry>(excludeList);            ps.includesFileList = new ArrayList<NameEntry>(includesFileList);            ps.excludesFileList = new ArrayList<NameEntry>(excludesFileList);            return ps;        } catch (CloneNotSupportedException e) {            throw new BuildException(e);        }    }
Clone class 70, 2 fragments, nominal size 10 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/KaffeNative2Ascii.java    private static Class getN2aClass() {        for (int i = 0; i < N2A_CLASSNAMES.length; i++) {            try {                return Class.forName(N2A_CLASSNAMES[i]);            } catch (ClassNotFoundException cnfe) {                // Ignore            }        }        return null;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/rmic/KaffeRmic.java    private static Class getRmicClass() {        for (int i = 0; i < RMIC_CLASSNAMES.length; i++) {            try {                return Class.forName(RMIC_CLASSNAMES[i]);            } catch (ClassNotFoundException cnfe) {                // Ignore            }        }        return null;    }
Clone class 71, 2 fragments, nominal size 24 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        public void scan() {            if (includes == null) {                // No includes supplied, so set it to 'matches all'                includes = new String[1];                includes[0] = "**";            }            if (excludes == null) {                excludes = new String[0];            }            filesIncluded = new VectorSet();            filesNotIncluded = new Vector();            filesExcluded = new VectorSet();            dirsIncluded = new VectorSet();            dirsNotIncluded = new Vector();            dirsExcluded = new VectorSet();            try {                String cwd = ftp.printWorkingDirectory();                // always start from the current ftp working dir                forceRemoteSensitivityCheck();                checkIncludePatterns();                clearCaches();                ftp.changeWorkingDirectory(cwd);            } catch (IOException e) {                throw new BuildException("Unable to scan FTP server: ", e);            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java        public void scan() {            if (includes == null) {                // No includes supplied, so set it to 'matches all'                includes = new String[1];                includes[0] = "**";            }            if (excludes == null) {                excludes = new String[0];            }            filesIncluded = new VectorSet();            filesNotIncluded = new Vector();            filesExcluded = new VectorSet();            dirsIncluded = new VectorSet();            dirsNotIncluded = new Vector();            dirsExcluded = new VectorSet();            try {                String cwd = ftp.printWorkingDirectory();                // always start from the current ftp working dir                forceRemoteSensitivityCheck();                checkIncludePatterns();                clearCaches();                ftp.changeWorkingDirectory(cwd);            } catch (IOException e) {                throw new BuildException("Unable to scan FTP server: ", e);            }        }
Clone class 72, 2 fragments, nominal size 71 lines, similarity 91%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        private void checkIncludePatterns() {            Hashtable newroots = new Hashtable();            // put in the newroots vector the include patterns without            // wildcard tokens            for (int icounter = 0; icounter < includes.length; icounter++) {                String newpattern =                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);                newroots.put(newpattern, includes[icounter]);            }            if (remotedir == null) {                try {                    remotedir = ftp.printWorkingDirectory();                } catch (IOException e) {                    throw new BuildException("could not read current ftp directory",                                             getLocation());                }            }            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, remotedir);            rootPath = baseFTPFile.getAbsolutePath();            // construct it            if (newroots.containsKey("")) {                // we are going to scan everything anyway                scandir(rootPath, "", true);            } else {                // only scan directories that can include matched files or                // directories                Enumeration enum2 = newroots.keys();                while (enum2.hasMoreElements()) {                    String currentelement = (String) enum2.nextElement();                    String originalpattern = (String) newroots.get(currentelement);                    AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);                    boolean isOK = true;                    boolean traversesSymlinks = false;                    String path = null;                    if (myfile.exists()) {                        forceRemoteSensitivityCheck();                        if (remoteSensitivityChecked                            && remoteSystemCaseSensitive && isFollowSymlinks()) {                            // cool case,                            //we do not need to scan all the subdirs in the relative path                            path = myfile.getFastRelativePath();                        } else {                            // may be on a case insensitive file system.  We want                            // the results to show what's really on the disk, so                            // we need to double check.                            try {                                path = myfile.getRelativePath();                                traversesSymlinks = myfile.isTraverseSymlinks();                            }  catch (IOException be) {                                throw new BuildException(be, getLocation());                            } catch (BuildException be) {                                isOK = false;                            }                        }                    } else {                        isOK = false;                    }                    if (isOK) {                        currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);                        if (!isFollowSymlinks()                            && traversesSymlinks) {                            continue;                        }                        if (myfile.isDirectory()) {                            if (isIncluded(currentelement)                                && currentelement.length() > 0) {                                accountForIncludedDir(currentelement, myfile, true);                            }  else {                                if (currentelement.length() > 0) {                                    if (currentelement.charAt(currentelement                                                              .length() - 1)                                        != File.separatorChar) {                                        currentelement =                                            currentelement + File.separatorChar;                                    }                                }                                scandir(myfile.getAbsolutePath(), currentelement, true);                            }                        } else {                            if (isCaseSensitive                                && originalpattern.equals(currentelement)) {                                accountForIncludedFile(currentelement);                            } else if (!isCaseSensitive                                       && originalpattern                                       .equalsIgnoreCase(currentelement)) {                                accountForIncludedFile(currentelement);                            }                        }                    }                }            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java        private void checkIncludePatterns() {            Hashtable newroots = new Hashtable();            // put in the newroots vector the include patterns without            // wildcard tokens            for (int icounter = 0; icounter < includes.length; icounter++) {                String newpattern =                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);                newroots.put(newpattern, includes[icounter]);            }            if (task.getRemotedir() == null) {                try {                    task.setRemotedir(ftp.printWorkingDirectory());                } catch (IOException e) {                    throw new BuildException("could not read current ftp directory",                                             task.getLocation());                }            }            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, task.getRemotedir());            rootPath = baseFTPFile.getAbsolutePath();            // construct it            if (newroots.containsKey("")) {                // we are going to scan everything anyway                scandir(rootPath, "", true);            } else {                // only scan directories that can include matched files or                // directories                Enumeration enum2 = newroots.keys();                while (enum2.hasMoreElements()) {                    String currentelement = (String) enum2.nextElement();                    String originalpattern = (String) newroots.get(currentelement);                    AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);                    boolean isOK = true;                    boolean traversesSymlinks = false;                    String path = null;                    if (myfile.exists()) {                        forceRemoteSensitivityCheck();                        if (remoteSensitivityChecked                            && remoteSystemCaseSensitive && isFollowSymlinks()) {                            // cool case,                            //we do not need to scan all the subdirs in the relative path                            path = myfile.getFastRelativePath();                        } else {                            // may be on a case insensitive file system.  We want                            // the results to show what's really on the disk, so                            // we need to double check.                            try {                                path = myfile.getRelativePath();                                traversesSymlinks = myfile.isTraverseSymlinks();                            }  catch (IOException be) {                                throw new BuildException(be, task.getLocation());                            } catch (BuildException be) {                                isOK = false;                            }                        }                    } else {                        isOK = false;                    }                    if (isOK) {                        currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);                        if (!isFollowSymlinks()                            && traversesSymlinks) {                            continue;                        }                        if (myfile.isDirectory()) {                            if (isIncluded(currentelement)                                && currentelement.length() > 0) {                                accountForIncludedDir(currentelement, myfile, true);                            }  else {                                if (currentelement.length() > 0) {                                    if (currentelement.charAt(currentelement                                                              .length() - 1)                                        != File.separatorChar) {                                        currentelement =                                            currentelement + File.separatorChar;                                    }                                }                                scandir(myfile.getAbsolutePath(), currentelement, true);                            }                        } else {                            if (isCaseSensitive                                && originalpattern.equals(currentelement)) {                                accountForIncludedFile(currentelement);                            } else if (!isCaseSensitive                                       && originalpattern                                       .equalsIgnoreCase(currentelement)) {                                accountForIncludedFile(currentelement);                            }                        }                    }                }            }        }
Clone class 73, 2 fragments, nominal size 55 lines, similarity 98%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        protected void scandir(String dir, String vpath, boolean fast) {            // avoid double scanning of directories, can only happen in fast mode            if (fast && hasBeenScanned(vpath)) {                return;            }            try {                if (!ftp.changeWorkingDirectory(dir)) {                    return;                }                String completePath = null;                if (!vpath.equals("")) {                    completePath = rootPath + remoteFileSep                        + vpath.replace(File.separatorChar, remoteFileSep.charAt(0));                } else {                    completePath = rootPath;                }                FTPFile[] newfiles = listFiles(completePath, false);                if (newfiles == null) {                    ftp.changeToParentDirectory();                    return;                }                for (int i = 0; i < newfiles.length; i++) {                    FTPFile file = newfiles[i];                    if (file != null                        && !file.getName().equals(".")                        && !file.getName().equals("..")) {                        String name = vpath + file.getName();                        scannedDirs.put(name, new FTPFileProxy(file));                        if (isFunctioningAsDirectory(ftp, dir, file)) {                            boolean slowScanAllowed = true;                            if (!isFollowSymlinks() && file.isSymbolicLink()) {                                dirsExcluded.addElement(name);                                slowScanAllowed = false;                            } else if (isIncluded(name)) {                                accountForIncludedDir(name,                                                      new AntFTPFile(ftp, file, completePath) , fast);                            } else {                                dirsNotIncluded.addElement(name);                                if (fast && couldHoldIncluded(name)) {                                    scandir(file.getName(),                                            name + File.separator, fast);                                }                            }                            if (!fast && slowScanAllowed) {                                scandir(file.getName(),                                        name + File.separator, fast);                            }                        } else {                            if (!isFollowSymlinks() && file.isSymbolicLink()) {                                filesExcluded.addElement(name);                            } else if (isFunctioningAsFile(ftp, dir, file)) {                                accountForIncludedFile(name);                            }                        }                    }                }                ftp.changeToParentDirectory();            } catch (IOException e) {                throw new BuildException("Error while communicating with FTP "                                         + "server: ", e);            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java        protected void scandir(String dir, String vpath, boolean fast) {            // avoid double scanning of directories, can only happen in fast mode            if (fast && hasBeenScanned(vpath)) {                return;            }            try {                if (!ftp.changeWorkingDirectory(dir)) {                    return;                }                String completePath = null;                if (!vpath.equals("")) {                    completePath = rootPath + task.getSeparator()                        + vpath.replace(File.separatorChar, task.getSeparator().charAt(0));                } else {                    completePath = rootPath;                }                FTPFile[] newfiles = listFiles(completePath, false);                if (newfiles == null) {                    ftp.changeToParentDirectory();                    return;                }                for (int i = 0; i < newfiles.length; i++) {                    FTPFile file = newfiles[i];                    if (file != null                        && !file.getName().equals(".")                        && !file.getName().equals("..")) {                        String name = vpath + file.getName();                        scannedDirs.put(name, new FTPFileProxy(file));                        if (isFunctioningAsDirectory(ftp, dir, file)) {                            boolean slowScanAllowed = true;                            if (!isFollowSymlinks() && file.isSymbolicLink()) {                                dirsExcluded.addElement(name);                                slowScanAllowed = false;                            } else if (isIncluded(name)) {                                accountForIncludedDir(name,                                                      new AntFTPFile(ftp, file, completePath) , fast);                            } else {                                dirsNotIncluded.addElement(name);                                if (fast && couldHoldIncluded(name)) {                                    scandir(file.getName(),                                            name + File.separator, fast);                                }                            }                            if (!fast && slowScanAllowed) {                                scandir(file.getName(),                                        name + File.separator, fast);                            }                        } else {                            if (!isFollowSymlinks() && file.isSymbolicLink()) {                                filesExcluded.addElement(name);                            } else if (isFunctioningAsFile(ftp, dir, file)) {                                accountForIncludedFile(name);                            }                        }                    }                }                ftp.changeToParentDirectory();            } catch (IOException e) {                throw new BuildException("Error while communicating with FTP "                                         + "server: ", e);            }        }
Clone class 74, 2 fragments, nominal size 13 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        private void accountForIncludedFile(String name) {            if (!filesIncluded.contains(name)                && !filesExcluded.contains(name)) {                if (isIncluded(name)) {                    if (!isExcluded(name)                        && isSelected(name, (File) scannedDirs.get(name))) {                        filesIncluded.addElement(name);                    } else {                        filesExcluded.addElement(name);                    }                } else {                    filesNotIncluded.addElement(name);                }            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java        private void accountForIncludedFile(String name) {            if (!filesIncluded.contains(name)                && !filesExcluded.contains(name)) {                if (isIncluded(name)) {                    if (!isExcluded(name)                        && isSelected(name, (File) scannedDirs.get(name))) {                        filesIncluded.addElement(name);                    } else {                        filesExcluded.addElement(name);                    }                } else {                    filesNotIncluded.addElement(name);                }            }        }
Clone class 75, 2 fragments, nominal size 34 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        private void accountForIncludedDir(String name, AntFTPFile file, boolean fast) {            if (!dirsIncluded.contains(name)                && !dirsExcluded.contains(name)) {                if (!isExcluded(name)) {                    if (fast) {                        if (file.isSymbolicLink()) {                            try {                                file.getClient().changeWorkingDirectory(file.curpwd);                            } catch (IOException ioe) {                                throw new BuildException("could not change directory to curpwd");                            }                            scandir(file.getLink(),                                    name + File.separator, fast);                        } else {                            try {                                file.getClient().changeWorkingDirectory(file.curpwd);                            } catch (IOException ioe) {                                throw new BuildException("could not change directory to curpwd");                            }                            scandir(file.getName(),                                    name + File.separator, fast);                        }                    }                    dirsIncluded.addElement(name);                } else {                    dirsExcluded.addElement(name);                    if (fast && couldHoldIncluded(name)) {                        try {                            file.getClient().changeWorkingDirectory(file.curpwd);                        } catch (IOException ioe) {                            throw new BuildException("could not change directory to curpwd");                        }                        scandir(file.getName(),                                name + File.separator, fast);                    }                }            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java        private void accountForIncludedDir(String name, AntFTPFile file, boolean fast) {            if (!dirsIncluded.contains(name)                && !dirsExcluded.contains(name)) {                if (!isExcluded(name)) {                    if (fast) {                        if (file.isSymbolicLink()) {                            try {                                file.getClient().changeWorkingDirectory(file.curpwd);                            } catch (IOException ioe) {                                throw new BuildException("could not change directory to curpwd");                            }                            scandir(file.getLink(),                                    name + File.separator, fast);                        } else {                            try {                                file.getClient().changeWorkingDirectory(file.curpwd);                            } catch (IOException ioe) {                                throw new BuildException("could not change directory to curpwd");                            }                            scandir(file.getName(),                                    name + File.separator, fast);                        }                    }                    dirsIncluded.addElement(name);                } else {                    dirsExcluded.addElement(name);                    if (fast && couldHoldIncluded(name)) {                        try {                            file.getClient().changeWorkingDirectory(file.curpwd);                        } catch (IOException ioe) {                            throw new BuildException("could not change directory to curpwd");                        }                        scandir(file.getName(),                                name + File.separator, fast);                    }                }            }        }
Clone class 76, 2 fragments, nominal size 29 lines, similarity 89%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        public FTPFile[] listFiles(String directory, boolean changedir) {            //getProject().log("listing files in directory " + directory, Project.MSG_DEBUG);            String currentPath = directory;            if (changedir) {                try {                    boolean result = ftp.changeWorkingDirectory(directory);                    if (!result) {                        return null;                    }                    currentPath = ftp.printWorkingDirectory();                } catch (IOException ioe) {                    throw new BuildException(ioe, getLocation());                }            }            if (fileListMap.containsKey(currentPath)) {                getProject().log("filelist map used in listing files", Project.MSG_DEBUG);                return ((FTPFile[]) fileListMap.get(currentPath));            }            FTPFile[] result = null;            try {                result = ftp.listFiles();            } catch (IOException ioe) {                throw new BuildException(ioe, getLocation());            }            fileListMap.put(currentPath, result);            if (!remoteSensitivityChecked) {                checkRemoteSensitivity(result, directory);            }            return result;        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java        public FTPFile[] listFiles(String directory, boolean changedir) {            //task.log("listing files in directory " + directory, Project.MSG_DEBUG);            String currentPath = directory;            if (changedir) {                try {                    boolean result = ftp.changeWorkingDirectory(directory);                    if (!result) {                        return null;                    }                    currentPath = ftp.printWorkingDirectory();                } catch (IOException ioe) {                    throw new BuildException(ioe, task.getLocation());                }            }            if (fileListMap.containsKey(currentPath)) {                task.log("filelist map used in listing files", Project.MSG_DEBUG);                return ((FTPFile[]) fileListMap.get(currentPath));            }            FTPFile[] result = null;            try {                result = ftp.listFiles();            } catch (IOException ioe) {                throw new BuildException(ioe, task.getLocation());            }            fileListMap.put(currentPath, result);            if (!remoteSensitivityChecked) {                checkRemoteSensitivity(result, directory);            }            return result;        }
Clone class 77, 2 fragments, nominal size 43 lines, similarity 90%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        private void checkRemoteSensitivity(FTPFile[] array, String directory) {            if (array == null) {                return;            }            boolean candidateFound = false;            String target = null;            for (int icounter = 0; icounter < array.length; icounter++) {                if (array[icounter] != null && array[icounter].isDirectory()) {                    if (!array[icounter].getName().equals(".")                        && !array[icounter].getName().equals("..")) {                        candidateFound = true;                        target = fiddleName(array[icounter].getName());                        getProject().log("will try to cd to "                                         + target + " where a directory called " + array[icounter].getName()                                         + " exists", Project.MSG_DEBUG);                        for (int pcounter = 0; pcounter < array.length; pcounter++) {                            if (array[pcounter] != null                                && pcounter != icounter                                && target.equals(array[pcounter].getName())) {                                candidateFound = false;                                break;                            }                        }                        if (candidateFound) {                            break;                        }                    }                }            }            if (candidateFound) {                try {                    getProject().log("testing case sensitivity, attempting to cd to "                                     + target, Project.MSG_DEBUG);                    remoteSystemCaseSensitive  = !ftp.changeWorkingDirectory(target);                } catch (IOException ioe) {                    remoteSystemCaseSensitive = true;                } finally {                    try {                        ftp.changeWorkingDirectory(directory);                    } catch (IOException ioe) {                        throw new BuildException(ioe, getLocation());                    }                }                getProject().log("remote system is case sensitive : " + remoteSystemCaseSensitive,                                 Project.MSG_VERBOSE);                remoteSensitivityChecked = true;            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java        private void checkRemoteSensitivity(FTPFile[] array, String directory) {            if (array == null) {                return;            }            boolean candidateFound = false;            String target = null;            for (int icounter = 0; icounter < array.length; icounter++) {                if (array[icounter] != null && array[icounter].isDirectory()) {                    if (!array[icounter].getName().equals(".")                        && !array[icounter].getName().equals("..")) {                        candidateFound = true;                        target = fiddleName(array[icounter].getName());                        task.log("will try to cd to "                                         + target + " where a directory called " + array[icounter].getName()                                         + " exists", Project.MSG_DEBUG);                        for (int pcounter = 0; pcounter < array.length; pcounter++) {                            if (array[pcounter] != null                                && pcounter != icounter                                && target.equals(array[pcounter].getName())) {                                candidateFound = false;                                break;                            }                        }                        if (candidateFound) {                            break;                        }                    }                }            }            if (candidateFound) {                try {                    task.log("testing case sensitivity, attempting to cd to "                                     + target, Project.MSG_DEBUG);                    remoteSystemCaseSensitive  = !ftp.changeWorkingDirectory(target);                } catch (IOException ioe) {                    remoteSystemCaseSensitive = true;                } finally {                    try {                        ftp.changeWorkingDirectory(directory);                    } catch (IOException ioe) {                        throw new BuildException(ioe, task.getLocation());                    }                }                task.log("remote system is case sensitive : "                                      + remoteSystemCaseSensitive,                                      Project.MSG_VERBOSE);                remoteSensitivityChecked = true;            }        }
Clone class 78, 2 fragments, nominal size 14 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        private String fiddleName(String origin) {            StringBuffer result = new StringBuffer();            for (int icounter = 0; icounter < origin.length(); icounter++) {                if (Character.isLowerCase(origin.charAt(icounter))) {                    result.append(Character.toUpperCase(origin.charAt(icounter)));                } else if (Character.isUpperCase(origin.charAt(icounter))) {                    result.append(Character.toLowerCase(origin.charAt(icounter)));                } else {                    result.append(origin.charAt(icounter));                }            }            return result.toString();        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java        private String fiddleName(String origin) {            StringBuffer result = new StringBuffer();            for (int icounter = 0; icounter < origin.length(); icounter++) {                if (Character.isLowerCase(origin.charAt(icounter))) {                    result.append(Character.toUpperCase(origin.charAt(icounter)));                } else if (Character.isUpperCase(origin.charAt(icounter))) {                    result.append(Character.toLowerCase(origin.charAt(icounter)));                } else {                    result.append(origin.charAt(icounter));                }            }            return result.toString();        }
Clone class 79, 2 fragments, nominal size 36 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java            public AntFTPFile(AntFTPFile parent, String path) {                this.parent = parent;                this.client = parent.client;                Vector pathElements = SelectorUtils.tokenizePath(path);                try {                    boolean result = this.client.changeWorkingDirectory(parent.getAbsolutePath());                    //this should not happen, except if parent has been deleted by another process                    if (!result) {                        return;                    }                    this.curpwd = parent.getAbsolutePath();                } catch (IOException ioe) {                    throw new BuildException("could not change working dir to "                                             + parent.curpwd);                }                final int size = pathElements.size();                for (int fcount = 0; fcount < size - 1; fcount++) {                    String currentPathElement = (String) pathElements.elementAt(fcount);                    try {                        boolean result = this.client.changeWorkingDirectory(currentPathElement);                        if (!result && !isCaseSensitive()                            && (remoteSystemCaseSensitive || !remoteSensitivityChecked)) {                            currentPathElement = findPathElementCaseUnsensitive(this.curpwd,                                                                                currentPathElement);                            if (currentPathElement == null) {                                return;                            }                        } else if (!result) {                            return;                        }                        this.curpwd = getCurpwdPlusFileSep()                            + currentPathElement;                    } catch (IOException ioe) {                        throw new BuildException("could not change working dir to "                                                 + (String) pathElements.elementAt(fcount)                                                 + " from " + this.curpwd);                    }                }                String lastpathelement = (String) pathElements.elementAt(size - 1);                FTPFile [] theFiles = listFiles(this.curpwd);                this.ftpFile = getFile(theFiles, lastpathelement);            }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java            public AntFTPFile(AntFTPFile parent, String path) {                this.parent = parent;                this.client = parent.client;                Vector pathElements = SelectorUtils.tokenizePath(path);                try {                    boolean result = this.client.changeWorkingDirectory(parent.getAbsolutePath());                    //this should not happen, except if parent has been deleted by another process                    if (!result) {                        return;                    }                    this.curpwd = parent.getAbsolutePath();                } catch (IOException ioe) {                    throw new BuildException("could not change working dir to "                                             + parent.curpwd);                }                final int size = pathElements.size();                for (int fcount = 0; fcount < size - 1; fcount++) {                    String currentPathElement = (String) pathElements.elementAt(fcount);                    try {                        boolean result = this.client.changeWorkingDirectory(currentPathElement);                        if (!result && !isCaseSensitive()                            && (remoteSystemCaseSensitive || !remoteSensitivityChecked)) {                            currentPathElement = findPathElementCaseUnsensitive(this.curpwd,                                                                                currentPathElement);                            if (currentPathElement == null) {                                return;                            }                        } else if (!result) {                            return;                        }                        this.curpwd = getCurpwdPlusFileSep()                            + currentPathElement;                    } catch (IOException ioe) {                        throw new BuildException("could not change working dir to "                                                 + (String) pathElements.elementAt(fcount)                                                 + " from " + this.curpwd);                    }                }                String lastpathelement = (String) pathElements.elementAt(size - 1);                FTPFile [] theFiles = listFiles(this.curpwd);                this.ftpFile = getFile(theFiles, lastpathelement);            }
Clone class 80, 2 fragments, nominal size 13 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java            private String findPathElementCaseUnsensitive(String parentPath,                                                          String soughtPathElement) {                // we are already in the right path, so the second parameter                // is false                FTPFile[] theFiles = listFiles(parentPath, false);                if (theFiles == null) {                    return null;                }                for (int icounter = 0; icounter < theFiles.length; icounter++) {                    if (theFiles[icounter] != null                        && theFiles[icounter].getName().equalsIgnoreCase(soughtPathElement)) {                        return theFiles[icounter].getName();                    }                }                return null;            }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java            private String findPathElementCaseUnsensitive(String parentPath,                                                          String soughtPathElement) {                // we are already in the right path, so the second parameter                // is false                FTPFile[] theFiles = listFiles(parentPath, false);                if (theFiles == null) {                    return null;                }                for (int icounter = 0; icounter < theFiles.length; icounter++) {                    if (theFiles[icounter] != null                        && theFiles[icounter].getName().equalsIgnoreCase(soughtPathElement)) {                        return theFiles[icounter].getName();                    }                }                return null;            }
Clone class 81, 2 fragments, nominal size 12 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java            public String getRelativePath() throws IOException, BuildException {                if (!relativePathCalculated) {                    if (parent != null) {                        traversesSymlinks = parent.isTraverseSymlinks();                        relativePath = getRelativePath(parent.getAbsolutePath(),                                                       parent.getRelativePath());                    } else {                        relativePath = getRelativePath(rootPath, "");                        relativePathCalculated = true;                    }                }                return relativePath;            }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java            public String getRelativePath() throws IOException, BuildException {                if (!relativePathCalculated) {                    if (parent != null) {                        traversesSymlinks = parent.isTraverseSymlinks();                        relativePath = getRelativePath(parent.getAbsolutePath(),                                                       parent.getRelativePath());                    } else {                        relativePath = getRelativePath(rootPath, "");                        relativePathCalculated = true;                    }                }                return relativePath;            }
Clone class 82, 2 fragments, nominal size 28 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java            private String getRelativePath(String currentPath, String currentRelativePath) {                Vector pathElements = SelectorUtils.tokenizePath(getAbsolutePath(), remoteFileSep);                Vector pathElements2 = SelectorUtils.tokenizePath(currentPath, remoteFileSep);                String relPath = currentRelativePath;                final int size = pathElements.size();                for (int pcount = pathElements2.size(); pcount < size; pcount++) {                    String currentElement = (String) pathElements.elementAt(pcount);                    FTPFile[] theFiles = listFiles(currentPath);                    FTPFile theFile = null;                    if (theFiles != null) {                        theFile = getFile(theFiles, currentElement);                    }                    if (!relPath.equals("")) {                        relPath = relPath + remoteFileSep;                    }                    if (theFile == null) {                        // hit a hidden file assume not a symlink                        relPath = relPath + currentElement;                        currentPath = currentPath + remoteFileSep + currentElement;                        log("Hidden file " + relPath                            + " assumed to not be a symlink.",                            Project.MSG_VERBOSE);                    } else {                        traversesSymlinks = traversesSymlinks || theFile.isSymbolicLink();                        relPath = relPath + theFile.getName();                        currentPath = currentPath + remoteFileSep + theFile.getName();                    }                }                return relPath;            }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java            private String getRelativePath(String currentPath, String currentRelativePath) {                Vector pathElements = SelectorUtils.tokenizePath(getAbsolutePath(), task.getSeparator());                Vector pathElements2 = SelectorUtils.tokenizePath(currentPath,                                                                  task.getSeparator());                String relPath = currentRelativePath;                final int size = pathElements.size();                for (int pcount = pathElements2.size(); pcount < size; pcount++) {                    String currentElement = (String) pathElements.elementAt(pcount);                    FTPFile[] theFiles = listFiles(currentPath);                    FTPFile theFile = null;                    if (theFiles != null) {                        theFile = getFile(theFiles, currentElement);                    }                    if (!relPath.equals("")) {                        relPath = relPath + task.getSeparator();                    }                    if (theFile == null) {                        // hit a hidden file assume not a symlink                        relPath = relPath + currentElement;                        currentPath = currentPath + task.getSeparator()                            + currentElement;                        task.log("Hidden file " + relPath                                 + " assumed to not be a symlink.",                                 Project.MSG_VERBOSE);                    } else {                        traversesSymlinks = traversesSymlinks || theFile.isSymbolicLink();                        relPath = relPath + theFile.getName();                        currentPath = currentPath + task.getSeparator()                            + theFile.getName();                    }                }                return relPath;            }
Clone class 83, 2 fragments, nominal size 16 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java            public FTPFile getFile(FTPFile[] theFiles, String lastpathelement) {                if (theFiles == null) {                    return null;                }                for (int fcount = 0; fcount < theFiles.length; fcount++) {                    if (theFiles[fcount] != null) {                        if (theFiles[fcount].getName().equals(lastpathelement)) {                            return theFiles[fcount];                        } else if (!isCaseSensitive()                                   && theFiles[fcount].getName().equalsIgnoreCase(                                                                                  lastpathelement)) {                            return theFiles[fcount];                        }                    }                }                return null;            }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java            public FTPFile getFile(FTPFile[] theFiles, String lastpathelement) {                if (theFiles == null) {                    return null;                }                for (int fcount = 0; fcount < theFiles.length; fcount++) {                    if (theFiles[fcount] != null) {                        if (theFiles[fcount].getName().equals(lastpathelement)) {                            return theFiles[fcount];                        } else if (!isCaseSensitive()                                   && theFiles[fcount].getName().equalsIgnoreCase(                                                                                  lastpathelement)) {                            return theFiles[fcount];                        }                    }                }                return null;            }
Clone class 84, 2 fragments, nominal size 10 lines, similarity 90%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java            public AntFTPRootFile(FTPClient aclient, String remotedir) {                super(aclient, null, remotedir);                this.remotedir = remotedir;                try {                    this.getClient().changeWorkingDirectory(this.remotedir);                    this.setCurpwd(this.getClient().printWorkingDirectory());                } catch (IOException ioe) {                    throw new BuildException(ioe, getLocation());                }            }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java            public AntFTPRootFile(FTPClient aclient, String remotedir) {                super(aclient, null, remotedir);                this.remotedir = remotedir;                try {                    this.getClient().changeWorkingDirectory(this.remotedir);                    this.setCurpwd(this.getClient().printWorkingDirectory());                } catch (IOException ioe) {                    throw new BuildException(ioe, task.getLocation());                }            }
Clone class 85, 2 fragments, nominal size 34 lines, similarity 91%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    private boolean isFunctioningAsDirectory(FTPClient ftp, String dir, FTPFile file) {        boolean result = false;        String currentWorkingDir = null;        if (file.isDirectory()) {            return true;        } else if (file.isFile()) {            return false;        }        try {            currentWorkingDir = ftp.printWorkingDirectory();        } catch (IOException ioe) {            getProject().log("could not find current working directory " + dir                             + " while checking a symlink",                             Project.MSG_DEBUG);        }        if (currentWorkingDir != null) {            try {                result = ftp.changeWorkingDirectory(file.getLink());            } catch (IOException ioe) {                getProject().log("could not cd to " + file.getLink() + " while checking a symlink",                                 Project.MSG_DEBUG);            }            if (result) {                boolean comeback = false;                try {                    comeback = ftp.changeWorkingDirectory(currentWorkingDir);                } catch (IOException ioe) {                    getProject().log("could not cd back to " + dir + " while checking a symlink",                                     Project.MSG_ERR);                } finally {                    if (!comeback) {                        throw new BuildException("could not cd back to " + dir                                                 + " while checking a symlink");                    }                }            }        }        return result;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    private boolean isFunctioningAsDirectory(FTPClient ftp, String dir, FTPFile file) {        boolean result = false;        String currentWorkingDir = null;        if (file.isDirectory()) {            return true;        } else if (file.isFile()) {            return false;        }        try {            currentWorkingDir = ftp.printWorkingDirectory();        } catch (IOException ioe) {            task.log("could not find current working directory " + dir                                  + " while checking a symlink", Project.MSG_DEBUG);        }        if (currentWorkingDir != null) {            try {                result = ftp.changeWorkingDirectory(file.getLink());            } catch (IOException ioe) {                task.log("could not cd to " + file.getLink()                                      + " while checking a symlink",                                      Project.MSG_DEBUG);            }            if (result) {                boolean comeback = false;                try {                    comeback = ftp.changeWorkingDirectory(currentWorkingDir);                } catch (IOException ioe) {                    task.log("could not cd back to " + dir + " while checking a symlink",                                          Project.MSG_ERR);                } finally {                    if (!comeback) {                        throw new BuildException("could not cd back to " + dir                                                 + " while checking a symlink");                    }                }            }        }        return result;    }
Clone class 86, 2 fragments, nominal size 15 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    public void setRetriesAllowed(String retriesAllowed) {        if ("FOREVER".equalsIgnoreCase(retriesAllowed)) {            this.retriesAllowed = Retryable.RETRY_FOREVER;        } else {            try {                int retries = Integer.parseInt(retriesAllowed);                if (retries < Retryable.RETRY_FOREVER) {                    throw new BuildException(                                             "Invalid value for retriesAllowed attribute: "                                             + retriesAllowed);                }                this.retriesAllowed = retries;            } catch (NumberFormatException px) {                throw new BuildException(                                         "Invalid value for retriesAllowed attribute: "                                         + retriesAllowed);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTask.java    public void setRetriesAllowed(String retriesAllowed) {        if ("FOREVER".equalsIgnoreCase(retriesAllowed)) {            this.retriesAllowed = Retryable.RETRY_FOREVER;        } else {            try {                int retries = Integer.parseInt(retriesAllowed);                if (retries < Retryable.RETRY_FOREVER) {                    throw new BuildException(                                             "Invalid value for retriesAllowed attribute: "                                             + retriesAllowed);                }                this.retriesAllowed = retries;            } catch (NumberFormatException px) {                throw new BuildException(                                         "Invalid value for retriesAllowed attribute: "                                         + retriesAllowed);            }        }    }
Clone class 87, 2 fragments, nominal size 30 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void checkAttributes() throws BuildException {        if (server == null) {            throw new BuildException("server attribute must be set!");        }        if (userid == null) {            throw new BuildException("userid attribute must be set!");        }        if (password == null) {            throw new BuildException("password attribute must be set!");        }        if ((action == LIST_FILES) && (listing == null)) {            throw new BuildException("listing attribute must be set for list "                                     + "action!");        }        if (action == MK_DIR && remotedir == null) {            throw new BuildException("remotedir attribute must be set for "                                     + "mkdir action!");        }        if (action == CHMOD && chmod == null) {            throw new BuildException("chmod attribute must be set for chmod "                                     + "action!");        }        if (action == SITE_CMD && siteCommand == null) {            throw new BuildException("sitecommand attribute must be set for site "                                     + "action!");        }        if (this.isConfigurationSet) {            try {                Class.forName("org.apache.commons.net.ftp.FTPClientConfig");            } catch (ClassNotFoundException e) {                throw new BuildException(                                         "commons-net.jar >= 1.4.0 is required for at least one"                                         + " of the attributes specified.");            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTask.java    protected void checkAttributes() throws BuildException {        if (server == null) {            throw new BuildException("server attribute must be set!");        }        if (userid == null) {            throw new BuildException("userid attribute must be set!");        }        if (password == null) {            throw new BuildException("password attribute must be set!");        }        if ((action == LIST_FILES) && (listing == null)) {            throw new BuildException("listing attribute must be set for list "                                     + "action!");        }        if (action == MK_DIR && remotedir == null) {            throw new BuildException("remotedir attribute must be set for "                                     + "mkdir action!");        }        if (action == CHMOD && chmod == null) {            throw new BuildException("chmod attribute must be set for chmod "                                     + "action!");        }        if (action == SITE_CMD && siteCommand == null) {            throw new BuildException("sitecommand attribute must be set for site "                                     + "action!");        }        if (this.isConfigurationSet) {            try {                Class.forName("org.apache.commons.net.ftp.FTPClientConfig");            } catch (ClassNotFoundException e) {                throw new BuildException(                                         "commons-net.jar >= 1.4.0 is required for at least one"                                         + " of the attributes specified.");            }        }    }
Clone class 88, 2 fragments, nominal size 87 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected int transferFiles(final FTPClient ftp, FileSet fs)        throws IOException, BuildException {        DirectoryScanner ds;        if (action == SEND_FILES) {            ds = fs.getDirectoryScanner(getProject());        } else {            ds = new FTPDirectoryScanner(ftp);            fs.setupDirectoryScanner(ds, getProject());            ds.setFollowSymlinks(fs.isFollowSymlinks());            ds.scan();        }        String[] dsfiles = null;        if (action == RM_DIR) {            dsfiles = ds.getIncludedDirectories();        } else {            dsfiles = ds.getIncludedFiles();        }        String dir = null;        if ((ds.getBasedir() == null)            && ((action == SEND_FILES) || (action == GET_FILES))) {            throw new BuildException("the dir attribute must be set for send "                                     + "and get actions");        } else {            if ((action == SEND_FILES) || (action == GET_FILES)) {                dir = ds.getBasedir().getAbsolutePath();            }        }        // If we are doing a listing, we need the output stream created now.        BufferedWriter bw = null;        try {            if (action == LIST_FILES) {                File pd = listing.getParentFile();                if (!pd.exists()) {                    pd.mkdirs();                }                bw = new BufferedWriter(new FileWriter(listing));            }            RetryHandler h = new RetryHandler(this.retriesAllowed, this);            if (action == RM_DIR) {                // to remove directories, start by the end of the list                // the trunk does not let itself be removed before the leaves                for (int i = dsfiles.length - 1; i >= 0; i--) {                    final String dsfile = dsfiles[i];                    executeRetryable(h, new Retryable() {                            public void execute() throws IOException {                                rmDir(ftp, dsfile);                            }                        }, dsfile);                }            } else {                final BufferedWriter fbw = bw;                final String fdir = dir;                if (this.newerOnly) {                    this.granularityMillis =                        this.timestampGranularity.getMilliseconds(action);                }                for (int i = 0; i < dsfiles.length; i++) {                    final String dsfile = dsfiles[i];                    executeRetryable(h, new Retryable() {                            public void execute() throws IOException {                                switch (action) {                                case SEND_FILES:                                    sendFile(ftp, fdir, dsfile);                                    break;                                case GET_FILES:                                    getFile(ftp, fdir, dsfile);                                    break;                                case DEL_FILES:                                    delFile(ftp, dsfile);                                    break;                                case LIST_FILES:                                    listFile(ftp, fbw, dsfile);                                    break;                                case CHMOD:                                    doSiteCommand(ftp, "chmod " + chmod                                                  + " " + resolveFile(dsfile));                                    transferred++;                                    break;                                default:                                    throw new BuildException("unknown ftp action " + action);                                }                            }                        }, dsfile);                }            }        } finally {            FileUtils.close(bw);        }        return dsfiles.length;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected int transferFiles(final FTPClient ftp, FileSet fs)        throws IOException, BuildException {        DirectoryScanner ds;        if (task.getAction() == FTPTask.SEND_FILES) {            ds = fs.getDirectoryScanner(task.getProject());        } else {            ds = new FTPDirectoryScanner(ftp);            fs.setupDirectoryScanner(ds, task.getProject());            ds.setFollowSymlinks(fs.isFollowSymlinks());            ds.scan();        }        String[] dsfiles = null;        if (task.getAction() == FTPTask.RM_DIR) {            dsfiles = ds.getIncludedDirectories();        } else {            dsfiles = ds.getIncludedFiles();        }        String dir = null;        if ((ds.getBasedir() == null)            && ((task.getAction() == FTPTask.SEND_FILES) || (task.getAction() == FTPTask.GET_FILES))) {            throw new BuildException("the dir attribute must be set for send "                                     + "and get actions");        } else {            if ((task.getAction() == FTPTask.SEND_FILES) || (task.getAction() == FTPTask.GET_FILES)) {                dir = ds.getBasedir().getAbsolutePath();            }        }        // If we are doing a listing, we need the output stream created now.        BufferedWriter bw = null;        try {            if (task.getAction() == FTPTask.LIST_FILES) {                File pd = task.getListing().getParentFile();                if (!pd.exists()) {                    pd.mkdirs();                }                bw = new BufferedWriter(new FileWriter(task.getListing()));            }            RetryHandler h = new RetryHandler(task.getRetriesAllowed(), task);            if (task.getAction() == FTPTask.RM_DIR) {                // to remove directories, start by the end of the list                // the trunk does not let itself be removed before the leaves                for (int i = dsfiles.length - 1; i >= 0; i--) {                    final String dsfile = dsfiles[i];                    executeRetryable(h, new Retryable() {                            public void execute() throws IOException {                                rmDir(ftp, dsfile);                            }                        }, dsfile);                }            } else {                final BufferedWriter fbw = bw;                final String fdir = dir;                if (task.isNewer()) {                    task.setGranularityMillis(task.getTimestampGranularity()                                              .getMilliseconds(task.getAction()));                }                for (int i = 0; i < dsfiles.length; i++) {                    final String dsfile = dsfiles[i];                    executeRetryable(h, new Retryable() {                            public void execute() throws IOException {                                switch (task.getAction()) {                                case FTPTask.SEND_FILES:                                    sendFile(ftp, fdir, dsfile);                                    break;                                case FTPTask.GET_FILES:                                    getFile(ftp, fdir, dsfile);                                    break;                                case FTPTask.DEL_FILES:                                    delFile(ftp, dsfile);                                    break;                                case FTPTask.LIST_FILES:                                    listFile(ftp, fbw, dsfile);                                    break;                                case FTPTask.CHMOD:                                    doSiteCommand(ftp, "chmod " + task.getChmod() + " "                                                  + resolveFile(dsfile));                                    transferred++;                                    break;                                default:                                    throw new BuildException("unknown ftp action "                                                             + task.getAction());                                }                            }                        }, dsfile);                }            }        } finally {            if (bw != null) {                bw.close();            }        }        return dsfiles.length;    }
Clone class 89, 2 fragments, nominal size 20 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void transferFiles(FTPClient ftp)        throws IOException, BuildException {        transferred = 0;        skipped = 0;        if (filesets.size() == 0) {            throw new BuildException("at least one fileset must be specified.");        } else {            // get files from filesets            final int size = filesets.size();            for (int i = 0; i < size; i++) {                FileSet fs = (FileSet) filesets.elementAt(i);                if (fs != null) {                    transferFiles(ftp, fs);                }            }        }        log(transferred + " " + ACTION_TARGET_STRS[action] + " "            + COMPLETED_ACTION_STRS[action]);        if (skipped != 0) {            log(skipped + " " + ACTION_TARGET_STRS[action]                + " were not successfully " + COMPLETED_ACTION_STRS[action]);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void transferFiles(FTPClient ftp)        throws IOException, BuildException {        transferred = 0;        skipped = 0;        if (task.getFilesets().size() == 0) {            throw new BuildException("at least one fileset must be specified.");        } else {            // get files from filesets            final int size = task.getFilesets().size();            for (int i = 0; i < size; i++) {                FileSet fs = (FileSet) task.getFilesets().elementAt(i);                if (fs != null) {                    transferFiles(ftp, fs);                }            }        }        task.log(transferred + " " + FTPTask.ACTION_TARGET_STRS[task.getAction()] + " "                 + FTPTask.COMPLETED_ACTION_STRS[task.getAction()]);        if (skipped != 0) {            task.log(skipped + " " + FTPTask.ACTION_TARGET_STRS[task.getAction()]                     + " were not successfully " + FTPTask.COMPLETED_ACTION_STRS[task.getAction()]);        }    }
Clone class 90, 2 fragments, nominal size 40 lines, similarity 97%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void createParents(FTPClient ftp, String filename)        throws IOException, BuildException {        File dir = new File(filename);        if (dirCache.contains(dir)) {            return;        }        Vector parents = new Vector();        String dirname;        while ((dirname = dir.getParent()) != null) {            File checkDir = new File(dirname);            if (dirCache.contains(checkDir)) {                break;            }            dir = checkDir;            parents.addElement(dir);        }        // find first non cached dir        int i = parents.size() - 1;        if (i >= 0) {            String cwd = ftp.printWorkingDirectory();            String parent = dir.getParent();            if (parent != null) {                if (!ftp.changeWorkingDirectory(resolveFile(parent))) {                    throw new BuildException("could not change to "                                             + "directory: " + ftp.getReplyString());                }            }            while (i >= 0) {                dir = (File) parents.elementAt(i--);                // check if dir exists by trying to change into it.                if (!ftp.changeWorkingDirectory(dir.getName())) {                    // could not change to it - try to create it                    log("creating remote directory "                        + resolveFile(dir.getPath()), Project.MSG_VERBOSE);                    if (!ftp.makeDirectory(dir.getName())) {                        handleMkDirFailure(ftp);                    }                    if (!ftp.changeWorkingDirectory(dir.getName())) {                        throw new BuildException("could not change to "                                                 + "directory: " + ftp.getReplyString());                    }                }                dirCache.add(dir);            }            ftp.changeWorkingDirectory(cwd);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void createParents(FTPClient ftp, String filename)        throws IOException, BuildException {        File dir = new File(filename);        if (dirCache.contains(dir)) {            return;        }        Vector parents = new Vector();        String dirname;        while ((dirname = dir.getParent()) != null) {            File checkDir = new File(dirname);            if (dirCache.contains(checkDir)) {                break;            }            dir = checkDir;            parents.addElement(dir);        }        // find first non cached dir        int i = parents.size() - 1;        if (i >= 0) {            String cwd = ftp.printWorkingDirectory();            String parent = dir.getParent();            if (parent != null) {                if (!ftp.changeWorkingDirectory(resolveFile(parent))) {                    throw new BuildException("could not change to "                                             + "directory: " + ftp.getReplyString());                }            }            while (i >= 0) {                dir = (File) parents.elementAt(i--);                // check if dir exists by trying to change into it.                if (!ftp.changeWorkingDirectory(dir.getName())) {                    // could not change to it - try to create it                    task.log("creating remote directory "                             + resolveFile(dir.getPath()), Project.MSG_VERBOSE);                    if (!ftp.makeDirectory(dir.getName())) {                        handleMkDirFailure(ftp);                    }                    if (!ftp.changeWorkingDirectory(dir.getName())) {                        throw new BuildException("could not change to "                                                 + "directory: " + ftp.getReplyString());                    }                }                dirCache.add(dir);            }            ftp.changeWorkingDirectory(cwd);        }    }
Clone class 91, 2 fragments, nominal size 27 lines, similarity 96%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    private long getTimeDiff(FTPClient ftp) {        long returnValue = 0;        File tempFile = findFileName(ftp);        try {            // create a local temporary file            FILE_UTILS.createNewFile(tempFile);            long localTimeStamp = tempFile.lastModified();            BufferedInputStream instream = new BufferedInputStream(new FileInputStream(tempFile));            ftp.storeFile(tempFile.getName(), instream);            instream.close();            boolean success = FTPReply.isPositiveCompletion(ftp.getReplyCode());            if (success) {                FTPFile [] ftpFiles = ftp.listFiles(tempFile.getName());                if (ftpFiles.length == 1) {                    long remoteTimeStamp = ftpFiles[0].getTimestamp().getTime().getTime();                    returnValue = localTimeStamp - remoteTimeStamp;                }                ftp.deleteFile(ftpFiles[0].getName());            }            // delegate the deletion of the local temp file to the delete task            // because of race conditions occurring on Windows            Delete mydelete = new Delete();            mydelete.bindToOwner(this);            mydelete.setFile(tempFile.getCanonicalFile());            mydelete.execute();        } catch (Exception e) {            throw new BuildException(e, getLocation());        }        return returnValue;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    private long getTimeDiff(FTPClient ftp) {        long returnValue = 0;        File tempFile = findFileName(ftp);        try {            // create a local temporary file            FILE_UTILS.createNewFile(tempFile);            long localTimeStamp = tempFile.lastModified();            BufferedInputStream instream = new BufferedInputStream(new FileInputStream(tempFile));            ftp.storeFile(tempFile.getName(), instream);            instream.close();            boolean success = FTPReply.isPositiveCompletion(ftp.getReplyCode());            if (success) {                FTPFile [] ftpFiles = ftp.listFiles(tempFile.getName());                if (ftpFiles.length == 1) {                    long remoteTimeStamp = ftpFiles[0].getTimestamp().getTime().getTime();                    returnValue = localTimeStamp - remoteTimeStamp;                }                ftp.deleteFile(ftpFiles[0].getName());            }            // delegate the deletion of the local temp file to the delete task            // because of race conditions occurring on Windows            Delete mydelete = new Delete();            mydelete.bindToOwner(task);            mydelete.setFile(tempFile.getCanonicalFile());            mydelete.execute();        } catch (Exception e) {            throw new BuildException(e, task.getLocation());        }        return returnValue;    }
Clone class 92, 2 fragments, nominal size 29 lines, similarity 96%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    private File findFileName(FTPClient ftp) {        FTPFile [] theFiles = null;        final int maxIterations = 1000;        for (int counter = 1; counter < maxIterations; counter++) {            File localFile = FILE_UTILS.createTempFile(                                                       "ant" + Integer.toString(counter), ".tmp",                                                       null, false, false);            String fileName = localFile.getName();            boolean found = false;            try {                if (theFiles == null) {                    theFiles = ftp.listFiles();                }                for (int counter2 = 0; counter2 < theFiles.length; counter2++) {                    if (theFiles[counter2] != null                        && theFiles[counter2].getName().equals(fileName)) {                        found = true;                        break;                    }                }            } catch (IOException ioe) {                throw new BuildException(ioe, getLocation());            }            if (!found) {                localFile.deleteOnExit();                return localFile;            }        }        return null;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    private File findFileName(FTPClient ftp) {        FTPFile [] theFiles = null;        final int maxIterations = 1000;        for (int counter = 1; counter < maxIterations; counter++) {            File localFile = FILE_UTILS.createTempFile(                                                       "ant" + Integer.toString(counter), ".tmp",                                                       null, false, false);            String fileName = localFile.getName();            boolean found = false;            try {                if (theFiles == null) {                    theFiles = ftp.listFiles();                }                for (int counter2 = 0; counter2 < theFiles.length; counter2++) {                    if (theFiles[counter2] != null                        && theFiles[counter2].getName().equals(fileName)) {                        found = true;                        break;                    }                }            } catch (IOException ioe) {                throw new BuildException(ioe, task.getLocation());            }            if (!found) {                localFile.deleteOnExit();                return localFile;            }        }        return null;    }
Clone class 93, 2 fragments, nominal size 34 lines, similarity 79%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected boolean isUpToDate(FTPClient ftp, File localFile,                                 String remoteFile)        throws IOException, BuildException {        log("checking date for " + remoteFile, Project.MSG_VERBOSE);        FTPFile[] files = ftp.listFiles(remoteFile);        // For Microsoft's Ftp-Service an Array with length 0 is        // returned if configured to return listings in "MS-DOS"-Format        if (files == null || files.length == 0) {            // If we are sending files, then assume out of date.            // If we are getting files, then throw an error            if (action == SEND_FILES) {                log("Could not date test remote file: " + remoteFile                    + "assuming out of date.", Project.MSG_VERBOSE);                return false;            } else {                throw new BuildException("could not date test remote file: "                                         + ftp.getReplyString());            }        }        long remoteTimestamp = files[0].getTimestamp().getTime().getTime();        long localTimestamp = localFile.lastModified();        long adjustedRemoteTimestamp =            remoteTimestamp + this.timeDiffMillis + this.granularityMillis;        StringBuffer msg;        synchronized(TIMESTAMP_LOGGING_SDF) {            msg = new StringBuffer("   [")                .append(TIMESTAMP_LOGGING_SDF.format(new Date(localTimestamp)))                .append("] local");        }        log(msg.toString(), Project.MSG_VERBOSE);        synchronized(TIMESTAMP_LOGGING_SDF) {            msg = new StringBuffer("   [")                .append(TIMESTAMP_LOGGING_SDF.format(new Date(adjustedRemoteTimestamp)))                .append("] remote");        }        if (remoteTimestamp != adjustedRemoteTimestamp) {            synchronized(TIMESTAMP_LOGGING_SDF) {                msg.append(" - (raw: ")                    .append(TIMESTAMP_LOGGING_SDF.format(new Date(remoteTimestamp)))                    .append(")");            }        }        log(msg.toString(), Project.MSG_VERBOSE);        if (this.action == SEND_FILES) {            return adjustedRemoteTimestamp >= localTimestamp;        } else {            return localTimestamp >= adjustedRemoteTimestamp;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected boolean isUpToDate(FTPClient ftp, File localFile,                                 String remoteFile)        throws IOException, BuildException {        task.log("checking date for " + remoteFile, Project.MSG_VERBOSE);        FTPFile[] files = ftp.listFiles(remoteFile);        // For Microsoft's Ftp-Service an Array with length 0 is        // returned if configured to return listings in "MS-DOS"-Format        if (files == null || files.length == 0) {            // If we are sending files, then assume out of date.            // If we are getting files, then throw an error            if (task.getAction() == FTPTask.SEND_FILES) {                task.log("Could not date test remote file: " + remoteFile                         + "assuming out of date.", Project.MSG_VERBOSE);                return false;            } else {                throw new BuildException("could not date test remote file: "                                         + ftp.getReplyString());            }        }        long remoteTimestamp = files[0].getTimestamp().getTime().getTime();        long localTimestamp = localFile.lastModified();        long adjustedRemoteTimestamp = remoteTimestamp + task.getTimeDiffMillis()            + task.getGranularityMillis();        StringBuffer msg;        synchronized(TIMESTAMP_LOGGING_SDF) {            msg = new StringBuffer("   [")                .append(TIMESTAMP_LOGGING_SDF.format(new Date(localTimestamp)))                .append("] local");        }        task.log(msg.toString(), Project.MSG_VERBOSE);        synchronized(TIMESTAMP_LOGGING_SDF) {            msg = new StringBuffer("   [")                .append(TIMESTAMP_LOGGING_SDF.format(new Date(adjustedRemoteTimestamp)))                .append("] remote");        }        if (remoteTimestamp != adjustedRemoteTimestamp) {            synchronized(TIMESTAMP_LOGGING_SDF) {                msg.append(" - (raw: ")                    .append(TIMESTAMP_LOGGING_SDF.format(new Date(remoteTimestamp)))                    .append(")");            }        }        task.log(msg.toString(), Project.MSG_VERBOSE);        if (task.getAction() == FTPTask.SEND_FILES) {            return adjustedRemoteTimestamp >= localTimestamp;        } else {            return localTimestamp >= adjustedRemoteTimestamp;        }    }
Clone class 94, 2 fragments, nominal size 17 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void doSiteCommand(FTPClient ftp, String theCMD)        throws IOException, BuildException {        boolean rc;        String[] myReply = null;        log("Doing Site Command: " + theCMD, Project.MSG_VERBOSE);        rc = ftp.sendSiteCommand(theCMD);        if (!rc) {            log("Failed to issue Site Command: " + theCMD, Project.MSG_WARN);        } else {            myReply = ftp.getReplyStrings();            for (int x = 0; x < myReply.length; x++) {                if (myReply[x] != null && myReply[x].indexOf("200") == -1) {                    log(myReply[x], Project.MSG_WARN);                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void doSiteCommand(FTPClient ftp, String theCMD)        throws IOException, BuildException {        boolean rc;        String[] myReply = null;        task.log("Doing Site Command: " + theCMD, Project.MSG_VERBOSE);        rc = ftp.sendSiteCommand(theCMD);        if (!rc) {            task.log("Failed to issue Site Command: " + theCMD, Project.MSG_WARN);        } else {            myReply = ftp.getReplyStrings();            for (int x = 0; x < myReply.length; x++) {                if (myReply[x].indexOf("200") == -1) {                    task.log(myReply[x], Project.MSG_WARN);                }            }        }    }
Clone class 95, 2 fragments, nominal size 33 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void sendFile(FTPClient ftp, String dir, String filename)        throws IOException, BuildException {        InputStream instream = null;        try {            // TODO - why not simply new File(dir, filename)?            File file = getProject().resolveFile(new File(dir, filename).getPath());            if (newerOnly && isUpToDate(ftp, file, resolveFile(filename))) {                return;            }            if (verbose) {                log("transferring " + file.getAbsolutePath());            }            instream = new BufferedInputStream(new FileInputStream(file));            createParents(ftp, filename);            ftp.storeFile(resolveFile(filename), instream);            boolean success = FTPReply.isPositiveCompletion(ftp.getReplyCode());            if (!success) {                String s = "could not put file: " + ftp.getReplyString();                if (skipFailedTransfers) {                    log(s, Project.MSG_WARN);                    skipped++;                } else {                    throw new BuildException(s);                }            } else {                // see if we should issue a chmod command                if (chmod != null) {                    doSiteCommand(ftp, "chmod " + chmod + " " + resolveFile(filename));                }                log("File " + file.getAbsolutePath() + " copied to " + server,                    Project.MSG_VERBOSE);                transferred++;            }        } finally {            FileUtils.close(instream);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void sendFile(FTPClient ftp, String dir, String filename)        throws IOException, BuildException {        InputStream instream = null;        try {            // TODO - why not simply new File(dir, filename)?            File file = task.getProject().resolveFile(new File(dir, filename).getPath());            if (task.isNewer() && isUpToDate(ftp, file, resolveFile(filename))) {                return;            }            if (task.isVerbose()) {                task.log("transferring " + file.getAbsolutePath());            }            instream = new BufferedInputStream(new FileInputStream(file));            createParents(ftp, filename);            ftp.storeFile(resolveFile(filename), instream);            boolean success = FTPReply.isPositiveCompletion(ftp.getReplyCode());            if (!success) {                String s = "could not put file: " + ftp.getReplyString();                if (task.isSkipFailedTransfers()) {                    task.log(s, Project.MSG_WARN);                    skipped++;                } else {                    throw new BuildException(s);                }            } else {                // see if we should issue a chmod command                if (task.getChmod() != null) {                    doSiteCommand(ftp, "chmod " + task.getChmod() + " "                                  + resolveFile(filename));                }                task.log("File " + file.getAbsolutePath() + " copied to " + task.getServer(),                         Project.MSG_VERBOSE);                transferred++;            }        } finally {            FileUtils.close(instream);        }    }
Clone class 96, 4 fragments, nominal size 17 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void delFile(FTPClient ftp, String filename)        throws IOException, BuildException {        if (verbose) {            log("deleting " + filename);        }        if (!ftp.deleteFile(resolveFile(filename))) {            String s = "could not delete file: " + ftp.getReplyString();            if (skipFailedTransfers) {                log(s, Project.MSG_WARN);                skipped++;            } else {                throw new BuildException(s);            }        } else {            log("File " + filename + " deleted from " + server,                Project.MSG_VERBOSE);            transferred++;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void rmDir(FTPClient ftp, String dirname)        throws IOException, BuildException {        if (verbose) {            log("removing " + dirname);        }        if (!ftp.removeDirectory(resolveFile(dirname))) {            String s = "could not remove directory: " + ftp.getReplyString();            if (skipFailedTransfers) {                log(s, Project.MSG_WARN);                skipped++;            } else {                throw new BuildException(s);            }        } else {            log("Directory " + dirname + " removed from " + server,                Project.MSG_VERBOSE);            transferred++;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void delFile(FTPClient ftp, String filename)        throws IOException, BuildException {        if (task.isVerbose()) {            task.log("deleting " + filename);        }        if (!ftp.deleteFile(resolveFile(filename))) {            String s = "could not delete file: " + ftp.getReplyString();            if (task.isSkipFailedTransfers()) {                task.log(s, Project.MSG_WARN);                skipped++;            } else {                throw new BuildException(s);            }        } else {            task.log("File " + filename + " deleted from " + task.getServer(),                     Project.MSG_VERBOSE);            transferred++;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void rmDir(FTPClient ftp, String dirname)        throws IOException, BuildException {        if (task.isVerbose()) {            task.log("removing " + dirname);        }        if (!ftp.removeDirectory(resolveFile(dirname))) {            String s = "could not remove directory: " + ftp.getReplyString();            if (task.isSkipFailedTransfers()) {                task.log(s, Project.MSG_WARN);                skipped++;            } else {                throw new BuildException(s);            }        } else {            task.log("Directory " + dirname + " removed from " + task.getServer(),                     Project.MSG_VERBOSE);            transferred++;        }    }
Clone class 97, 2 fragments, nominal size 40 lines, similarity 80%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void getFile(FTPClient ftp, String dir, String filename)        throws IOException, BuildException {        OutputStream outstream = null;        try {            File file = getProject().resolveFile(new File(dir, filename).getPath());            if (newerOnly && isUpToDate(ftp, file, resolveFile(filename))) {                return;            }            if (verbose) {                log("transferring " + filename + " to "                    + file.getAbsolutePath());            }            File pdir = file.getParentFile();            if (!pdir.exists()) {                pdir.mkdirs();            }            outstream = new BufferedOutputStream(new FileOutputStream(file));            ftp.retrieveFile(resolveFile(filename), outstream);            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {                String s = "could not get file: " + ftp.getReplyString();                if (skipFailedTransfers) {                    log(s, Project.MSG_WARN);                    skipped++;                } else {                    throw new BuildException(s);                }            } else {                log("File " + file.getAbsolutePath() + " copied from "                    + server, Project.MSG_VERBOSE);                transferred++;                if (preserveLastModified) {                    outstream.close();                    outstream = null;                    FTPFile[] remote = ftp.listFiles(resolveFile(filename));                    if (remote.length > 0) {                        FILE_UTILS.setFileLastModified(file,                                                       remote[0].getTimestamp()                                                       .getTime().getTime());                    }                }            }        } finally {            FileUtils.close(outstream);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void getFile(FTPClient ftp, String dir, String filename)        throws IOException, BuildException {        OutputStream outstream = null;        try {            File file = task.getProject().resolveFile(new File(dir, filename).getPath());            if (task.isNewer() && isUpToDate(ftp, file, resolveFile(filename))) {                return;            }            if (task.isVerbose()) {                task.log("transferring " + filename + " to "                         + file.getAbsolutePath());            }            File pdir = file.getParentFile();            if (!pdir.exists()) {                pdir.mkdirs();            }            outstream = new BufferedOutputStream(new FileOutputStream(file));            ftp.retrieveFile(resolveFile(filename), outstream);            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {                String s = "could not get file: " + ftp.getReplyString();                if (task.isSkipFailedTransfers()) {                    task.log(s, Project.MSG_WARN);                    skipped++;                } else {                    throw new BuildException(s);                }            } else {                task.log(                         "File " + file.getAbsolutePath() + " copied from "                         + task.getServer(), Project.MSG_VERBOSE);                transferred++;                if (task.isPreserveLastModified()) {                    outstream.close();                    outstream = null;                    FTPFile[] remote = ftp.listFiles(resolveFile(filename));                    if (remote.length > 0) {                        FILE_UTILS.setFileLastModified(file,                                                       remote[0].getTimestamp()                                                       .getTime().getTime());                    }                }            }        } finally {            FileUtils.close(outstream);        }    }
Clone class 98, 2 fragments, nominal size 11 lines, similarity 81%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void listFile(FTPClient ftp, BufferedWriter bw, String filename)        throws IOException, BuildException {        if (verbose) {            log("listing " + filename);        }        FTPFile[] ftpfiles = ftp.listFiles(resolveFile(filename));        if (ftpfiles != null && ftpfiles.length > 0) {            bw.write(ftpfiles[0].toString());            bw.newLine();            transferred++;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void listFile(FTPClient ftp, BufferedWriter bw, String filename)        throws IOException, BuildException {        if (task.isVerbose()) {            task.log("listing " + filename);        }        FTPFile[] ftpfiles = ftp.listFiles(resolveFile(filename));        if (ftpfiles != null && ftpfiles.length > 0) {            bw.write(ftpfiles[0].toString());            bw.newLine();            transferred++;        }    }
Clone class 99, 2 fragments, nominal size 38 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java    protected void makeRemoteDir(FTPClient ftp, String dir)        throws IOException, BuildException {        String workingDirectory = ftp.printWorkingDirectory();        if (verbose) {            if (dir.startsWith("/") || workingDirectory == null) {                log("Creating directory: " + dir + " in /");            } else {                log("Creating directory: " + dir + " in " + workingDirectory);            }        }        if (dir.startsWith("/")) {            ftp.changeWorkingDirectory("/");        }        String subdir = "";        StringTokenizer st = new StringTokenizer(dir, "/");        while (st.hasMoreTokens()) {            subdir = st.nextToken();            log("Checking " + subdir, Project.MSG_DEBUG);            if (!ftp.changeWorkingDirectory(subdir)) {                if (!ftp.makeDirectory(subdir)) {                    // codes 521, 550 and 553 can be produced by FTP Servers                    //  to indicate that an attempt to create a directory has                    //  failed because the directory already exists.                    int rc = ftp.getReplyCode();                    if (!(ignoreNoncriticalErrors                          && (rc == CODE_550 || rc == CODE_553                              || rc == CODE_521))) {                        throw new BuildException("could not create directory: "                                                 + ftp.getReplyString());                    }                    if (verbose) {                        log("Directory already exists");                    }                } else {                    if (verbose) {                        log("Directory created OK");                    }                    ftp.changeWorkingDirectory(subdir);                }            }        }        if (workingDirectory != null) {            ftp.changeWorkingDirectory(workingDirectory);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java    protected void makeRemoteDir(FTPClient ftp, String dir)        throws IOException, BuildException {        String workingDirectory = ftp.printWorkingDirectory();        if (task.isVerbose()) {            if (dir.startsWith("/") || workingDirectory == null) {                task.log("Creating directory: " + dir + " in /");            } else {                task.log("Creating directory: " + dir + " in " + workingDirectory);            }        }        if (dir.startsWith("/")) {            ftp.changeWorkingDirectory("/");        }        String subdir = "";        StringTokenizer st = new StringTokenizer(dir, "/");        while (st.hasMoreTokens()) {            subdir = st.nextToken();            task.log("Checking " + subdir, Project.MSG_DEBUG);            if (!ftp.changeWorkingDirectory(subdir)) {                if (!ftp.makeDirectory(subdir)) {                    // codes 521, 550 and 553 can be produced by FTP Servers                    //  to indicate that an attempt to create a directory has                    //  failed because the directory already exists.                    int rc = ftp.getReplyCode();                    if (!(task.isIgnoreNoncriticalErrors() && (rc == CODE_550                                                               || rc == CODE_553                                                               || rc == CODE_521))) {                        throw new BuildException("could not create directory: "                                                 + ftp.getReplyString());                    }                    if (task.isVerbose()) {                        task.log("Directory already exists");                    }                } else {                    if (task.isVerbose()) {                        task.log("Directory created OK");                    }                    ftp.changeWorkingDirectory(subdir);                }            }        }        if (workingDirectory != null) {            ftp.changeWorkingDirectory(workingDirectory);        }    }
Clone class 100, 2 fragments, nominal size 21 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        public int getAction() {            String actionL = getValue().toLowerCase(Locale.ENGLISH);            if (actionL.equals("send") || actionL.equals("put")) {                return SEND_FILES;            } else if (actionL.equals("recv") || actionL.equals("get")) {                return GET_FILES;            } else if (actionL.equals("del") || actionL.equals("delete")) {                return DEL_FILES;            } else if (actionL.equals("list")) {                return LIST_FILES;            } else if (actionL.equals("chmod")) {                return CHMOD;            } else if (actionL.equals("mkdir")) {                return MK_DIR;            } else if (actionL.equals("rmdir")) {                return RM_DIR;            } else if (actionL.equals("site")) {                return SITE_CMD;            }            return SEND_FILES;        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTask.java        public int getAction() {            String actionL = getValue().toLowerCase(Locale.ENGLISH);            if (actionL.equals("send") || actionL.equals("put")) {                return SEND_FILES;            } else if (actionL.equals("recv") || actionL.equals("get")) {                return GET_FILES;            } else if (actionL.equals("del") || actionL.equals("delete")) {                return DEL_FILES;            } else if (actionL.equals("list")) {                return LIST_FILES;            } else if (actionL.equals("chmod")) {                return CHMOD;            } else if (actionL.equals("mkdir")) {                return MK_DIR;            } else if (actionL.equals("rmdir")) {                return RM_DIR;            } else if (actionL.equals("site")) {                return SITE_CMD;            }            return SEND_FILES;        }
Clone class 101, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java        public long getMilliseconds(int action) {            String granularityU = getValue().toUpperCase(Locale.ENGLISH);            if ("".equals(granularityU)) {                if (action == SEND_FILES) {                    return GRANULARITY_MINUTE;                }            } else if ("MINUTE".equals(granularityU)) {                return GRANULARITY_MINUTE;            }            return 0L;        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTask.java        public long getMilliseconds(int action) {            String granularityU = getValue().toUpperCase(Locale.ENGLISH);            if ("".equals(granularityU)) {                if (action == SEND_FILES) {                    return GRANULARITY_MINUTE;                }            } else if ("MINUTE".equals(granularityU)) {                return GRANULARITY_MINUTE;            }            return 0L;        }
Clone class 102, 2 fragments, nominal size 32 lines, similarity 96%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/RExecTask.java        public void waitForString(String s, Integer timeout) {            InputStream is = this.getInputStream();            try {                StringBuffer sb = new StringBuffer();                int windowStart = -s.length();                if (timeout == null || timeout.intValue() == 0) {                    while (windowStart < 0                           || !sb.substring(windowStart).equals(s)) {                        sb.append((char) is.read());                        windowStart++;                    }                } else {                    Calendar endTime = Calendar.getInstance();                    endTime.add(Calendar.SECOND, timeout.intValue());                    while (windowStart < 0                           || !sb.substring(windowStart).equals(s)) {                        while (Calendar.getInstance().before(endTime)                            && is.available() == 0) {                            Thread.sleep(PAUSE_TIME);                        }                        if (is.available() == 0) {                            throw new BuildException(                                "Response timed-out waiting for \"" + s + '\"',                                getLocation());                        }                        sb.append((char) is.read());                        windowStart++;                    }                }                log(sb.toString(), Project.MSG_INFO);            } catch (BuildException be) {                throw be;            } catch (Exception e) {                throw new BuildException(e, getLocation());            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java        public void waitForString(String s, Integer timeout) {            InputStream is = this.getInputStream();            try {                StringBuffer sb = new StringBuffer();                int windowStart = -s.length();                if (timeout == null || timeout.intValue() == 0) {                    while (windowStart < 0                           || !sb.substring(windowStart).equals(s)) {                        sb.append((char) is.read());                        windowStart++;                    }                } else {                    Calendar endTime = Calendar.getInstance();                    endTime.add(Calendar.SECOND, timeout.intValue());                    while (windowStart < 0                           || !sb.substring(windowStart).equals(s)) {                        while (Calendar.getInstance().before(endTime)                               && is.available() == 0) {                            Thread.sleep(WAIT_INTERVAL);                        }                        if (is.available() == 0) {                            log("Read before running into timeout: "                                + sb.toString(), Project.MSG_DEBUG);                            throw new BuildException(                                "Response timed-out waiting for \"" + s + '\"',                                getLocation());                        }                        sb.append((char) is.read());                        windowStart++;                    }                }                log(sb.toString(), Project.MSG_INFO);            } catch (BuildException be) {                throw be;            } catch (Exception e) {                throw new BuildException(e, getLocation());            }        }
Clone class 103, 2 fragments, nominal size 12 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/RExecTask.java        public void sendString(String s, boolean echoString) {            OutputStream os = this.getOutputStream();            try {                os.write((s + "\n").getBytes());                if (echoString) {                    log(s, Project.MSG_INFO);                }                os.flush();            } catch (Exception e) {                throw new BuildException(e, getLocation());            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java        public void sendString(String s, boolean echoString) {            OutputStream os = this.getOutputStream();            try {                os.write((s + "\n").getBytes());                if (echoString) {                    log(s, Project.MSG_INFO);                }                os.flush();            } catch (Exception e) {                throw new BuildException(e, getLocation());            }        }
Clone class 104, 2 fragments, nominal size 38 lines, similarity 79%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/RExecTask.java    public void execute() throws BuildException {        /**  A server name is required to continue */        if (server == null) {            throw new BuildException("No Server Specified");        }        /**  A userid and password must appear together         *   if they appear.  They are not required.         */        if (userid == null && password != null) {            throw new BuildException("No Userid Specified");        }        if (password == null && userid != null) {            throw new BuildException("No Password Specified");        }        /**  Create the telnet client object */        AntRExecClient rexec = null;        try {            rexec = new AntRExecClient();            try {                rexec.connect(server, port);            } catch (IOException e) {                throw new BuildException("Can't connect to " + server);            }            if (userid != null && password != null && command != null                && rexecTasks.size() == 0) {                // simple one-shot execution                rexec.rexec(userid, password, command);            } else {                // need nested read/write elements                handleMultipleTasks(rexec);            }            /** Keep reading input stream until end of it or time-out */            rexec.waitForEOF(defaultTimeout);        } catch (IOException e) {            throw new BuildException("Error r-executing command", e);        } finally {            if (rexec != null && rexec.isConnected()) {                try {                    rexec.disconnect();                } catch (IOException e) {                    throw new BuildException("Error disconnecting from "                                             + server);                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java    public void execute() throws BuildException {       /**  A server name is required to continue */       if (server == null) {           throw new BuildException("No Server Specified");       }       /**  A userid and password must appear together        *   if they appear.  They are not required.        */       if (userid == null && password != null) {           throw new BuildException("No Userid Specified");       }       if (password == null && userid != null) {           throw new BuildException("No Password Specified");       }       /**  Create the telnet client object */       AntTelnetClient telnet = null;       try {           telnet = new AntTelnetClient();           try {               telnet.connect(server, port);           } catch (IOException e) {               throw new BuildException("Can't connect to " + server);           }           /**  Login if userid and password were specified */           if (userid != null && password != null) {               login(telnet);           }           /**  Process each sub command */           Enumeration tasksToRun = telnetTasks.elements();           while (tasksToRun != null && tasksToRun.hasMoreElements()) {               TelnetSubTask task = (TelnetSubTask) tasksToRun.nextElement();               if (task instanceof TelnetRead && defaultTimeout != null) {                   ((TelnetRead) task).setDefaultTimeout(defaultTimeout);               }               task.execute(telnet);           }       } finally {           if (telnet != null && telnet.isConnected()) {               try {                   telnet.disconnect();               } catch (IOException e) {                   throw new BuildException("Error disconnecting from "                                            + server);               }           }       }    }
Clone class 105, 2 fragments, nominal size 10 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java        public Unit() {            calendarFields.put(MILLISECOND,                               new Integer(Calendar.MILLISECOND));            calendarFields.put(SECOND, new Integer(Calendar.SECOND));            calendarFields.put(MINUTE, new Integer(Calendar.MINUTE));            calendarFields.put(HOUR, new Integer(Calendar.HOUR_OF_DAY));            calendarFields.put(DAY, new Integer(Calendar.DATE));            calendarFields.put(WEEK, new Integer(Calendar.WEEK_OF_YEAR));            calendarFields.put(MONTH, new Integer(Calendar.MONTH));            calendarFields.put(YEAR, new Integer(Calendar.YEAR));        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Tstamp.java        public Unit() {            calendarFields.put(MILLISECOND,                               new Integer(Calendar.MILLISECOND));            calendarFields.put(SECOND, new Integer(Calendar.SECOND));            calendarFields.put(MINUTE, new Integer(Calendar.MINUTE));            calendarFields.put(HOUR, new Integer(Calendar.HOUR_OF_DAY));            calendarFields.put(DAY, new Integer(Calendar.DATE));            calendarFields.put(WEEK, new Integer(Calendar.WEEK_OF_YEAR));            calendarFields.put(MONTH, new Integer(Calendar.MONTH));            calendarFields.put(YEAR, new Integer(Calendar.YEAR));        }
Clone class 106, 2 fragments, nominal size 10 lines, similarity 90%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/SchemaValidate.java    public boolean enableXercesSchemaValidation() {        try {            setFeature(XmlConstants.FEATURE_XSD, true);            //set the schema source for the doc            setNoNamespaceSchemaProperty(XmlConstants.PROPERTY_NO_NAMESPACE_SCHEMA_LOCATION);        } catch (BuildException e) {            log(e.toString(), Project.MSG_VERBOSE);            return false;        }        return true;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/SchemaValidate.java    public boolean enableJAXP12SchemaValidation() {        try {            //enable XSD            setProperty(XmlConstants.FEATURE_JAXP12_SCHEMA_LANGUAGE, XmlConstants.URI_XSD);            //set the schema source for the doc            setNoNamespaceSchemaProperty(XmlConstants.FEATURE_JAXP12_SCHEMA_SOURCE);        } catch (BuildException e) {            log(e.toString(), Project.MSG_VERBOSE);            return false;        }        return true;    }
Clone class 107, 2 fragments, nominal size 16 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/sos/SOS.java    protected String getLocalPath() {        if (localPath == null) {            return getProject().getBaseDir().getAbsolutePath();        } else {            // make sure localDir exists, create it if it doesn't            File dir = getProject().resolveFile(localPath);            if (!dir.exists()) {                boolean done = dir.mkdirs() || dir.isDirectory();                if (!done) {                    String msg = "Directory " + localPath + " creation was not "                        + "successful for an unknown reason";                    throw new BuildException(msg, getLocation());                }                getProject().log("Created dir: " + dir.getAbsolutePath());            }            return dir.getAbsolutePath();        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java    protected String getLocalpath() {        String lclPath = ""; //set to empty str if no local path return        if (localPath != null) {            //make sure m_LocalDir exists, create it if it doesn't            File dir = getProject().resolveFile(localPath);            if (!dir.exists()) {                boolean done = dir.mkdirs() || dir.exists();                if (!done) {                    String msg = "Directory " + localPath + " creation was not "                            + "successful for an unknown reason";                    throw new BuildException(msg, getLocation());                }                getProject().log("Created dir: " + dir.getAbsolutePath());            }            lclPath = FLAG_OVERRIDE_WORKING_DIR + localPath;        }        return lclPath;    }
Clone class 108, 3 fragments, nominal size 19 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/sos/SOSCheckin.java    protected Commandline buildCmdLine() {        commandLine = new Commandline();        // If we find a "file" attribute then act on a file otherwise act on a project        if (getFilename() != null) {            // add -command CheckInFile to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_COMMAND);            commandLine.createArgument().setValue(SOSCmd.COMMAND_CHECKIN_FILE);            // add -file xxxxx to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_FILE);            commandLine.createArgument().setValue(getFilename());        } else {            // add -command CheckInProject to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_COMMAND);            commandLine.createArgument().setValue(SOSCmd.COMMAND_CHECKIN_PROJECT);            // look for a recursive option            commandLine.createArgument().setValue(getRecursive());        }        getRequiredAttributes();        getOptionalAttributes();        // Look for a comment        if (getComment() != null) {            commandLine.createArgument().setValue(SOSCmd.FLAG_COMMENT);            commandLine.createArgument().setValue(getComment());        }        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/sos/SOSCheckout.java    protected Commandline buildCmdLine() {        commandLine = new Commandline();        // If we find a "file" attribute then act on a file otherwise act on a project        if (getFilename() != null) {            // add -command CheckOutFile to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_COMMAND);            commandLine.createArgument().setValue(SOSCmd.COMMAND_CHECKOUT_FILE);            // add -file xxxxx to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_FILE);            commandLine.createArgument().setValue(getFilename());        } else {            // add -command CheckOutProject to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_COMMAND);            commandLine.createArgument().setValue(SOSCmd.COMMAND_CHECKOUT_PROJECT);            // look for a recursive option            commandLine.createArgument().setValue(getRecursive());        }        getRequiredAttributes();        getOptionalAttributes();        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/sos/SOSGet.java    protected Commandline buildCmdLine() {        commandLine = new Commandline();        // If we find a "file" attribute then act on a file otherwise act on a project        if (getFilename() != null) {            // add -command GetFile to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_COMMAND);            commandLine.createArgument().setValue(SOSCmd.COMMAND_GET_FILE);            // add -file xxxxx to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_FILE);            commandLine.createArgument().setValue(getFilename());            // look for a version attribute            if (getVersion() != null) {                //add -revision xxxxx to the commandline                commandLine.createArgument().setValue(SOSCmd.FLAG_VERSION);                commandLine.createArgument().setValue(getVersion());            }        } else {            // add -command GetProject to the commandline            commandLine.createArgument().setValue(SOSCmd.FLAG_COMMAND);            commandLine.createArgument().setValue(SOSCmd.COMMAND_GET_PROJECT);            // look for a recursive option            commandLine.createArgument().setValue(getRecursive());            // look for a label option            if (getLabel() != null) {                commandLine.createArgument().setValue(SOSCmd.FLAG_LABEL);                commandLine.createArgument().setValue(getLabel());            }        }        getRequiredAttributes();        getOptionalAttributes();        return commandLine;    }
Clone class 109, 2 fragments, nominal size 25 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java    private void doSingleTransfer() throws IOException, JSchException {        StringBuilder sb = new StringBuilder("scp -t ");        if (getPreserveLastModified()) {            sb.append("-p ");        }        if (getCompressed()) {            sb.append("-C ");        }        sb.append(remotePath);        final String cmd = sb.toString();        final Channel channel = openExecChannel(cmd);        try {            final OutputStream out = channel.getOutputStream();            final InputStream in = channel.getInputStream();            channel.connect();            waitForAck(in);            sendFileToRemote(localFile, in, out);        } finally {            if (channel != null) {                channel.disconnect();            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java    private void doMultipleTransfer() throws IOException, JSchException {        StringBuilder sb = new StringBuilder("scp -r -d -t ");        if (getPreserveLastModified()) {            sb.append("-p ");        }        if (getCompressed()) {            sb.append("-C ");        }        sb.append(remotePath);        final Channel channel = openExecChannel(sb.toString());        try {            final OutputStream out = channel.getOutputStream();            final InputStream in = channel.getInputStream();            channel.connect();            waitForAck(in);            for (final Iterator i = directoryList.iterator(); i.hasNext();) {                final Directory current = (Directory) i.next();                sendDirectory(current, in, out);            }        } finally {            if (channel != null) {                channel.disconnect();            }        }    }
Clone class 110, 2 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java    private void sendDirectory(final Directory current,                               final InputStream in,                               final OutputStream out) throws IOException {        for (final Iterator fileIt = current.filesIterator(); fileIt.hasNext();) {            sendFileToRemote((File) fileIt.next(), in, out);        }        for (final Iterator dirIt = current.directoryIterator(); dirIt.hasNext();) {            final Directory dir = (Directory) dirIt.next();            sendDirectoryToRemote(dir, in, out);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessageBySftp.java    private void sendDirectory(final ChannelSftp channel,                               final Directory current)        throws IOException, SftpException {        for (final Iterator fileIt = current.filesIterator(); fileIt.hasNext();) {            sendFileToRemote(channel, (File) fileIt.next(), null);        }        for (final Iterator dirIt = current.directoryIterator(); dirIt.hasNext();) {            final Directory dir = (Directory) dirIt.next();            sendDirectoryToRemote(channel, dir);        }    }
Clone class 111, 2 fragments, nominal size 16 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHSession.java    public void setLocaltunnels(final String tunnels) {        final String[] specs = tunnels.split(", ");        for (int i = 0; i < specs.length; i++) {            if (specs[i].length() > 0) {                final String[] spec = specs[i].split(":", 3);                final int lport = Integer.parseInt(spec[0]);                final String rhost = spec[1];                final int rport = Integer.parseInt(spec[2]);                final LocalTunnel tunnel = createLocalTunnel();                tunnel.setLPort(lport);                tunnel.setRHost(rhost);                tunnel.setRPort(rport);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHSession.java    public void setRemotetunnels(final String tunnels) {        final String[] specs = tunnels.split(", ");        for (int i = 0; i < specs.length; i++) {            if (specs[i].length() > 0) {                final String[] spec = specs[i].split(":", 3);                final int rport = Integer.parseInt(spec[0]);                final String lhost = spec[1];                final int lport = Integer.parseInt(spec[2]);                final RemoteTunnel tunnel = createRemoteTunnel();                tunnel.setRPort(rport);                tunnel.setLHost(lhost);                tunnel.setLPort(lport);            }        }    }
Clone class 112, 2 fragments, nominal size 18 lines, similarity 94%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java    private Source getSource(final InputStream is, final File infile)        throws ParserConfigurationException, SAXException {        // todo: is this comment still relevant ??        // FIXME: need to use a SAXSource as the source for the transform        // so we can plug in our own entity resolver        Source src = null;        if (entityResolver != null) {            if (getFactory().getFeature(SAXSource.FEATURE)) {                final SAXParserFactory spFactory = SAXParserFactory.newInstance();                spFactory.setNamespaceAware(true);                final XMLReader reader = spFactory.newSAXParser().getXMLReader();                reader.setEntityResolver(entityResolver);                src = new SAXSource(reader, new InputSource(is));            } else {                throw new IllegalStateException("xcatalog specified, but "                    + "parser doesn't support SAX");            }        } else {            // WARN: Don't use the StreamSource(File) ctor. It won't work with            // xalan prior to 2.2 because of systemid bugs.            src = new StreamSource(is);        }        src.setSystemId(JAXPUtils.getSystemId(infile));        return src;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java    private Source getSource(final InputStream is, final Resource resource)        throws ParserConfigurationException, SAXException {        // todo: is this comment still relevant ??        // FIXME: need to use a SAXSource as the source for the transform        // so we can plug in our own entity resolver        Source src = null;        if (entityResolver != null) {            if (getFactory().getFeature(SAXSource.FEATURE)) {                final SAXParserFactory spFactory = SAXParserFactory.newInstance();                spFactory.setNamespaceAware(true);                final XMLReader reader = spFactory.newSAXParser().getXMLReader();                reader.setEntityResolver(entityResolver);                src = new SAXSource(reader, new InputSource(is));            } else {                throw new IllegalStateException("xcatalog specified, but "                    + "parser doesn't support SAX");            }        } else {            // WARN: Don't use the StreamSource(File) ctor. It won't work with            // xalan prior to 2.2 because of systemid bugs.            src = new StreamSource(is);        }        // The line below is a hack: the system id must an URI, but it is not        // cleat to get the URI of an resource, so just set the name of the        // resource as a system id        src.setSystemId(resourceToURI(resource));        return src;    }
Clone class 113, 2 fragments, nominal size 12 lines, similarity 83%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java    public String getFileTimeStamp() {        if (timestamp == null) {            return "";        } else if (timestamp.getValue().equals(TIME_MODIFIED)) {            return FLAG_FILETIME_MODIFIED;        } else if (timestamp.getValue().equals(TIME_UPDATED)) {            return FLAG_FILETIME_UPDATED;        } else {            return FLAG_FILETIME_DEF;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java    public String getWritableFiles() {        if (writableFiles == null) {            return "";        } else if (writableFiles.getValue().equals(WRITABLE_REPLACE)) {            return FLAG_REPLACE_WRITABLE;        } else if (writableFiles.getValue().equals(WRITABLE_SKIP)) {            // ss.exe exits with '100', when files have been skipped            // so we have to ignore the failure            failOnError = false;            return FLAG_SKIP_WRITABLE;        } else {            return "";        }    }
Clone class 114, 8 fragments, nominal size 17 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSADD.java    protected Commandline buildCmdLine() {        Commandline commandLine = new Commandline();        // first off, make sure that we've got a command and a localPath ...        if (getLocalpath() == null) {            String msg = "localPath attribute must be set!";            throw new BuildException(msg, getLocation());        }        // build the command line from what we got the format is        // ss Add VSS items [-B] [-C] [-D-] [-H] [-I-] [-K] [-N] [-O] [-R] [-W] [-Y] [-?]        // as specified in the SS.EXE help        commandLine.setExecutable(getSSCommand());        commandLine.createArgument().setValue(COMMAND_ADD);        // VSS items        commandLine.createArgument().setValue(getLocalpath());        // -I- or -I-Y or -I-N        commandLine.createArgument().setValue(getAutoresponse());        // -R        commandLine.createArgument().setValue(getRecursive());        // -W        commandLine.createArgument().setValue(getWritable());        // -Y        commandLine.createArgument().setValue(getLogin());        // -C        commandLine.createArgument().setValue(getComment());        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSCREATE.java    Commandline buildCmdLine() {        Commandline commandLine = new Commandline();        // first off, make sure that we've got a command and a vssdir...        if (getVsspath() == null) {            String msg = "vsspath attribute must be set!";            throw new BuildException(msg, getLocation());        }        // build the command line from what we got        // the format is:        // ss Create VSS items [-C] [-H] [-I-] [-N] [-O] [-S] [-Y] [-?]        // as specified in the SS.EXE help        commandLine.setExecutable(getSSCommand());        commandLine.createArgument().setValue(COMMAND_CREATE);        // VSS items        commandLine.createArgument().setValue(getVsspath());        // -C        commandLine.createArgument().setValue(getComment());        // -I- or -I-Y or -I-N        commandLine.createArgument().setValue(getAutoresponse());        // -O-        commandLine.createArgument().setValue(getQuiet());        // -Y        commandLine.createArgument().setValue(getLogin());        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSHISTORY.java    Commandline buildCmdLine() {        Commandline commandLine = new Commandline();        // first off, make sure that we've got a command and a vssdir and a label ...        if (getVsspath() == null) {            String msg = "vsspath attribute must be set!";            throw new BuildException(msg, getLocation());        }        // build the command line from what we got the format is        // ss History elements [-H] [-L] [-N] [-O] [-V] [-Y] [-#] [-?]        // as specified in the SS.EXE help        commandLine.setExecutable(getSSCommand());        commandLine.createArgument().setValue(COMMAND_HISTORY);        // VSS items        commandLine.createArgument().setValue(getVsspath());        // -I-        commandLine.createArgument().setValue(FLAG_AUTORESPONSE_DEF);  // ignore all errors        // -Vd        commandLine.createArgument().setValue(getVersionDate());        // -VL        commandLine.createArgument().setValue(getVersionLabel());        // -R        commandLine.createArgument().setValue(getRecursive());        // -B / -D / -F-        commandLine.createArgument().setValue(getStyle());        // -Y        commandLine.createArgument().setValue(getLogin());        // -O        commandLine.createArgument().setValue(getOutput());        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSCP.java    protected Commandline buildCmdLine() {        Commandline commandLine = new Commandline();        // first off, make sure that we've got a command and a vssdir ...        if (getVsspath() == null) {            String msg = "vsspath attribute must be set!";            throw new BuildException(msg, getLocation());        }        // build the command line from what we got the format is        // ss CP VSS items [-H] [-I-] [-Y] [-?]        // as specified in the SS.EXE help        commandLine.setExecutable(getSSCommand());        commandLine.createArgument().setValue(COMMAND_CP);        // VSS items        commandLine.createArgument().setValue(getVsspath());        // -I- or -I-Y or -I-N        commandLine.createArgument().setValue(getAutoresponse());        // -Y        commandLine.createArgument().setValue(getLogin());        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSCHECKOUT.java    protected Commandline buildCmdLine() {        Commandline commandLine = new Commandline();        // first off, make sure that we've got a command and a vssdir ...        if (getVsspath() == null) {            String msg = "vsspath attribute must be set!";            throw new BuildException(msg, getLocation());        }        // build the command line from what we got the format is        // ss Checkout VSS items [-G] [-C] [-H] [-I-] [-N] [-O] [-R] [-V] [-Y] [-?]        // as specified in the SS.EXE help        commandLine.setExecutable(getSSCommand());        commandLine.createArgument().setValue(COMMAND_CHECKOUT);        // VSS items        commandLine.createArgument().setValue(getVsspath());        // -GL        commandLine.createArgument().setValue(getLocalpath());        // -I- or -I-Y or -I-N        commandLine.createArgument().setValue(getAutoresponse());        // -R        commandLine.createArgument().setValue(getRecursive());        // -V        commandLine.createArgument().setValue(getVersionDateLabel());        // -Y        commandLine.createArgument().setValue(getLogin());        // -G        commandLine.createArgument().setValue(getFileTimeStamp());        // -GWS or -GWR        commandLine.createArgument().setValue(getWritableFiles());        // -G-        commandLine.createArgument().setValue(getGetLocalCopy());        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSCHECKIN.java    protected Commandline buildCmdLine() {        Commandline commandLine = new Commandline();        // first off, make sure that we've got a command and a vssdir ...        if (getVsspath() == null) {            String msg = "vsspath attribute must be set!";            throw new BuildException(msg, getLocation());        }        // build the command line from what we got the format is        // ss Checkin VSS items [-H] [-C] [-I-] [-N] [-O] [-R] [-W] [-Y] [-?]        // as specified in the SS.EXE help        commandLine.setExecutable(getSSCommand());        commandLine.createArgument().setValue(COMMAND_CHECKIN);        // VSS items        commandLine.createArgument().setValue(getVsspath());        // -GL        commandLine.createArgument().setValue(getLocalpath());        // -I- or -I-Y or -I-N        commandLine.createArgument().setValue(getAutoresponse());        // -R        commandLine.createArgument().setValue(getRecursive());        // -W        commandLine.createArgument().setValue(getWritable());        // -Y        commandLine.createArgument().setValue(getLogin());        // -C        commandLine.createArgument().setValue(getComment());        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSLABEL.java    Commandline buildCmdLine() {        Commandline commandLine = new Commandline();        // first off, make sure that we've got a command and a vssdir and a label ...        if (getVsspath() == null) {            throw new BuildException("vsspath attribute must be set!", getLocation());        }        String label = getLabel();        if (label.equals("")) {            String msg = "label attribute must be set!";            throw new BuildException(msg, getLocation());        }        // build the command line from what we got the format is        // ss Label VSS items [-C] [-H] [-I-] [-Llabel] [-N] [-O] [-V] [-Y] [-?]        // as specified in the SS.EXE help        commandLine.setExecutable(getSSCommand());        commandLine.createArgument().setValue(COMMAND_LABEL);        // VSS items        commandLine.createArgument().setValue(getVsspath());        // -C        commandLine.createArgument().setValue(getComment());        // -I- or -I-Y or -I-N        commandLine.createArgument().setValue(getAutoresponse());        // -L Specify the new label on the command line (instead of being prompted)        commandLine.createArgument().setValue(label);        // -V Label an existing file or project version        commandLine.createArgument().setValue(getVersion());        // -Y        commandLine.createArgument().setValue(getLogin());        return commandLine;    }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSGET.java    Commandline buildCmdLine() {        Commandline commandLine = new Commandline();        // build the command line from what we got the format is        // ss Get VSS items [-G] [-H] [-I-] [-N] [-O] [-R] [-V] [-W] [-Y] [-?]        // as specified in the SS.EXE help        commandLine.setExecutable(getSSCommand());        commandLine.createArgument().setValue(COMMAND_GET);        if (getVsspath() == null) {            throw new BuildException("vsspath attribute must be set!", getLocation());        }        commandLine.createArgument().setValue(getVsspath());        // -GL        commandLine.createArgument().setValue(getLocalpath());        // -I- or -I-Y or -I-N        commandLine.createArgument().setValue(getAutoresponse());        // -O-        commandLine.createArgument().setValue(getQuiet());        // -R        commandLine.createArgument().setValue(getRecursive());        // -V        commandLine.createArgument().setValue(getVersionDateLabel());        // -W        commandLine.createArgument().setValue(getWritable());        // -Y        commandLine.createArgument().setValue(getLogin());        // -G        commandLine.createArgument().setValue(getFileTimeStamp());        // -GWS or -GWR        commandLine.createArgument().setValue(getWritableFiles());        return commandLine;    }
Clone class 115, 3 fragments, nominal size 14 lines, similarity 71%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/PumpStreamHandler.java    public void stop() {        finish(inputThread);        try {            err.flush();        } catch (IOException e) {            // ignore        }        try {            out.flush();        } catch (IOException e) {            // ignore        }        finish(outputThread);        finish(errorThread);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/JarTest.java    public void tearDown() {        if (r1 != null) {            try {                r1.close();            } catch (IOException e) {            }        }        if (r2 != null) {            try {                r2.close();            } catch (IOException e) {            }        }    }
apache_ant/ant/src/main/org/apache/tools/mail/MailMessage.java    void disconnect() throws IOException {        if (out != null) {            out.close();        }        if (in != null) {            try {                in.close();            } catch (IOException e) {                // ignore            }        }        if (socket != null) {            try {                socket.close();            } catch (IOException e) {                // ignore            }        }    }
Clone class 116, 2 fragments, nominal size 11 lines, similarity 83%
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Replace.java        FileInput(File source) throws IOException {            outputBuffer = new StringBuffer();            buffer = new char[BUFF_SIZE];            is = new FileInputStream(source);            try {                reader = new BufferedReader(encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is));            } finally {                if (reader == null) {                    is.close();                }            }        }
apache_ant/ant/src/main/org/apache/tools/ant/taskdefs/Replace.java        FileOutput(File out) throws IOException {            os = new FileOutputStream(out);            try {                writer = new BufferedWriter(encoding != null ? new OutputStreamWriter(os, encoding) : new OutputStreamWriter(os));            } finally {                if (writer == null) {                    os.close();                }            }        }
Clone class 117, 2 fragments, nominal size 12 lines, similarity 83%
apache_ant/ant/src/main/org/apache/tools/ant/types/AbstractFileSet.java    public void setRefid(Reference r) throws BuildException {        if (dir != null || defaultPatterns.hasPatterns(getProject())) {            throw tooManyAttributes();        }        if (!additionalPatterns.isEmpty()) {            throw noChildrenAllowed();        }        if (!selectors.isEmpty()) {            throw noChildrenAllowed();        }        super.setRefid(r);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Files.java    public void setRefid(Reference r) throws BuildException {        if (hasPatterns(defaultPatterns)) {            throw tooManyAttributes();        }        if (!additionalPatterns.isEmpty()) {            throw noChildrenAllowed();        }        if (hasSelectors()) {            throw noChildrenAllowed();        }        super.setRefid(r);    }
Clone class 118, 4 fragments, nominal size 11 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/types/AbstractFileSet.java    public synchronized void appendIncludes(String[] includes) {        if (isReference()) {            throw tooManyAttributes();        }        if (includes != null) {            for (int i = 0; i < includes.length; i++) {                defaultPatterns.createInclude().setName(includes[i]);            }            directoryScanner = null;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/AbstractFileSet.java    public synchronized void appendExcludes(String[] excludes) {        if (isReference()) {            throw tooManyAttributes();        }        if (excludes != null) {            for (int i = 0; i < excludes.length; i++) {                defaultPatterns.createExclude().setName(excludes[i]);            }            directoryScanner = null;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Files.java    public synchronized void appendExcludes(String[] excludes) {        checkAttributesAllowed();        if (excludes != null) {            for (int i = 0; i < excludes.length; i++) {                defaultPatterns.createExclude().setName(excludes[i]);            }            ds = null;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Files.java    public synchronized void appendIncludes(String[] includes) {        checkAttributesAllowed();        if (includes != null) {            for (int i = 0; i < includes.length; i++) {                defaultPatterns.createInclude().setName(includes[i]);            }            ds = null;        }    }
Clone class 119, 2 fragments, nominal size 15 lines, similarity 73%
apache_ant/ant/src/main/org/apache/tools/ant/types/AbstractFileSet.java    public synchronized boolean hasPatterns() {        if (isReference() && getProject() != null) {            return getRef(getProject()).hasPatterns();        }        dieOnCircularReference();        if (defaultPatterns.hasPatterns(getProject())) {            return true;        }        for (PatternSet ps : additionalPatterns) {            if (ps.hasPatterns(getProject())) {                return true;            }        }        return false;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Files.java    public synchronized boolean hasPatterns() {        if (isReference()) {            return getRef().hasPatterns();        }        dieOnCircularReference();        if (hasPatterns(defaultPatterns)) {            return true;        }        for (PatternSet patternSet : additionalPatterns) {            if (hasPatterns(patternSet)) {                return true;            }        }        return false;    }
Clone class 120, 2 fragments, nominal size 15 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/types/AbstractFileSet.java    public String toString() {        if (isReference()) {            return getRef(getProject()).toString();        }        dieOnCircularReference();        DirectoryScanner ds = getDirectoryScanner(getProject());        String[] files = ds.getIncludedFiles();        StringBuffer sb = new StringBuffer();        for (int i = 0; i < files.length; i++) {            if (i > 0) {                sb.append(';');            }            sb.append(files[i]);        }        return sb.toString();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/DirSet.java    public String toString() {        DirectoryScanner ds = getDirectoryScanner(getProject());        String[] dirs = ds.getIncludedDirectories();        StringBuffer sb = new StringBuffer();        for (int i = 0; i < dirs.length; i++) {            if (i > 0) {                sb.append(';');            }            sb.append(dirs[i]);        }        return sb.toString();    }
Clone class 121, 26 fragments, nominal size 15 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/types/AbstractFileSet.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            for (FileSelector fileSelector : selectors) {                if (fileSelector instanceof DataType) {                    pushAndInvokeCircularReferenceCheck((DataType) fileSelector, stk, p);                }            }            for (PatternSet ps : additionalPatterns) {                pushAndInvokeCircularReferenceCheck(ps, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionContainer.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            for (ResourceCollection resourceCollection : rc) {                if (resourceCollection instanceof DataType) {                    pushAndInvokeCircularReferenceCheck((DataType) resourceCollection, stk, p);                }            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Resources.java    protected void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            for (ResourceCollection resourceCollection : getNested()) {                if (resourceCollection instanceof DataType) {                    pushAndInvokeCircularReferenceCheck((DataType) resourceCollection, stk, p);                }            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/XMLCatalog.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (classpath != null) {                pushAndInvokeCircularReferenceCheck(classpath, stk, p);            }            if (catalogPath != null) {                pushAndInvokeCircularReferenceCheck(catalogPath, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/selectors/ResourceSelectorContainer.java    protected void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            for (ResourceSelector resourceSelector : resourceSelectors) {                if (resourceSelector instanceof DataType) {                    pushAndInvokeCircularReferenceCheck((DataType) resourceSelector, stk, p);                }            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/BaseSelectorContainer.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            for (FileSelector fileSelector : selectorsList) {                if (fileSelector instanceof DataType) {                    pushAndInvokeCircularReferenceCheck((DataType) fileSelector, stk, p);                }            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/AbstractResourceCollectionWrapper.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (rc instanceof DataType) {                pushAndInvokeCircularReferenceCheck((DataType) rc, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/PropertySet.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (mapper != null) {                pushAndInvokeCircularReferenceCheck(mapper, stk, p);            }            for (PropertySet propertySet : setRefs) {                pushAndInvokeCircularReferenceCheck(propertySet, stk,                                                    p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/AbstractSelectorContainer.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p) {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            for (FileSelector fileSelector : selectorsList) {                if (fileSelector instanceof DataType) {                    pushAndInvokeCircularReferenceCheck((DataType) fileSelector, stk, p);                }            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/MappedResourceCollection.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            checkInitialized();            if (mapper != null) {                pushAndInvokeCircularReferenceCheck(mapper, stk, p);            }            if (nested instanceof DataType) {                pushAndInvokeCircularReferenceCheck((DataType) nested, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/ResourceList.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            for (ResourceCollection resourceCollection : textDocuments) {                if (resourceCollection instanceof DataType) {                    pushAndInvokeCircularReferenceCheck((DataType) resourceCollection, stk, p);                }            }            for (FilterChain filterChain : filterChains) {                pushAndInvokeCircularReferenceCheck(filterChain, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/FilterChain.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            for (Iterator<Object> i = filterReaders.iterator(); i.hasNext();) {                Object o = i.next();                if (o instanceof DataType) {                    pushAndInvokeCircularReferenceCheck((DataType) o, stk, p);                }            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/comparators/DelegatedResourceComparator.java    protected void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (!(resourceComparators == null || resourceComparators.isEmpty())) {                for (ResourceComparator resourceComparator : resourceComparators) {                    if (resourceComparator instanceof DataType) {                        pushAndInvokeCircularReferenceCheck((DataType) resourceComparator, stk,                                                            p);                    }                }            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/AntFilterReader.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (classpath != null) {                pushAndInvokeCircularReferenceCheck(classpath, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Tokens.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        // check nested collection        super.dieOnCircularReference(stk, p);        if (!isReference()) {            if (tokenizer instanceof DataType) {                pushAndInvokeCircularReferenceCheck((DataType) tokenizer, stk,                                                    p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/selectors/Compare.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (control != null) {                DataType.pushAndInvokeCircularReferenceCheck(control, stk, p);            }            DataType.pushAndInvokeCircularReferenceCheck(comp, stk, p);            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/Path.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (union != null) {                pushAndInvokeCircularReferenceCheck(union, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/comparators/Reverse.java    protected void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (nested instanceof DataType) {                pushAndInvokeCircularReferenceCheck((DataType) nested, stk,                                                    p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/AbstractClasspathResource.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p) {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (classpath != null) {                pushAndInvokeCircularReferenceCheck(classpath, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/ArchiveResource.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p) {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            if (archive != null) {                pushAndInvokeCircularReferenceCheck(archive, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/ArchiveFileSet.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        // takes care of nested selectors        super.dieOnCircularReference(stk, p);        if (!isReference()) {            if (src != null) {                pushAndInvokeCircularReferenceCheck(src, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Archives.java    protected synchronized void dieOnCircularReference(final Stack<Object> stk, final Project p)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stk, p);        } else {            pushAndInvokeCircularReferenceCheck(zips, stk, p);            pushAndInvokeCircularReferenceCheck(tars, stk, p);            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/ResourceDecorator.java    protected void dieOnCircularReference(final Stack<Object> stack,                                          final Project project)        throws BuildException {        if (isChecked()) {            return;        }        if (isReference()) {            super.dieOnCircularReference(stack, project);        } else {            pushAndInvokeCircularReferenceCheck(resource, stack, project);            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/optional/depend/ClassfileSet.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p) {        if (isChecked()) {            return;        }        // takes care of nested selectors        super.dieOnCircularReference(stk, p);        if (!isReference()) {            for (FileSet additionalRootSet : rootFileSets) {                pushAndInvokeCircularReferenceCheck(additionalRootSet, stk, p);            }            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Sort.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)        throws BuildException {        if (isChecked()) {            return;        }        // check nested collection        super.dieOnCircularReference(stk, p);        if (!isReference()) {            DataType.pushAndInvokeCircularReferenceCheck(comp, stk, p);            setChecked(true);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Restrict.java    protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p) {        if (isChecked()) {            return;        }        // takes care of Selectors        super.dieOnCircularReference(stk, p);        if (!isReference()) {            pushAndInvokeCircularReferenceCheck(w, stk, p);            setChecked(true);        }    }
Clone class 122, 4 fragments, nominal size 11 lines, similarity 81%
apache_ant/ant/src/main/org/apache/tools/ant/types/AntFilterReader.java    public void setClasspath(Path classpath) {        if (isReference()) {            throw tooManyAttributes();        }        if (this.classpath == null) {            this.classpath = classpath;        } else {            this.classpath.append(classpath);        }        setChecked(false);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/Mapper.java    public void setClasspath(Path classpath) {        if (isReference()) {            throw tooManyAttributes();        }        if (this.classpath == null) {            this.classpath = classpath;        } else {            this.classpath.append(classpath);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/ExtendSelector.java    public final void setClasspath(Path classpath) {        if (isReference()) {            throw tooManyAttributes();        }        if (this.classpath == null) {            this.classpath = classpath;        } else {            this.classpath.append(classpath);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/XMLCatalog.java    public void setClasspath(Path classpath) {        if (isReference()) {            throw tooManyAttributes();        }        if (this.classpath == null) {            this.classpath = classpath;        } else {            this.classpath.append(classpath);        }        setChecked(false);    }
Clone class 123, 4 fragments, nominal size 10 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/types/AntFilterReader.java    public Path createClasspath() {        if (isReference()) {            throw noChildrenAllowed();        }        if (this.classpath == null) {            this.classpath = new Path(getProject());        }        setChecked(false);        return this.classpath.createPath();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/XMLCatalog.java    public Path createCatalogPath() {        if (isReference()) {            throw noChildrenAllowed();        }        if (this.catalogPath == null) {            this.catalogPath = new Path(getProject());        }        setChecked(false);        return this.catalogPath.createPath();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/Mapper.java    public Path createClasspath() {        if (isReference()) {            throw noChildrenAllowed();        }        if (this.classpath == null) {            this.classpath = new Path(getProject());        }        setChecked(false);        return this.classpath.createPath();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/XMLCatalog.java    public Path createClasspath() {        if (isReference()) {            throw noChildrenAllowed();        }        if (this.classpath == null) {            this.classpath = new Path(getProject());        }        setChecked(false);        return this.classpath.createPath();    }
Clone class 124, 2 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/main/org/apache/tools/ant/types/ArchiveFileSet.java    public Iterator<Resource> iterator() {        if (isReference()) {            return ((ResourceCollection) (getRef(getProject()))).iterator();        }        if (src == null) {            return super.iterator();        }        ArchiveScanner as = (ArchiveScanner) getDirectoryScanner(getProject());        return as.getResourceFiles(getProject());    }
apache_ant/ant/src/main/org/apache/tools/ant/types/ArchiveFileSet.java    public int size() {        if (isReference()) {            return ((ResourceCollection) (getRef(getProject()))).size();        }        if (src == null) {            return super.size();        }        ArchiveScanner as = (ArchiveScanner) getDirectoryScanner(getProject());        return as.getIncludedFilesCount();    }
Clone class 125, 2 fragments, nominal size 16 lines, similarity 93%
apache_ant/ant/src/main/org/apache/tools/ant/types/Assertions.java    public void applyAssertions(List<String> commandList) {        getProject().log("Applying assertions", Project.MSG_DEBUG);        Assertions clause = getFinalReference();        //do the system assertions        if (Boolean.TRUE.equals(clause.enableSystemAssertions)) {            getProject().log("Enabling system assertions", Project.MSG_DEBUG);            commandList.add("-enablesystemassertions");        } else if (Boolean.FALSE.equals(clause.enableSystemAssertions)) {            getProject().log("disabling system assertions", Project.MSG_DEBUG);            commandList.add("-disablesystemassertions");        }        //now any inner assertions        for (BaseAssertion assertion : clause.assertionList) {            String arg = assertion.toCommand();            getProject().log("adding assertion " + arg, Project.MSG_DEBUG);            commandList.add(arg);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/Assertions.java    public void applyAssertions(final ListIterator<String> commandIterator) {        getProject().log("Applying assertions", Project.MSG_DEBUG);        Assertions clause = getFinalReference();        //do the system assertions        if (Boolean.TRUE.equals(clause.enableSystemAssertions)) {            getProject().log("Enabling system assertions", Project.MSG_DEBUG);            commandIterator.add("-enablesystemassertions");        } else if (Boolean.FALSE.equals(clause.enableSystemAssertions)) {            getProject().log("disabling system assertions", Project.MSG_DEBUG);            commandIterator.add("-disablesystemassertions");        }        //now any inner assertions        for (BaseAssertion assertion : clause.assertionList) {            String arg = assertion.toCommand();            getProject().log("adding assertion " + arg, Project.MSG_DEBUG);            commandIterator.add(arg);        }    }
Clone class 126, 3 fragments, nominal size 29 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/types/optional/image/Arc.java    public PlanarImage executeDrawOperation() {        BufferedImage bi = new BufferedImage(width + (stroke_width * 2),            height + (stroke_width * 2), BufferedImage.TYPE_4BYTE_ABGR_PRE);        Graphics2D graphics = (Graphics2D) bi.getGraphics();        if (!stroke.equals("transparent")) {            BasicStroke bStroke = new BasicStroke(stroke_width);            graphics.setColor(ColorMapper.getColorByName(stroke));            graphics.setStroke(bStroke);            graphics.draw(new Arc2D.Double(stroke_width, stroke_width, width,                height, start, stop, type));        }        if (!fill.equals("transparent")) {            graphics.setColor(ColorMapper.getColorByName(fill));            graphics.fill(new Arc2D.Double(stroke_width, stroke_width,                width, height, start, stop, type));        }        final int size = instructions.size();        for (int i = 0; i < size; i++) {            ImageOperation instr = ((ImageOperation) instructions.elementAt(i));            if (instr instanceof DrawOperation) {                PlanarImage img = ((DrawOperation) instr).executeDrawOperation();                graphics.drawImage(img.getAsBufferedImage(), null, 0, 0);            } else if (instr instanceof TransformOperation) {                graphics = (Graphics2D) bi.getGraphics();                PlanarImage image = ((TransformOperation) instr)                    .executeTransformOperation(PlanarImage.wrapRenderedImage(bi));                bi = image.getAsBufferedImage();            }        }        return PlanarImage.wrapRenderedImage(bi);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/optional/image/Ellipse.java    public PlanarImage executeDrawOperation() {        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR_PRE);        Graphics2D graphics = (Graphics2D) bi.getGraphics();        if (!stroke.equals("transparent")) {            BasicStroke bStroke = new BasicStroke(stroke_width);            graphics.setColor(ColorMapper.getColorByName(stroke));            graphics.setStroke(bStroke);            graphics.draw(new Ellipse2D.Double(0, 0, width, height));        }        if (!fill.equals("transparent")) {            graphics.setColor(ColorMapper.getColorByName(fill));            graphics.fill(new Ellipse2D.Double(0, 0, width, height));        }        final int size = instructions.size();        for (int i = 0; i < size; i++) {            ImageOperation instr = ((ImageOperation) instructions.elementAt(i));            if (instr instanceof DrawOperation) {                PlanarImage img = ((DrawOperation) instr).executeDrawOperation();                graphics.drawImage(img.getAsBufferedImage(), null, 0, 0);            } else if (instr instanceof TransformOperation) {                graphics = (Graphics2D) bi.getGraphics();                PlanarImage image = ((TransformOperation) instr)                    .executeTransformOperation(PlanarImage.wrapRenderedImage(bi));                bi = image.getAsBufferedImage();            }        }        return PlanarImage.wrapRenderedImage(bi);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/optional/image/Rectangle.java    public PlanarImage executeDrawOperation() {        log("\tCreating Rectangle w=" + width + " h=" + height + " arcw="            + arcwidth + " arch=" + archeight);        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR_PRE);        Graphics2D graphics = (Graphics2D) bi.getGraphics();        if (!stroke.equals("transparent")) {            BasicStroke bStroke = new BasicStroke(stroke_width);            graphics.setColor(ColorMapper.getColorByName(stroke));            graphics.setStroke(bStroke);            if ((arcwidth != 0) || (archeight != 0)) {                graphics.drawRoundRect(0, 0, width, height, arcwidth, archeight);            } else {                graphics.drawRect(0, 0, width, height);            }        }        if (!fill.equals("transparent")) {            graphics.setColor(ColorMapper.getColorByName(fill));            if ((arcwidth != 0) || (archeight != 0)) {                graphics.fillRoundRect(stroke_width, stroke_width,                    width - (stroke_width * 2), height - (stroke_width * 2),                    arcwidth, archeight);            } else {                graphics.fillRect(stroke_width, stroke_width,                    width - (stroke_width * 2), height - (stroke_width * 2));            }        }        final int size = instructions.size();        for (int i = 0; i < size; i++) {            ImageOperation instr = ((ImageOperation) instructions.elementAt(i));            if (instr instanceof DrawOperation) {                PlanarImage img = ((DrawOperation) instr).executeDrawOperation();                graphics.drawImage(img.getAsBufferedImage(), null, 0, 0);            } else if (instr instanceof TransformOperation) {                graphics = (Graphics2D) bi.getGraphics();                PlanarImage image                    = ((TransformOperation) instr)                    .executeTransformOperation(PlanarImage.wrapRenderedImage(bi));                bi = image.getAsBufferedImage();            }        }        return PlanarImage.wrapRenderedImage(bi);    }
Clone class 127, 2 fragments, nominal size 13 lines, similarity 84%
apache_ant/ant/src/main/org/apache/tools/ant/types/optional/image/Rotate.java    public PlanarImage executeDrawOperation() {        final int size = instructions.size();        for (int i = 0; i < size; i++) {            ImageOperation instr = ((ImageOperation) instructions.elementAt(i));            if (instr instanceof DrawOperation) {                // If this TransformOperation has DrawOperation children                // then Rotate the first child and return.                PlanarImage op = ((DrawOperation) instr).executeDrawOperation();                op = performRotate(op);                return op;            }        }        return null;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/optional/image/Scale.java    public PlanarImage executeDrawOperation() {        final int size = instructions.size();        for (int i = 0; i < size; i++) {            ImageOperation instr = ((ImageOperation) instructions.elementAt(i));            if (instr instanceof DrawOperation) {                PlanarImage image = null;                // If this TransformOperation has DrawOperation children                // then Rotate the first child and return.                performScale(image);                return image;            }        }        return null;    }
Clone class 128, 2 fragments, nominal size 12 lines, similarity 83%
apache_ant/ant/src/main/org/apache/tools/ant/types/optional/image/Scale.java    public float getWidth() {        float width = 0.0F;        int percIndex = widthStr.indexOf('%');        if (percIndex > 0) {            width = Float.parseFloat(widthStr.substring(0, percIndex));            xPercent = true;            return width / HUNDRED;        } else {            xPercent = false;            return Float.parseFloat(widthStr);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/optional/image/Scale.java    public float getHeight() {        int percIndex = heightStr.indexOf('%');        if (percIndex > 0) {            float height = Float.parseFloat(heightStr.substring(0, percIndex));            yPercent = true;            return height / HUNDRED;        } else {            yPercent = false;            return Float.parseFloat(heightStr);        }    }
Clone class 129, 2 fragments, nominal size 20 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/types/PatternSet.java    public void addConfiguredPatternset(PatternSet p) {        if (isReference()) {            throw noChildrenAllowed();        }        String[] nestedIncludes = p.getIncludePatterns(getProject());        String[] nestedExcludes = p.getExcludePatterns(getProject());        if (nestedIncludes != null) {            for (int i = 0; i < nestedIncludes.length; i++) {                createInclude().setName(nestedIncludes[i]);            }        }        if (nestedExcludes != null) {            for (int i = 0; i < nestedExcludes.length; i++) {                createExclude().setName(nestedExcludes[i]);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/PatternSet.java    public void append(PatternSet other, Project p) {        if (isReference()) {            throw new BuildException("Cannot append to a reference");        }        dieOnCircularReference(p);        String[] incl = other.getIncludePatterns(p);        if (incl != null) {            for (int i = 0; i < incl.length; i++) {                createInclude().setName(incl[i]);            }        }        String[] excl = other.getExcludePatterns(p);        if (excl != null) {            for (int i = 0; i < excl.length; i++) {                createExclude().setName(excl[i]);            }        }    }
Clone class 130, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/types/PatternSet.java    public void setIncludes(String includes) {        if (isReference()) {            throw tooManyAttributes();        }        if (includes != null && includes.length() > 0) {            StringTokenizer tok = new StringTokenizer(includes, ", ", false);            while (tok.hasMoreTokens()) {                createInclude().setName(tok.nextToken());            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/PatternSet.java    public void setExcludes(String excludes) {        if (isReference()) {            throw tooManyAttributes();        }        if (excludes != null && excludes.length() > 0) {            StringTokenizer tok = new StringTokenizer(excludes, ", ", false);            while (tok.hasMoreTokens()) {                createExclude().setName(tok.nextToken());            }        }    }
Clone class 131, 3 fragments, nominal size 14 lines, similarity 85%
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public void addConfiguredInputMapper(Mapper inputMapper) {        if (isReference()) {            throw noChildrenAllowed();        }        if (this.inputMapper != null) {            if (usingInput) {                throw new BuildException("attribute \"input\""                    + " cannot coexist with a nested <inputmapper>");            } else {                throw new BuildException("Cannot have > 1 <inputmapper>");            }        }        setChecked(false);        this.inputMapper = inputMapper;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public void addConfiguredErrorMapper(Mapper errorMapper) {        if (isReference()) {            throw noChildrenAllowed();        }        if (this.errorMapper != null) {            if (usingError) {                throw new BuildException("attribute \"error\""                    + " cannot coexist with a nested <errormapper>");            } else {                throw new BuildException("Cannot have > 1 <errormapper>");            }        }        setChecked(false);        this.errorMapper = errorMapper;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public void addConfiguredOutputMapper(Mapper outputMapper) {        if (isReference()) {            throw noChildrenAllowed();        }        if (this.outputMapper != null) {            if (usingOutput) {                throw new BuildException("attribute \"output\""                    + " cannot coexist with a nested <outputmapper>");            } else {                throw new BuildException("Cannot have > 1 <outputmapper>");            }        }        setChecked(false);        this.outputMapper = outputMapper;    }
Clone class 132, 7 fragments, nominal size 10 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public void setInput(File input) {        if (isReference()) {            throw tooManyAttributes();        }        if (inputString != null) {            throw new BuildException("The \"input\" and \"inputstring\" "                + "attributes cannot both be specified");        }        usingInput = true;        inputMapper = createMergeMapper(input);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public void setError(File error) {        if (isReference()) {            throw tooManyAttributes();        }        if (error == null) {            throw new IllegalArgumentException("error file specified as null");        }        usingError = true;        errorMapper = createMergeMapper(error);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public void setOutput(File out) {        if (isReference()) {            throw tooManyAttributes();        }        if (out == null) {            throw new IllegalArgumentException("output file specified as null");        }        usingOutput = true;        outputMapper = createMergeMapper(out);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/selectors/ResourceSelectorContainer.java    public void add(ResourceSelector s) {        if (isReference()) {            throw noChildrenAllowed();        }        if (s == null) {            return;        }        resourceSelectors.add(s);        setChecked(false);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Restrict.java    public synchronized void add(ResourceCollection c) {        if (isReference()) {            throw noChildrenAllowed();        }        if (c == null) {            return;        }        w.add(c);        setChecked(false);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/comparators/DelegatedResourceComparator.java    public synchronized void add(ResourceComparator c) {        if (isReference()) {            throw noChildrenAllowed();        }        if (c == null) {            return;        }        resourceComparators = (resourceComparators == null) ? new Vector<ResourceComparator>() : resourceComparators;        resourceComparators.add(c);        setChecked(false);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Tokens.java    public synchronized void add(Tokenizer tokenizer) {        if (isReference()) {            throw noChildrenAllowed();        }        if (this.tokenizer != null) {            throw new BuildException("Only one nested tokenizer allowed.");        }        this.tokenizer = tokenizer;        setChecked(false);    }
Clone class 133, 4 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public FilterChain createInputFilterChain() {        if (isReference()) {            throw noChildrenAllowed();        }        FilterChain result = new FilterChain();        result.setProject(getProject());        inputFilterChains.add(result);        setChecked(false);        return result;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Files.java    public synchronized PatternSet createPatternSet() {        if (isReference()) {            throw noChildrenAllowed();        }        PatternSet patterns = new PatternSet();        additionalPatterns.addElement(patterns);        ds = null;        setChecked(false);        return patterns;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public FilterChain createErrorFilterChain() {        if (isReference()) {            throw noChildrenAllowed();        }        FilterChain result = new FilterChain();        result.setProject(getProject());        errorFilterChains.add(result);        setChecked(false);        return result;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/RedirectorElement.java    public FilterChain createOutputFilterChain() {        if (isReference()) {            throw noChildrenAllowed();        }        FilterChain result = new FilterChain();        result.setProject(getProject());        outputFilterChains.add(result);        setChecked(false);        return result;    }
Clone class 134, 2 fragments, nominal size 23 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/AbstractClasspathResource.java    public InputStream getInputStream() throws IOException {        if (isReference()) {            return ((Resource) getCheckedRef()).getInputStream();        }        dieOnCircularReference();        final ClassLoaderWithFlag classLoader = getClassLoader();        return !classLoader.needsCleanup()            ? openInputStream(classLoader.getLoader())            : new FilterInputStream(openInputStream(classLoader.getLoader())) {                    public void close() throws IOException {                        FileUtils.close(in);                        classLoader.cleanup();                    }                    protected void finalize() throws Throwable {                        try {                            close();                        } finally {                            super.finalize();                        }                    }                };    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/ZipResource.java    public InputStream getInputStream() throws IOException {        if (isReference()) {            return ((Resource) getCheckedRef()).getInputStream();        }        final ZipFile z = new ZipFile(getZipfile(), getEncoding());        ZipEntry ze = z.getEntry(getName());        if (ze == null) {            z.close();            throw new BuildException("no entry " + getName() + " in "                                     + getArchive());        }        return new FilterInputStream(z.getInputStream(ze)) {            public void close() throws IOException {                FileUtils.close(in);                z.close();            }            protected void finalize() throws Throwable {                try {                    close();                } finally {                    super.finalize();                }            }        };    }
Clone class 135, 2 fragments, nominal size 19 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/AbstractResourceCollectionWrapper.java    public synchronized void add(ResourceCollection c) throws BuildException {        if (isReference()) {            throw noChildrenAllowed();        }        if (c == null) {            return;        }        if (rc != null) {            throw oneNested();        }        rc = c;        if (Project.getProject(rc) == null) {            Project p = getProject();            if (p != null) {                p.setProjectReference(rc);            }        }        setChecked(false);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionContainer.java    public synchronized void add(ResourceCollection c) throws BuildException {        if (isReference()) {            throw noChildrenAllowed();        }        if (c == null) {            return;        }        if (Project.getProject(c) == null) {            Project p = getProject();            if (p != null) {                p.setProjectReference(c);            }        }        rc.add(c);        FailFast.invalidate(this);        coll = null;        setChecked(false);    }
Clone class 136, 5 fragments, nominal size 16 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/AbstractResourceCollectionWrapper.java    public synchronized String toString() {        if (isReference()) {            return getCheckedRef().toString();        }        if (getSize() == 0) {            return "";        }        StringBuilder sb = new StringBuilder();        for (Resource resource : this) {            if (sb.length() > 0) {                sb.append(File.pathSeparatorChar);            }            sb.append(resource);        }        return sb.toString();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Resources.java    public synchronized String toString() {        if (isReference()) {            return getCheckedRef().toString();        }        validate();        if (coll == null || coll.isEmpty()) {            return "";        }        StringBuffer sb = new StringBuffer();        for (Resource r : coll) {            if (sb.length() > 0) {                sb.append(File.pathSeparatorChar);            }            sb.append(r);        }        return sb.toString();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/Files.java    public String toString() {        if (isReference()) {            return getRef().toString();        }        Iterator<Resource> i = iterator();        if (!i.hasNext()) {            return "";        }        StringBuffer sb = new StringBuffer();        while (i.hasNext()) {            if (sb.length() > 0) {                sb.append(File.pathSeparatorChar);            }            sb.append(i.next());        }        return sb.toString();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/MappedResourceCollection.java    public String toString() {        if (isReference()) {            return getCheckedRef().toString();        }        Iterator<Resource> i = iterator();        if (!i.hasNext()) {            return "";        }        StringBuffer sb = new StringBuffer();        while (i.hasNext()) {            if (sb.length() > 0) {                sb.append(File.pathSeparatorChar);            }            sb.append(i.next());        }        return sb.toString();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionContainer.java    public synchronized String toString() {        if (isReference()) {            return getCheckedRef().toString();        }        if (cacheCollection().size() == 0) {            return "";        }        StringBuilder sb = new StringBuilder();        for (Resource resource : coll) {            if (sb.length() > 0) {                sb.append(File.pathSeparatorChar);            }            sb.append(resource);        }        return sb.toString();    }
Clone class 137, 4 fragments, nominal size 13 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/ArchiveResource.java    public boolean equals(Object another) {        if (this == another) {            return true;        }        if (isReference()) {            return getCheckedRef().equals(another);        }        if (another == null || !(another.getClass().equals(getClass()))) {            return false;        }        ArchiveResource r = (ArchiveResource) another;        return getArchive().equals(r.getArchive())            && getName().equals(r.getName());    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/URLResource.java    public synchronized boolean equals(Object another) {        if (this == another) {            return true;        }        if (isReference()) {            return getCheckedRef().equals(another);        }        if (another == null || !(another.getClass().equals(getClass()))) {            return false;        }        URLResource otheru = (URLResource) another;        return getURL() == null            ? otheru.getURL() == null            : getURL().equals(otheru.getURL());    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/FileResource.java    public boolean equals(Object another) {        if (this == another) {            return true;        }        if (isReference()) {            return getCheckedRef().equals(another);        }        if (another == null || !(another.getClass().equals(getClass()))) {            return false;        }        FileResource otherfr = (FileResource) another;        return getFile() == null            ? otherfr.getFile() == null            : getFile().equals(otherfr.getFile()) && getName().equals(otherfr.getName());    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/comparators/DelegatedResourceComparator.java    public synchronized boolean equals(Object o) {        if (o == this) {            return true;        }        if (isReference()) {            return getCheckedRef().equals(o);        }        if (!(o instanceof DelegatedResourceComparator)) {            return false;        }        List<ResourceComparator> ov = ((DelegatedResourceComparator) o).resourceComparators;        return resourceComparators == null ? ov == null : resourceComparators.equals(ov);    }
Clone class 138, 2 fragments, nominal size 15 lines, similarity 75%
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/TarResource.java    private void setEntry(TarEntry e) {        if (e == null) {            setExists(false);            return;        }        setName(e.getName());        setExists(true);        setLastModified(e.getModTime().getTime());        setDirectory(e.isDirectory());        setSize(e.getSize());        setMode(e.getMode());        userName = e.getUserName();        groupName = e.getGroupName();        uid = e.getUserId();        gid = e.getGroupId();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/ZipResource.java    private void setEntry(ZipEntry e) {        if (e == null) {            setExists(false);            return;        }        setName(e.getName());        setExists(true);        setLastModified(e.getTime());        setDirectory(e.isDirectory());        setSize(e.getSize());        setMode(e.getUnixMode());        extras = e.getExtraFields(true);        method = e.getMethod();    }
Clone class 139, 2 fragments, nominal size 14 lines, similarity 92%
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/URLResource.java    public synchronized long getLastModified() {        if (isReference()) {            return ((Resource) getCheckedRef()).getLastModified();        }        if (!isExists(false)) {            return UNKNOWN_DATETIME;        }        return withConnection(new ConnectionUser() {                public long useConnection(URLConnection c) {                    return conn.getLastModified();                }            }, UNKNOWN_DATETIME);    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/URLResource.java    public synchronized long getSize() {        if (isReference()) {            return ((Resource) getCheckedRef()).getSize();        }        if (!isExists(false)) {            return 0L;        }        return withConnection(new ConnectionUser() {                public long useConnection(URLConnection c) {                    return conn.getContentLength();                }            }, UNKNOWN_SIZE);    }
Clone class 140, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/URLResource.java    public synchronized InputStream getInputStream() throws IOException {        if (isReference()) {            return ((Resource) getCheckedRef()).getInputStream();        }        connect();        try {            return conn.getInputStream();        } finally {            conn = null;        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/resources/URLResource.java    public synchronized OutputStream getOutputStream() throws IOException {        if (isReference()) {            return ((Resource) getCheckedRef()).getOutputStream();        }        connect();        try {            return conn.getOutputStream();        } finally {            conn = null;        }    }
Clone class 141, 2 fragments, nominal size 13 lines, similarity 84%
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/AbstractSelectorContainer.java    public String toString() {        StringBuilder buf = new StringBuilder();        Enumeration<FileSelector> e = selectorElements();        if (e.hasMoreElements()) {            while (e.hasMoreElements()) {                buf.append(e.nextElement().toString());                if (e.hasMoreElements()) {                    buf.append(", ");                }            }        }        return buf.toString();    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/BaseSelectorContainer.java    public String toString() {        dieOnCircularReference();        StringBuilder buf = new StringBuilder();        Enumeration<FileSelector> e = selectorElements();        while (e.hasMoreElements()) {            buf.append(e.nextElement().toString());            if (e.hasMoreElements()) {                buf.append(", ");            }        }        return buf.toString();    }
Clone class 142, 3 fragments, nominal size 10 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/AndSelector.java    public boolean isSelected(File basedir, String filename, File file) {        validate();        Enumeration<FileSelector> e = selectorElements();        while (e.hasMoreElements()) {            if (!e.nextElement().isSelected(basedir, filename, file)) {                return false;            }        }        return true;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/OrSelector.java    public boolean isSelected(File basedir, String filename, File file) {        validate();        Enumeration<FileSelector> e = selectorElements();        // First, check that all elements are correctly configured        while (e.hasMoreElements()) {            if (e.nextElement().isSelected(basedir, filename, file)) {                return true;            }        }        return false;    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/NoneSelector.java    public boolean isSelected(File basedir, String filename, File file) {        validate();        Enumeration<FileSelector> e = selectorElements();        while (e.hasMoreElements()) {            if (e.nextElement().isSelected(basedir, filename, file)) {                return false;            }        }        return true;    }
Clone class 143, 4 fragments, nominal size 19 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/ContainsRegexpSelector.java    public void setParameters(Parameter[] parameters) {        super.setParameters(parameters);        if (parameters != null) {            for (int i = 0; i < parameters.length; i++) {                String paramname = parameters[i].getName();                if (EXPRESSION_KEY.equalsIgnoreCase(paramname)) {                    setExpression(parameters[i].getValue());                } else if (CS_KEY.equalsIgnoreCase(paramname)) {                    setCaseSensitive(Project                                     .toBoolean(parameters[i].getValue()));                } else if (ML_KEY.equalsIgnoreCase(paramname)) {                    setMultiLine(Project.toBoolean(parameters[i].getValue()));                } else if (SL_KEY.equalsIgnoreCase(paramname)) {                    setSingleLine(Project.toBoolean(parameters[i].getValue()));                } else {                    setError("Invalid parameter " + paramname);                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/FilenameSelector.java    public void setParameters(Parameter[] parameters) {        super.setParameters(parameters);        if (parameters != null) {            for (int i = 0; i < parameters.length; i++) {                String paramname = parameters[i].getName();                if (NAME_KEY.equalsIgnoreCase(paramname)) {                    setName(parameters[i].getValue());                } else if (CASE_KEY.equalsIgnoreCase(paramname)) {                    setCasesensitive(Project.toBoolean(                            parameters[i].getValue()));                } else if (NEGATE_KEY.equalsIgnoreCase(paramname)) {                    setNegate(Project.toBoolean(parameters[i].getValue()));                } else if (REGEX_KEY.equalsIgnoreCase(paramname)) {                    setRegex(parameters[i].getValue());                } else {                    setError("Invalid parameter " + paramname);                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/ContainsSelector.java    public void setParameters(Parameter[] parameters) {        super.setParameters(parameters);        if (parameters != null) {            for (int i = 0; i < parameters.length; i++) {                String paramname = parameters[i].getName();                if (CONTAINS_KEY.equalsIgnoreCase(paramname)) {                    setText(parameters[i].getValue());                } else if (CASE_KEY.equalsIgnoreCase(paramname)) {                    setCasesensitive(Project.toBoolean(                            parameters[i].getValue()));                } else if (WHITESPACE_KEY.equalsIgnoreCase(paramname)) {                    setIgnorewhitespace(Project.toBoolean(                            parameters[i].getValue()));                } else {                    setError("Invalid parameter " + paramname);                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/TypeSelector.java    public void setParameters(Parameter[] parameters) {        super.setParameters(parameters);        if (parameters != null) {            for (int i = 0; i < parameters.length; i++) {                String paramname = parameters[i].getName();                if (TYPE_KEY.equalsIgnoreCase(paramname)) {                    FileType t = new FileType();                    t.setValue(parameters[i].getValue());                    setType(t);                } else {                    setError("Invalid parameter " + paramname);                }            }        }    }
Clone class 144, 2 fragments, nominal size 15 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/MappingSelector.java    public void verifySettings() {        if (targetdir == null) {            setError("The targetdir attribute is required.");        }        if (map == null) {            if (mapperElement == null) {                map = new IdentityMapper();            } else {                map = mapperElement.getImplementation();                if (map == null) {                    setError("Could not set <mapper> element.");                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/selectors/PresentSelector.java    public void verifySettings() {        if (targetdir == null) {            setError("The targetdir attribute is required.");        }        if (map == null) {            if (mapperElement == null) {                map = new IdentityMapper();            } else {                map = mapperElement.getImplementation();                if (map == null) {                    setError("Could not set <mapper> element.");                }            }        }    }
Clone class 145, 2 fragments, nominal size 14 lines, similarity 92%
apache_ant/ant/src/main/org/apache/tools/ant/types/TarFileSet.java    protected AbstractFileSet getRef(Project p) {        dieOnCircularReference(p);        Object o = getRefid().getReferencedObject(p);        if (o instanceof TarFileSet) {            return (AbstractFileSet) o;        } else if (o instanceof FileSet) {            TarFileSet zfs = new TarFileSet((FileSet) o);            configureFileSet(zfs);            return zfs;        } else {            String msg = getRefid().getRefId() + " doesn\'t denote a tarfileset or a fileset";            throw new BuildException(msg);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/types/ZipFileSet.java    protected AbstractFileSet getRef(Project p) {        dieOnCircularReference(p);        Object o = getRefid().getReferencedObject(p);        if (o instanceof ZipFileSet) {            return (AbstractFileSet) o;        } else if (o instanceof FileSet) {            ZipFileSet zfs = new ZipFileSet((FileSet) o);            configureFileSet(zfs);            return zfs;        } else {            String msg = getRefid().getRefId() + " doesn\'t denote a zipfileset or a fileset";            throw new BuildException(msg);        }    }
Clone class 146, 2 fragments, nominal size 13 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/ant/util/CollectionUtils.java    public static <E> Enumeration<E> asEnumeration(final Iterator<E> iter) {        return new Enumeration<E>() {            public boolean hasMoreElements() {                return iter.hasNext();            }            public E nextElement() {                return iter.next();            }        };    }
apache_ant/ant/src/main/org/apache/tools/ant/util/CollectionUtils.java    public static <E> Iterator<E> asIterator(final Enumeration<E> e) {        return new Iterator<E>() {            public boolean hasNext() {                return e.hasMoreElements();            }            public E next() {                return e.nextElement();            }            public void remove() {                throw new UnsupportedOperationException();            }        };    }
Clone class 147, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/util/ConcatFileInputStream.java    public void log(String message, int loglevel) {        if (managingPc != null) {            managingPc.log(message, loglevel);        } else {            if (loglevel > Project.MSG_WARN) {                System.out.println(message);            } else {                System.err.println(message);            }        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/LeadPipeInputStream.java    public void log(String message, int loglevel) {        if (managingPc != null) {            managingPc.log(message, loglevel);        } else {            if (loglevel > Project.MSG_WARN) {                System.out.println(message);            } else {                System.err.println(message);            }        }    }
Clone class 148, 2 fragments, nominal size 55 lines, similarity 74%
apache_ant/ant/src/main/org/apache/tools/ant/util/depend/bcel/AncestorAnalyzer.java    protected void determineDependencies(Vector<File> files, Vector<String> classes) {        // we get the root classes and build up a set of        // classes upon which they depend        Hashtable<String, String> dependencies = new Hashtable<String, String>();        Hashtable<File, File> containers = new Hashtable<File, File>();        Hashtable<String, String> toAnalyze = new Hashtable<String, String>();        Hashtable<String, String> nextAnalyze = new Hashtable<String, String>();        for (Enumeration<String> e = getRootClasses(); e.hasMoreElements();) {            String classname = e.nextElement();            toAnalyze.put(classname, classname);        }        int count = 0;        int maxCount = isClosureRequired() ? MAX_LOOPS : 2;        while (toAnalyze.size() != 0 && count++ < maxCount) {            nextAnalyze.clear();            for (String classname : toAnalyze.keySet()) {                dependencies.put(classname, classname);                try {                    File container = getClassContainer(classname);                    if (container == null) {                        continue;                    }                    containers.put(container, container);                    ClassParser parser = null;                    if (container.getName().endsWith(".class")) {                        parser = new ClassParser(container.getPath());                    } else {                        parser = new ClassParser(container.getPath(),                            classname.replace('.', '/') + ".class");                    }                    JavaClass javaClass = parser.parse();                    String[] interfaces = javaClass.getInterfaceNames();                    for (int i = 0; i < interfaces.length; ++i) {                        String interfaceName = interfaces[i];                        if (!dependencies.containsKey(interfaceName)) {                            nextAnalyze.put(interfaceName, interfaceName);                        }                    }                    if (javaClass.isClass()) {                        String superClass = javaClass.getSuperclassName();                        if (!dependencies.containsKey(superClass)) {                            nextAnalyze.put(superClass, superClass);                        }                    }                } catch (IOException ioe) {                    // ignore                }            }            Hashtable<String, String> temp = toAnalyze;            toAnalyze = nextAnalyze;            nextAnalyze = temp;        }        files.removeAllElements();        for (File f : containers.keySet()) {            files.add(f);        }        classes.removeAllElements();        for (String dependency : dependencies.keySet()) {            classes.add(dependency);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/depend/bcel/FullAnalyzer.java    protected void determineDependencies(Vector<File> files, Vector<String> classes) {        // we get the root classes and build up a set of        // classes upon which they depend        Hashtable<String, String> dependencies = new Hashtable<String, String>();        Hashtable<File, File> containers = new Hashtable<File, File>();        Hashtable<String, String> toAnalyze = new Hashtable<String, String>();        for (Enumeration<String> e = getRootClasses(); e.hasMoreElements();) {            String classname = e.nextElement();            toAnalyze.put(classname, classname);        }        int count = 0;        int maxCount = isClosureRequired() ? MAX_LOOPS : 2;        while (toAnalyze.size() != 0 && count++ < maxCount) {            DependencyVisitor dependencyVisitor = new DependencyVisitor();            for (String classname : toAnalyze.keySet()) {                dependencies.put(classname, classname);                try {                    File container = getClassContainer(classname);                    if (container == null) {                        continue;                    }                    containers.put(container, container);                    ClassParser parser = null;                    if (container.getName().endsWith(".class")) {                        parser = new ClassParser(container.getPath());                    } else {                        parser = new ClassParser(container.getPath(),                            classname.replace('.', '/') + ".class");                    }                    JavaClass javaClass = parser.parse();                    DescendingVisitor traverser                         = new DescendingVisitor(javaClass, dependencyVisitor);                    traverser.visit();                } catch (IOException ioe) {                    // ignore                }            }            toAnalyze.clear();            // now recover all the dependencies collected and add to the list.            Enumeration<String> depsEnum = dependencyVisitor.getDependencies();            while (depsEnum.hasMoreElements()) {                String className = depsEnum.nextElement();                if (!dependencies.containsKey(className)) {                    toAnalyze.put(className, className);                }            }        }        files.removeAllElements();        for (File f : containers.keySet()) {            files.add(f);        }        classes.removeAllElements();        for (String dependency : dependencies.keySet()) {            classes.add(dependency);        }    }
Clone class 149, 4 fragments, nominal size 13 lines, similarity 73%
apache_ant/ant/src/main/org/apache/tools/ant/util/DeweyDecimal.java    public boolean isEqual(final DeweyDecimal other) {        final int max = Math.max(other.components.length, components.length);        for (int i = 0; i < max; i++) {            final int component1 = (i < components.length) ? components[ i ] : 0;            final int component2 = (i < other.components.length) ? other.components[ i ] : 0;            if (component2 != component1) {                return false;            }        }        return true; // Exact match    }
apache_ant/ant/src/main/org/apache/tools/ant/util/DeweyDecimal.java    public int compareTo(DeweyDecimal other) {        final int max = Math.max(other.components.length, components.length);        for (int i = 0; i < max; i++) {            final int component1 = (i < components.length) ? components[ i ] : 0;            final int component2 = (i < other.components.length) ? other.components[ i ] : 0;            if (component1 != component2) {                return component1 - component2;            }        }        return 0;    }
apache_ant/ant/src/main/org/apache/tools/ant/util/DeweyDecimal.java    public boolean isGreaterThanOrEqual(final DeweyDecimal other) {        final int max = Math.max(other.components.length, components.length);        for (int i = 0; i < max; i++) {            final int component1 = (i < components.length) ? components[ i ] : 0;            final int component2 = (i < other.components.length) ? other.components[ i ] : 0;            if (component2 > component1) {                return false;            }            if (component2 < component1) {                return true;            }        }        return true; // Exact match    }
apache_ant/ant/src/main/org/apache/tools/ant/util/DeweyDecimal.java    public boolean isGreaterThan(final DeweyDecimal other) {        final int max = Math.max(other.components.length, components.length);        for (int i = 0; i < max; i++) {            final int component1 = (i < components.length) ? components[ i ] : 0;            final int component2 = (i < other.components.length) ? other.components[ i ] : 0;            if (component2 > component1) {                return false;            }            if (component2 < component1) {                return true;            }        }        return false; // Exact match    }
Clone class 150, 2 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/ant/util/FileUtils.java    public String removeLeadingPath(File leading, File path) {        String l = normalize(leading.getAbsolutePath()).getAbsolutePath();        String p = normalize(path.getAbsolutePath()).getAbsolutePath();        if (l.equals(p)) {            return "";        }        // ensure that l ends with a /        // so we never think /foo was a parent directory of /foobar        if (!l.endsWith(File.separator)) {            l += File.separator;        }        return (p.startsWith(l)) ? p.substring(l.length()) : p;    }
apache_ant/ant/src/main/org/apache/tools/ant/util/FileUtils.java    public boolean isLeadingPath(File leading, File path) {        String l = normalize(leading.getAbsolutePath()).getAbsolutePath();        String p = normalize(path.getAbsolutePath()).getAbsolutePath();        if (l.equals(p)) {            return true;        }        // ensure that l ends with a /        // so we never think /foo was a parent directory of /foobar        if (!l.endsWith(File.separator)) {            l += File.separator;        }        return p.startsWith(l);    }
Clone class 151, 2 fragments, nominal size 16 lines, similarity 82%
apache_ant/ant/src/main/org/apache/tools/ant/util/GlobPatternMapper.java    public void setFrom(String from) {        if (from != null) {            int index = from.lastIndexOf("*");            if (index == -1) {                fromPrefix = from;                fromPostfix = "";            } else {                fromPrefix = from.substring(0, index);                fromPostfix = from.substring(index + 1);                fromContainsStar = true;            }            prefixLength = fromPrefix.length();            postfixLength = fromPostfix.length();        } else {            throw new BuildException("this mapper requires a 'from' attribute");        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/GlobPatternMapper.java    public void setTo(String to) {        if (to != null) {            int index = to.lastIndexOf("*");            if (index == -1) {                toPrefix = to;                toPostfix = "";            } else {                toPrefix = to.substring(0, index);                toPostfix = to.substring(index + 1);                toContainsStar = true;            }        } else {            throw new BuildException("this mapper requires a 'to' attribute");        }    }
Clone class 152, 2 fragments, nominal size 17 lines, similarity 88%
apache_ant/ant/src/main/org/apache/tools/ant/util/JavaEnvUtils.java    public static String getJreExecutable(String command) {        if (IS_NETWARE) {            // Extrapolating from:            // "NetWare may have a "java" in that directory, but 99% of            // the time, you don't want to execute it" -- Jeff Tulley            // <JTULLEY@novell.com>            return command;        }        File jExecutable = null;        if (IS_AIX) {            // On IBM's JDK 1.2 the directory layout is different, 1.3 follows            // Sun's layout.            jExecutable = findInDir(JAVA_HOME + "/sh", command);        }        if (jExecutable == null) {            jExecutable = findInDir(JAVA_HOME + "/bin", command);        }        if (jExecutable != null) {            return jExecutable.getAbsolutePath();        } else {            // Unfortunately on Windows java.home doesn't always refer            // to the correct location, so we need to fall back to            // assuming java is somewhere on the PATH.            return addExtension(command);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/JavaEnvUtils.java    public static String getJdkExecutable(String command) {        if (IS_NETWARE) {            // Extrapolating from:            // "NetWare may have a "java" in that directory, but 99% of            // the time, you don't want to execute it" -- Jeff Tulley            // <JTULLEY@novell.com>            return command;        }        File jExecutable = null;        if (IS_AIX) {            // On IBM's JDK 1.2 the directory layout is different, 1.3 follows            // Sun's layout.            jExecutable = findInDir(JAVA_HOME + "/../sh", command);        }        if (jExecutable == null) {            jExecutable = findInDir(JAVA_HOME + "/../bin", command);        }        if (jExecutable != null) {            return jExecutable.getAbsolutePath();        } else {            // fall back to JRE bin directory, also catches JDK 1.0 and 1.1            // where java.home points to the root of the JDK and Mac OS X where            // the whole directory layout is different from Sun's            // and also catches JDK 9 (and probably later) which            // merged JDK and JRE dirs            return getJreExecutable(command);        }    }
Clone class 153, 2 fragments, nominal size 17 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/util/optional/ScriptRunner.java    public void executeScript(String execName) throws BuildException {        checkLanguage();        ClassLoader origLoader = replaceContextLoader();        try {            BSFManager m = createManager();            declareBeans(m);            // execute the script            if (engine == null) {                m.exec(getLanguage(), execName, 0, 0, getScript());            } else {                engine.exec(execName, 0, 0, getScript());            }        } catch (BSFException be) {            throw getBuildException(be);        } finally {            restoreContextLoader(origLoader);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/optional/ScriptRunner.java    public Object evaluateScript(String execName) throws BuildException {        checkLanguage();        ClassLoader origLoader = replaceContextLoader();        try {            BSFManager m = createManager();            declareBeans(m);            // execute the script            if (engine == null) {                return m.eval(getLanguage(), execName, 0, 0, getScript());            }            return engine.eval(execName, 0, 0, getScript());        } catch (BSFException be) {            throw getBuildException(be);        } finally {            restoreContextLoader(origLoader);        }    }
Clone class 154, 4 fragments, nominal size 10 lines, similarity 70%
apache_ant/ant/src/main/org/apache/tools/ant/util/ReflectUtil.java    public static Object invoke(Object obj, String methodName) {        try {            Method method;            method = obj.getClass().getMethod(                        methodName, (Class[]) null);            return method.invoke(obj, (Object[]) null);        } catch (Exception t) {            throwBuildException(t);            return null; // NotReached        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/ReflectUtil.java    public static Object invoke(        Object obj, String methodName, Class<?> argType, Object arg) {        try {            Method method;            method = obj.getClass().getMethod(                methodName, new Class[] {argType});            return method.invoke(obj, new Object[] {arg});        } catch (Exception t) {            throwBuildException(t);            return null; // NotReached        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/ReflectUtil.java    public static Object invoke(        Object obj, String methodName, Class<?> argType1, Object arg1,        Class<?> argType2, Object arg2) {        try {            Method method;            method = obj.getClass().getMethod(                methodName, new Class[] {argType1, argType2});            return method.invoke(obj, new Object[] {arg1, arg2});        } catch (Exception t) {            throwBuildException(t);            return null; // NotReached        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/ReflectUtil.java    public static Object invokeStatic(Object obj, String methodName) {        try {            Method method;            method = ((Class<?>) obj).getMethod(                    methodName, (Class[]) null);            return method.invoke(obj, (Object[]) null);        }  catch (Exception t) {            throwBuildException(t);            return null; // NotReached        }    }
Clone class 155, 3 fragments, nominal size 17 lines, similarity 76%
apache_ant/ant/src/main/org/apache/tools/ant/util/regexp/JakartaOroMatcher.java    public Vector getGroups(final String input, final int options)        throws BuildException {        if (!matches(input, options)) {            return null;        }        final Vector v = new Vector();        final MatchResult mr = matcher.getMatch();        final int cnt = mr.groups();        for (int i = 0; i < cnt; i++) {            String match = mr.group(i);            // treat non-matching groups as empty matches            if (match == null) {                match = "";            }            v.addElement(match);        }        return v;    }
apache_ant/ant/src/main/org/apache/tools/ant/util/regexp/JakartaRegexpMatcher.java    public Vector getGroups(String input, int options)        throws BuildException {        RE reg = getCompiledPattern(options);        if (!matches(input, reg)) {            return null;        }        Vector v = new Vector();        int cnt = reg.getParenCount();        for (int i = 0; i < cnt; i++) {            String match = reg.getParen(i);            // treat non-matching groups as empty matches            if (match == null) {                match = "";            }            v.addElement(match);        }        return v;    }
apache_ant/ant/src/main/org/apache/tools/ant/util/regexp/Jdk14RegexpMatcher.java    public Vector getGroups(String input, int options)        throws BuildException {        Pattern p = getCompiledPattern(options);        Matcher matcher = p.matcher(input);        if (!matcher.find()) {            return null;        }        Vector v = new Vector();        int cnt = matcher.groupCount();        for (int i = 0; i <= cnt; i++) {            String match = matcher.group(i);            // treat non-matching groups as empty matches            if (match == null) {                match = "";            }            v.addElement(match);        }        return v;    }
Clone class 156, 3 fragments, nominal size 13 lines, similarity 92%
apache_ant/ant/src/main/org/apache/tools/ant/util/regexp/JakartaOroMatcher.java    protected int getCompilerOptions(final int options) {        int cOptions = Perl5Compiler.DEFAULT_MASK;        if (RegexpUtil.hasFlag(options, MATCH_CASE_INSENSITIVE)) {            cOptions |= Perl5Compiler.CASE_INSENSITIVE_MASK;        }        if (RegexpUtil.hasFlag(options, MATCH_MULTILINE)) {            cOptions |= Perl5Compiler.MULTILINE_MASK;        }        if (RegexpUtil.hasFlag(options, MATCH_SINGLELINE)) {            cOptions |= Perl5Compiler.SINGLELINE_MASK;        }        return cOptions;    }
apache_ant/ant/src/main/org/apache/tools/ant/util/regexp/JakartaRegexpMatcher.java    protected int getCompilerOptions(int options) {        int cOptions = RE.MATCH_NORMAL;        if (RegexpUtil.hasFlag(options, MATCH_CASE_INSENSITIVE)) {            cOptions |= RE.MATCH_CASEINDEPENDENT;        }        if (RegexpUtil.hasFlag(options, MATCH_MULTILINE)) {            cOptions |= RE.MATCH_MULTILINE;        }        if (RegexpUtil.hasFlag(options, MATCH_SINGLELINE)) {            cOptions |= RE.MATCH_SINGLELINE;        }        return cOptions;    }
apache_ant/ant/src/main/org/apache/tools/ant/util/regexp/Jdk14RegexpMatcher.java    protected int getCompilerOptions(int options) {        // be strict about line separator        int cOptions = Pattern.UNIX_LINES;        if (RegexpUtil.hasFlag(options, MATCH_CASE_INSENSITIVE)) {            cOptions |= Pattern.CASE_INSENSITIVE;        }        if (RegexpUtil.hasFlag(options, MATCH_MULTILINE)) {            cOptions |= Pattern.MULTILINE;        }        if (RegexpUtil.hasFlag(options, MATCH_SINGLELINE)) {            cOptions |= Pattern.DOTALL;        }        return cOptions;    }
Clone class 157, 2 fragments, nominal size 12 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/util/regexp/RegexpFactory.java    public Regexp newRegexp(Project p) throws BuildException {        String systemDefault = null;        if (p == null) {            systemDefault = System.getProperty(MagicNames.REGEXP_IMPL);        } else {            systemDefault = p.getProperty(MagicNames.REGEXP_IMPL);        }        if (systemDefault != null) {            return createRegexpInstance(systemDefault);            // TODO     should we silently catch possible exceptions and try to            //         load a different implementation?        }        return new Jdk14RegexpRegexp();    }
apache_ant/ant/src/main/org/apache/tools/ant/util/regexp/RegexpMatcherFactory.java    public RegexpMatcher newRegexpMatcher(Project p) throws BuildException {        String systemDefault = null;        if (p == null) {            systemDefault = System.getProperty(MagicNames.REGEXP_IMPL);        } else {            systemDefault = p.getProperty(MagicNames.REGEXP_IMPL);        }        if (systemDefault != null) {            return createInstance(systemDefault);            // TODO     should we silently catch possible exceptions and try to            //         load a different implementation?        }        return new Jdk14RegexpMatcher();    }
Clone class 158, 2 fragments, nominal size 44 lines, similarity 73%
apache_ant/ant/src/main/org/apache/tools/ant/util/ResourceUtils.java    private static void copyWithFilterSets(final Resource source, final Resource dest,                                           final FilterSetCollection filters,                                           final Vector filterChains,                                           final boolean filterChainsAvailable,                                           final boolean append, final String inputEncoding,                                           final String outputEncoding,                                           final Project project)        throws IOException {        BufferedReader in = null;        BufferedWriter out = null;        try {            InputStreamReader isr = null;            if (inputEncoding == null) {                isr = new InputStreamReader(source.getInputStream());            } else {                isr = new InputStreamReader(source.getInputStream(),                                            inputEncoding);            }            in = new BufferedReader(isr);            final OutputStream os = getOutputStream(dest, append, project);            OutputStreamWriter osw;            if (outputEncoding == null) {                osw = new OutputStreamWriter(os);            } else {                osw = new OutputStreamWriter(os, outputEncoding);            }            out = new BufferedWriter(osw);            if (filterChainsAvailable) {                final ChainReaderHelper crh = new ChainReaderHelper();                crh.setBufferSize(FileUtils.BUF_SIZE);                crh.setPrimaryReader(in);                crh.setFilterChains(filterChains);                crh.setProject(project);                final Reader rdr = crh.getAssembledReader();                in = new BufferedReader(rdr);            }            final LineTokenizer lineTokenizer = new LineTokenizer();            lineTokenizer.setIncludeDelims(true);            String newline = null;            String line = lineTokenizer.getToken(in);            while (line != null) {                if (line.length() == 0) {                    // this should not happen, because the lines are                    // returned with the end of line delimiter                    out.newLine();                } else {                    newline = filters.replaceTokens(line);                    out.write(newline);                }                line = lineTokenizer.getToken(in);            }        } finally {            FileUtils.close(out);            FileUtils.close(in);        }    }
apache_ant/ant/src/main/org/apache/tools/ant/util/ResourceUtils.java    private static void copyWithFilterChainsOrTranscoding(final Resource source,                                                          final Resource dest,                                                          final Vector filterChains,                                                          final boolean filterChainsAvailable,                                                          final boolean append,                                                          final String inputEncoding,                                                          final String outputEncoding,                                                          final Project project)        throws IOException {        BufferedReader in = null;        BufferedWriter out = null;        try {            InputStreamReader isr = null;            if (inputEncoding == null) {                isr = new InputStreamReader(source.getInputStream());            } else {                isr = new InputStreamReader(source.getInputStream(),                                            inputEncoding);            }            in = new BufferedReader(isr);            final OutputStream os = getOutputStream(dest, append, project);            OutputStreamWriter osw;            if (outputEncoding == null) {                osw = new OutputStreamWriter(os);            } else {                osw = new OutputStreamWriter(os, outputEncoding);            }            out = new BufferedWriter(osw);            if (filterChainsAvailable) {                final ChainReaderHelper crh = new ChainReaderHelper();                crh.setBufferSize(FileUtils.BUF_SIZE);                crh.setPrimaryReader(in);                crh.setFilterChains(filterChains);                crh.setProject(project);                final Reader rdr = crh.getAssembledReader();                in = new BufferedReader(rdr);            }            final char[] buffer = new char[FileUtils.BUF_SIZE];            while (true) {                final int nRead = in.read(buffer, 0, buffer.length);                if (nRead == -1) {                    break;                }                out.write(buffer, 0, nRead);            }        } finally {            FileUtils.close(out);            FileUtils.close(in);        }    }
Clone class 159, 2 fragments, nominal size 10 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/ant/util/XMLFragment.java    public Object createDynamicElement(String uri, String name, String qName) {        Element e = null;        if (uri.equals("")) {            e = doc.createElement(name);        } else {            e = doc.createElementNS(uri, qName);        }        fragment.appendChild(e);        return new Child(e);    }
apache_ant/ant/src/main/org/apache/tools/ant/util/XMLFragment.java        public Object createDynamicElement(String uri, String name, String qName) {            Element e2 = null;            if (uri.equals("")) {                e2 = doc.createElement(name);            } else {                e2 = doc.createElementNS(uri, qName);            }            e.appendChild(e2);            return new Child(e2);        }
Clone class 160, 2 fragments, nominal size 114 lines, similarity 94%
apache_ant/ant/src/main/org/apache/tools/bzip2/CBZip2OutputStream.java    protected static void hbMakeCodeLengths(char[] len, int[] freq,                                            int alphaSize, int maxLen) {        /*         * Nodes and heap entries run from 1. Entry 0 for both the heap and         * nodes is a sentinel.         */        final int[] heap = new int[MAX_ALPHA_SIZE * 2];        final int[] weight = new int[MAX_ALPHA_SIZE * 2];        final int[] parent = new int[MAX_ALPHA_SIZE * 2];        for (int i = alphaSize; --i >= 0;) {            weight[i + 1] = (freq[i] == 0 ? 1 : freq[i]) << 8;        }        for (boolean tooLong = true; tooLong;) {            tooLong = false;            int nNodes = alphaSize;            int nHeap = 0;            heap[0] = 0;            weight[0] = 0;            parent[0] = -2;            for (int i = 1; i <= alphaSize; i++) {                parent[i] = -1;                nHeap++;                heap[nHeap] = i;                int zz = nHeap;                int tmp = heap[zz];                while (weight[tmp] < weight[heap[zz >> 1]]) {                    heap[zz] = heap[zz >> 1];                    zz >>= 1;                }                heap[zz] = tmp;            }            // assert (nHeap < (MAX_ALPHA_SIZE + 2)) : nHeap;            while (nHeap > 1) {                int n1 = heap[1];                heap[1] = heap[nHeap];                nHeap--;                int yy = 0;                int zz = 1;                int tmp = heap[1];                while (true) {                    yy = zz << 1;                    if (yy > nHeap) {                        break;                    }                    if ((yy < nHeap)                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {                        yy++;                    }                    if (weight[tmp] < weight[heap[yy]]) {                        break;                    }                    heap[zz] = heap[yy];                    zz = yy;                }                heap[zz] = tmp;                int n2 = heap[1];                heap[1] = heap[nHeap];                nHeap--;                yy = 0;                zz = 1;                tmp = heap[1];                while (true) {                    yy = zz << 1;                    if (yy > nHeap) {                        break;                    }                    if ((yy < nHeap)                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {                        yy++;                    }                    if (weight[tmp] < weight[heap[yy]]) {                        break;                    }                    heap[zz] = heap[yy];                    zz = yy;                }                heap[zz] = tmp;                nNodes++;                parent[n1] = parent[n2] = nNodes;                final int weight_n1 = weight[n1];                final int weight_n2 = weight[n2];                weight[nNodes] = (((weight_n1 & 0xffffff00)                                   + (weight_n2 & 0xffffff00))                                  |                                  (1 + (((weight_n1 & 0x000000ff)                                         > (weight_n2 & 0x000000ff))                                        ? (weight_n1 & 0x000000ff)                                        : (weight_n2 & 0x000000ff))                                   ));                parent[nNodes] = -1;                nHeap++;                heap[nHeap] = nNodes;                tmp = 0;                zz = nHeap;                tmp = heap[zz];                final int weight_tmp = weight[tmp];                while (weight_tmp < weight[heap[zz >> 1]]) {                    heap[zz] = heap[zz >> 1];                    zz >>= 1;                }                heap[zz] = tmp;            }            // assert (nNodes < (MAX_ALPHA_SIZE * 2)) : nNodes;            for (int i = 1; i <= alphaSize; i++) {                int j = 0;                int k = i;                for (int parent_k; (parent_k = parent[k]) >= 0;) {                    k = parent_k;                    j++;                }                len[i - 1] = (char) j;                if (j > maxLen) {                    tooLong = true;                }            }            if (tooLong) {                for (int i = 1; i < alphaSize; i++) {                    int j = weight[i] >> 8;                    j = 1 + (j >> 1);                    weight[i] = j << 8;                }            }        }    }
apache_ant/ant/src/main/org/apache/tools/bzip2/CBZip2OutputStream.java    private static void hbMakeCodeLengths(final byte[] len, final int[] freq,                                          final Data dat, final int alphaSize,                                          final int maxLen) {        /*         * Nodes and heap entries run from 1. Entry 0 for both the heap and         * nodes is a sentinel.         */        final int[] heap = dat.heap;        final int[] weight = dat.weight;        final int[] parent = dat.parent;        for (int i = alphaSize; --i >= 0;) {            weight[i + 1] = (freq[i] == 0 ? 1 : freq[i]) << 8;        }        for (boolean tooLong = true; tooLong;) {            tooLong = false;            int nNodes = alphaSize;            int nHeap = 0;            heap[0] = 0;            weight[0] = 0;            parent[0] = -2;            for (int i = 1; i <= alphaSize; i++) {                parent[i] = -1;                nHeap++;                heap[nHeap] = i;                int zz = nHeap;                int tmp = heap[zz];                while (weight[tmp] < weight[heap[zz >> 1]]) {                    heap[zz] = heap[zz >> 1];                    zz >>= 1;                }                heap[zz] = tmp;            }            while (nHeap > 1) {                int n1 = heap[1];                heap[1] = heap[nHeap];                nHeap--;                int yy = 0;                int zz = 1;                int tmp = heap[1];                while (true) {                    yy = zz << 1;                    if (yy > nHeap) {                        break;                    }                    if ((yy < nHeap)                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {                        yy++;                    }                    if (weight[tmp] < weight[heap[yy]]) {                        break;                    }                    heap[zz] = heap[yy];                    zz = yy;                }                heap[zz] = tmp;                int n2 = heap[1];                heap[1] = heap[nHeap];                nHeap--;                yy = 0;                zz = 1;                tmp = heap[1];                while (true) {                    yy = zz << 1;                    if (yy > nHeap) {                        break;                    }                    if ((yy < nHeap)                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {                        yy++;                    }                    if (weight[tmp] < weight[heap[yy]]) {                        break;                    }                    heap[zz] = heap[yy];                    zz = yy;                }                heap[zz] = tmp;                nNodes++;                parent[n1] = parent[n2] = nNodes;                final int weight_n1 = weight[n1];                final int weight_n2 = weight[n2];                weight[nNodes] = ((weight_n1 & 0xffffff00)                                  + (weight_n2 & 0xffffff00))                    | (1 + (((weight_n1 & 0x000000ff)                             > (weight_n2 & 0x000000ff))                            ? (weight_n1 & 0x000000ff)                            : (weight_n2 & 0x000000ff)));                parent[nNodes] = -1;                nHeap++;                heap[nHeap] = nNodes;                tmp = 0;                zz = nHeap;                tmp = heap[zz];                final int weight_tmp = weight[tmp];                while (weight_tmp < weight[heap[zz >> 1]]) {                    heap[zz] = heap[zz >> 1];                    zz >>= 1;                }                heap[zz] = tmp;            }            for (int i = 1; i <= alphaSize; i++) {                int j = 0;                int k = i;                for (int parent_k; (parent_k = parent[k]) >= 0;) {                    k = parent_k;                    j++;                }                len[i - 1] = (byte) j;                if (j > maxLen) {                    tooLong = true;                }            }            if (tooLong) {                for (int i = 1; i < alphaSize; i++) {                    int j = weight[i] >> 8;                    j = 1 + (j >> 1);                    weight[i] = j << 8;                }            }        }    }
Clone class 161, 2 fragments, nominal size 19 lines, similarity 78%
apache_ant/ant/src/main/org/apache/tools/tar/TarBuffer.java    public void writeRecord(byte[] record) throws IOException {        if (debug) {            System.err.println("WriteRecord: recIdx = " + currRecIdx                               + " blkIdx = " + currBlkIdx);        }        if (outStream == null) {            if (inStream == null){                throw new IOException("Output buffer is closed");            }            throw new IOException("writing to an input buffer");        }        if (record.length != recordSize) {            throw new IOException("record to write has length '"                                  + record.length                                  + "' which is not the record size of '"                                  + recordSize + "'");        }        if (currRecIdx >= recsPerBlock) {            writeBlock();        }        System.arraycopy(record, 0, blockBuffer,                         (currRecIdx * recordSize),                         recordSize);        currRecIdx++;    }
apache_ant/ant/src/main/org/apache/tools/tar/TarBuffer.java    public void writeRecord(byte[] buf, int offset) throws IOException {        if (debug) {            System.err.println("WriteRecord: recIdx = " + currRecIdx                               + " blkIdx = " + currBlkIdx);        }        if (outStream == null) {            if (inStream == null){                throw new IOException("Output buffer is closed");            }            throw new IOException("writing to an input buffer");        }        if ((offset + recordSize) > buf.length) {            throw new IOException("record has length '" + buf.length                                  + "' with offset '" + offset                                  + "' which is less than the record size of '"                                  + recordSize + "'");        }        if (currRecIdx >= recsPerBlock) {            writeBlock();        }        System.arraycopy(buf, offset, blockBuffer,                         (currRecIdx * recordSize),                         recordSize);        currRecIdx++;    }
Clone class 162, 2 fragments, nominal size 11 lines, similarity 81%
apache_ant/ant/src/main/org/apache/tools/tar/TarEntry.java    public void writeEntryHeader(byte[] outbuf) {        try {            writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);        } catch (IOException ex) {            try {                writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);            } catch (IOException ex2) {                // impossible                throw new RuntimeException(ex2);            }        }    }
apache_ant/ant/src/main/org/apache/tools/tar/TarEntry.java    public void parseTarHeader(byte[] header) {        try {            parseTarHeader(header, TarUtils.DEFAULT_ENCODING);        } catch (IOException ex) {            try {                parseTarHeader(header, TarUtils.DEFAULT_ENCODING, true);            } catch (IOException ex2) {                // not really possible                throw new RuntimeException(ex2);            }        }    }
Clone class 163, 2 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/main/org/apache/tools/tar/TarUtils.java    public static String parseName(final byte[] buffer, final int offset, final int length) {        try {            return parseName(buffer, offset, length, DEFAULT_ENCODING);        } catch (final IOException ex) {            try {                return parseName(buffer, offset, length, FALLBACK_ENCODING);            } catch (final IOException ex2) {                // impossible                throw new RuntimeException(ex2);            }        }    }
apache_ant/ant/src/main/org/apache/tools/tar/TarUtils.java    public static int formatNameBytes(final String name, final byte[] buf, final int offset, final int length) {        try {            return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);        } catch (final IOException ex) {            try {                return formatNameBytes(name, buf, offset, length,                                       FALLBACK_ENCODING);            } catch (final IOException ex2) {                // impossible                throw new RuntimeException(ex2);            }        }    }
Clone class 164, 2 fragments, nominal size 23 lines, similarity 100%
apache_ant/ant/src/main/org/apache/tools/zip/ExtraFieldUtils.java    public static byte[] mergeLocalFileDataData(ZipExtraField[] data) {        final boolean lastIsUnparseableHolder = data.length > 0            && data[data.length - 1] instanceof UnparseableExtraFieldData;        int regularExtraFieldCount =            lastIsUnparseableHolder ? data.length - 1 : data.length;        int sum = WORD * regularExtraFieldCount;        for (ZipExtraField element : data) {            sum += element.getLocalFileDataLength().getValue();        }        byte[] result = new byte[sum];        int start = 0;        for (int i = 0; i < regularExtraFieldCount; i++) {            System.arraycopy(data[i].getHeaderId().getBytes(),                             0, result, start, 2);            System.arraycopy(data[i].getLocalFileDataLength().getBytes(),                             0, result, start + 2, 2);            byte[] local = data[i].getLocalFileDataData();            System.arraycopy(local, 0, result, start + WORD, local.length);            start += (local.length + WORD);        }        if (lastIsUnparseableHolder) {            byte[] local = data[data.length - 1].getLocalFileDataData();            System.arraycopy(local, 0, result, start, local.length);        }        return result;    }
apache_ant/ant/src/main/org/apache/tools/zip/ExtraFieldUtils.java    public static byte[] mergeCentralDirectoryData(ZipExtraField[] data) {        final boolean lastIsUnparseableHolder = data.length > 0            && data[data.length - 1] instanceof UnparseableExtraFieldData;        int regularExtraFieldCount =            lastIsUnparseableHolder ? data.length - 1 : data.length;        int sum = WORD * regularExtraFieldCount;        for (ZipExtraField element : data) {            sum += element.getCentralDirectoryLength().getValue();        }        byte[] result = new byte[sum];        int start = 0;        for (int i = 0; i < regularExtraFieldCount; i++) {            System.arraycopy(data[i].getHeaderId().getBytes(),                             0, result, start, 2);            System.arraycopy(data[i].getCentralDirectoryLength().getBytes(),                             0, result, start + 2, 2);            byte[] local = data[i].getCentralDirectoryData();            System.arraycopy(local, 0, result, start + WORD, local.length);            start += (local.length + WORD);        }        if (lastIsUnparseableHolder) {            byte[] local = data[data.length - 1].getCentralDirectoryData();            System.arraycopy(local, 0, result, start, local.length);        }        return result;    }
Clone class 165, 2 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/AntClassLoaderTest.java    public void testJarWithManifestInDirWithSpace() {        String mainjarstring = buildRule.getProject().getProperty("main.jar");        String extjarstring = buildRule.getProject().getProperty("ext.jar");        Path myPath = new Path(buildRule.getProject());        myPath.setLocation(new File(mainjarstring));        buildRule.getProject().setUserProperty("build.sysclasspath","ignore");        loader = buildRule.getProject().createClassLoader(myPath);        String path = loader.getClasspath();        assertEquals(mainjarstring + File.pathSeparator + extjarstring, path);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/AntClassLoaderTest.java    public void testJarWithManifestInNonAsciiDir() {        String mainjarstring = buildRule.getProject().getProperty("main.jar.nonascii");        String extjarstring = buildRule.getProject().getProperty("ext.jar.nonascii");        Path myPath = new Path(buildRule.getProject());        myPath.setLocation(new File(mainjarstring));        buildRule.getProject().setUserProperty("build.sysclasspath","ignore");        loader = buildRule.getProject().createClassLoader(myPath);        String path = loader.getClasspath();        assertEquals(mainjarstring + File.pathSeparator + extjarstring, path);    }
Clone class 166, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/BuildFileRule.java    private String cleanBuffer(StringBuffer buffer) {        StringBuilder cleanedBuffer = new StringBuilder();        for (int i = 0; i < buffer.length(); i++) {            char ch = buffer.charAt(i);            if (ch != '\r') {                cleanedBuffer.append(ch);            }        }        return cleanedBuffer.toString();    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/BuildFileTest.java    private String cleanBuffer(StringBuffer buffer) {        StringBuffer cleanedBuffer = new StringBuffer();        for (int i = 0; i < buffer.length(); i++) {            char ch = buffer.charAt(i);            if (ch != '\r') {                cleanedBuffer.append(ch);            }        }        return cleanedBuffer.toString();    }
Clone class 167, 2 fragments, nominal size 12 lines, similarity 91%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/BuildFileRule.java    public void configureProject(String filename, int logLevel) throws BuildException {        logBuffer = new StringBuffer();        fullLogBuffer = new StringBuffer();        project = new Project();        project.init();        File antFile = new File(System.getProperty("root"), filename);        project.setProperty("ant.processid", ProcessUtil.getProcessId("<Process>"));        project.setProperty("ant.threadname", Thread.currentThread().getName());        project.setUserProperty("ant.file" , antFile.getAbsolutePath());        project.addBuildListener(new AntTestListener(logLevel));        ProjectHelper.configureProject(project, antFile);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/BuildFileTest.java    public void configureProject(String filename, int logLevel)        throws BuildException {        logBuffer = new StringBuffer();        fullLogBuffer = new StringBuffer();        project = new Project();        project.init();        File antFile = new File(System.getProperty("root"), filename);        project.setUserProperty("ant.file" , antFile.getAbsolutePath());        // set two new properties to allow to build unique names when running multithreaded tests        project.setProperty("ant.processid", ProcessUtil.getProcessId("<Process>"));        project.setProperty("ant.threadname", Thread.currentThread().getName());        project.addBuildListener(new AntTestListener(logLevel));        ProjectHelper.configureProject(project, antFile);    }
Clone class 168, 2 fragments, nominal size 12 lines, similarity 83%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/BuildFileTest.java    public void expectSpecificBuildException(String target, String cause, String msg) {        try {            executeTarget(target);        } catch (org.apache.tools.ant.BuildException ex) {            buildException = ex;            if ((null != msg) && (!ex.getMessage().equals(msg))) {                fail("Should throw BuildException because '" + cause                        + "' with message '" + msg                        + "' (actual message '" + ex.getMessage() + "' instead)");            }            return;        }        fail("Should throw BuildException because: " + cause);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/BuildFileTest.java    public void expectBuildExceptionContaining(String target, String cause, String contains) {        try {            executeTarget(target);        } catch (org.apache.tools.ant.BuildException ex) {            buildException = ex;            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {                fail("Should throw BuildException because '" + cause + "' with message containing '" + contains + "' (actual message '" + ex.getMessage() + "' instead)");            }            return;        }        fail("Should throw BuildException because: " + cause);    }
Clone class 169, 2 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/IncludeTest.java    public void testTaskErrorInIncluding() {        buildRule.configureProject("src/etc/testcases/core/include/including_file_task_error/build.xml");        try {            buildRule.executeTarget("test");            fail("should have cause a build failure");        } catch (BuildException e) {            assertTrue(e.getMessage()                       + " should start with \'Warning: Could not find",                         e.getMessage().startsWith("Warning: Could not find file "));            assertTrue(e.getLocation().toString()                       + " should end with build.xml:14: ",                       e.getLocation().toString().endsWith("build.xml:14: "));        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/IncludeTest.java    public void testTaskErrorInIncluded() {        buildRule.configureProject("src/etc/testcases/core/include/included_file_task_error/build.xml");        try {            buildRule.executeTarget("test");            fail("should have cause a build failure");        } catch (BuildException e) {            assertTrue(e.getMessage()                       + " should start with \'Warning: Could not find",                         e.getMessage().startsWith("Warning: Could not find file "));            assertTrue(e.getLocation().toString()                       + " should end with included_file.xml:2: ",                       e.getLocation().toString().endsWith("included_file.xml:2: "));        }    }
Clone class 170, 2 fragments, nominal size 13 lines, similarity 76%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/IntrospectionHelperTest.java    public void testGetNestedElements() {        Map elemMap = getExpectedNestedElements();        Enumeration e = ih.getNestedElements();        while (e.hasMoreElements()) {            String name = (String) e.nextElement();            Class expect = (Class) elemMap.get(name);            assertNotNull("Support for "+name+" in IntrospectioNHelperTest?",                          expect);            assertEquals("Return type of "+name, expect, ih.getElementType(name));            elemMap.remove(name);        }        assertTrue("Found all", elemMap.isEmpty());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/IntrospectionHelperTest.java    public void testGetAttributes() {        Map attrMap = getExpectedAttributes();        Enumeration e = ih.getAttributes();        while (e.hasMoreElements()) {            String name = (String) e.nextElement();            Class expect = (Class) attrMap.get(name);            assertNotNull("Support for "+name+" in IntrospectionHelperTest?",                          expect);            assertEquals("Type of "+name, expect, ih.getAttributeType(name));            attrMap.remove(name);        }        attrMap.remove("name");        assertTrue("Found all", attrMap.isEmpty());    }
Clone class 171, 2 fragments, nominal size 19 lines, similarity 94%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/IntrospectionHelperTest.java    public void testGetNestedElementMap() {        Map elemMap = getExpectedNestedElements();        Map actualMap = ih.getNestedElementMap();        for (Iterator i = actualMap.entrySet().iterator(); i.hasNext();) {            Map.Entry entry = (Map.Entry) i.next();            String elemName = (String) entry.getKey();            Class elemClass = (Class) elemMap.get(elemName);            assertNotNull("Support for " + elemName +                          " in IntrospectionHelperTest?", elemClass);            assertEquals("Type of " + elemName, elemClass, entry.getValue());            elemMap.remove(elemName);        }        assertTrue("Found all", elemMap.isEmpty());        // Check it's a read-only map.        try {            actualMap.clear();            //TODO we should be asserting a value somewhere in here        } catch (UnsupportedOperationException e) {}    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/IntrospectionHelperTest.java    public void testGetAttributeMap() {        Map attrMap = getExpectedAttributes();        Map actualMap = ih.getAttributeMap();        for (Iterator i = actualMap.entrySet().iterator(); i.hasNext();) {            Map.Entry entry = (Map.Entry) i.next();            String attrName = (String) entry.getKey();            Class attrClass = (Class) attrMap.get(attrName);            assertNotNull("Support for " + attrName +                          " in IntrospectionHelperTest?", attrClass);            assertEquals("Type of " + attrName, attrClass, entry.getValue());            attrMap.remove(attrName);        }        attrMap.remove("name");        assertTrue("Found all", attrMap.isEmpty());        // Check it's a read-only map.        try {            actualMap.clear();            //TODO we should be asserting a value somewhere in here        } catch (UnsupportedOperationException e) {}    }
Clone class 172, 2 fragments, nominal size 11 lines, similarity 90%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/ProjectTest.java    private void assertEqualsIgnoreDriveCase(String s1, String s2) {        if ((Os.isFamily("dos") || Os.isFamily("netware"))            && s1.length() >= 1 && s2.length() >= 1) {            StringBuffer sb1 = new StringBuffer(s1);            StringBuffer sb2 = new StringBuffer(s2);            sb1.setCharAt(0, Character.toUpperCase(s1.charAt(0)));            sb2.setCharAt(0, Character.toUpperCase(s2.charAt(0)));            assertEquals(sb1.toString(), sb2.toString());        } else {            assertEquals(s1, s2);        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/FileUtilsTest.java    private void assertEqualsIgnoreDriveCase(String s1, String s2) {        if ((Os.isFamily("dos") || Os.isFamily("netware"))            && s1.length() > 0 && s2.length() > 0) {            StringBuilder sb1 = new StringBuilder(s1);            StringBuilder sb2 = new StringBuilder(s2);            sb1.setCharAt(0, Character.toUpperCase(s1.charAt(0)));            sb2.setCharAt(0, Character.toUpperCase(s2.charAt(0)));            assertEquals(sb1.toString(), sb2.toString());        } else {            assertEquals(s1, s2);        }    }
Clone class 173, 3 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/AntTest.java    protected void testBaseDirs(String target, String[] dirs) {        BasedirChecker bc = new BasedirChecker(dirs);        buildRule.getProject().addBuildListener(bc);        buildRule.executeTarget(target);        AssertionFailedError ae = bc.getError();        if (ae != null) {            throw ae;        }        buildRule.getProject().removeBuildListener(bc);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/SubAntTest.java    protected void testBaseDirs(String target, String[] dirs) {        SubAntTest.BasedirChecker bc = new SubAntTest.BasedirChecker(dirs);        buildRule.getProject().addBuildListener(bc);        buildRule.executeTarget(target);        AssertionFailedError ae = bc.getError();        if (ae != null) {            throw ae;        }        buildRule.getProject().removeBuildListener(bc);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/AntTest.java    protected void testReference(String target, String[] keys,                                 boolean[] expect, Object value) {        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);        buildRule.getProject().addBuildListener(rc);        buildRule.executeTarget(target);        AssertionFailedError ae = rc.getError();        if (ae != null) {            throw ae;        }        buildRule.getProject().removeBuildListener(rc);    }
Clone class 174, 3 fragments, nominal size 13 lines, similarity 73%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/AntTest.java        public void targetStarted(BuildEvent event) {            if (event.getTarget().getName().equals("")) {                return;            }            if (error == null) {                try {                    assertEquals(expectedBasedirs[calls++],                                 event.getProject().getBaseDir().getAbsolutePath());                } catch (AssertionFailedError e) {                    error = e;                }            }        }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/AntTest.java        public void targetStarted(BuildEvent event) {            if (event.getTarget().getName().equals("")) {                return;            }            if (calls >= expectedValues.length) {                error = new AssertionFailedError("Unexpected invocation of"                                                 + " target "                                                 + event.getTarget().getName());            }            if (error == null) {                try {                    assertEquals(expectedValues[calls++],                                 event.getProject().getProperty(key));                } catch (AssertionFailedError e) {                    error = e;                }            }        }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/SubAntTest.java        public void targetStarted(BuildEvent event) {            if (event.getTarget().getName().equals("")) {                return;            }            if (error == null) {                try {                    assertEquals(expectedBasedirs[calls++],                            event.getProject().getBaseDir().getAbsolutePath());                } catch (AssertionFailedError e) {                    error = e;                }            }        }
Clone class 175, 2 fragments, nominal size 52 lines, similarity 74%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapterTest.java    public void testSingleModuleCompilation() throws IOException {        final File workDir = createWorkDir("testSMC");        try {            final File src = new File(workDir, "src");            src.mkdir();            final File java1 = createFile(src,"org/apache/ant/tests/J1.java");            final File java2 = createFile(src,"org/apache/ant/tests/J2.java");            final File modules = new File(workDir, "modules");            modules.mkdir();            final Project prj = new Project();            prj.setBaseDir(workDir);            final LogCapturingJavac javac = new LogCapturingJavac();            javac.setProject(prj);            final Commandline[] cmd = new Commandline[1];            final DefaultCompilerAdapter impl = new DefaultCompilerAdapter() {                @Override                public boolean execute() throws BuildException {                    cmd[0] = setupModernJavacCommand();                    return true;                }            };            final Path srcPath = new Path(prj);            srcPath.setLocation(src);            javac.setSrcdir(srcPath);            javac.createModulepath().setLocation(modules);            javac.setSource("9");            javac.setTarget("9");            javac.setIncludeantruntime(false);            javac.add(impl);            javac.execute();            Assert.assertNotNull(cmd[0]);            final List<String> cmdLine = Arrays.asList(cmd[0].getCommandline());            //No modulesourcepath            assertEquals(-1, cmdLine.indexOf("--module-source-path"));            //The -sourcepath has to be followed by src            int index = cmdLine.indexOf("-sourcepath");            Assert.assertTrue(index != -1 && index < cmdLine.size() - 1);            assertEquals(src.getAbsolutePath(), cmdLine.get(index + 1));            //The --module-path has to be followed by modules            index = cmdLine.indexOf("--module-path");            Assert.assertTrue(index != -1 && index < cmdLine.size() - 1);            assertEquals(modules.getAbsolutePath(), cmdLine.get(index + 1));            //J1.java & J2.java has to be in files list            final Set<String> expected = new TreeSet<String>();            Collections.addAll(expected, java1.getAbsolutePath(), java2.getAbsolutePath());            final Set<String> actual = new TreeSet<String>();            actual.addAll(cmdLine.subList(cmdLine.size() - 2, cmdLine.size()));            assertEquals(expected, actual);        } finally {            delete(workDir);        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapterTest.java    public void testMultiModuleCompilation() throws IOException {        final File workDir = createWorkDir("testMMC");        try {            final File src = new File(workDir, "src");            src.mkdir();            final File java1 = createFile(src,"main/m1/lin64/classes/org/apache/ant/tests/J1.java");            final File java2 = createFile(src,"main/m2/lin32/classes/org/apache/ant/tests/J2.java");            final File java3 = createFile(src,"main/m3/sol/classes/org/apache/ant/tests/J3.java");            final File modules = new File(workDir, "modules");            modules.mkdir();            final File build = new File(workDir, "build");            build.mkdirs();            final Project prj = new Project();            prj.setBaseDir(workDir);            final LogCapturingJavac javac = new LogCapturingJavac();            javac.setProject(prj);            final Commandline[] cmd = new Commandline[1];            final DefaultCompilerAdapter impl = new DefaultCompilerAdapter() {                @Override                public boolean execute() throws BuildException {                    cmd[0] = setupModernJavacCommand();                    return true;                }            };            final String moduleSrcPathStr = "src/main/*/{lin{32,64},sol}/classes";            final Path moduleSourcePath = new Path(prj);            moduleSourcePath.setPath(moduleSrcPathStr);            javac.setModulesourcepath(moduleSourcePath);            javac.createModulepath().setLocation(modules);            javac.setSource("9");            javac.setTarget("9");            javac.setDestdir(build);            javac.setIncludeantruntime(false);            javac.add(impl);            javac.execute();            Assert.assertNotNull(cmd[0]);            final List<String> cmdLine = Arrays.asList(cmd[0].getCommandline());            //No sourcepath            assertEquals(-1, cmdLine.indexOf("-sourcepath"));            //The --module-source-path has to be followed by the pattern            int index = cmdLine.indexOf("--module-source-path");            Assert.assertTrue(index != -1 && index < cmdLine.size() - 1);            String expectedModSrcPath = String.format("%s/%s",                    workDir.getAbsolutePath(),                    moduleSrcPathStr)                    .replace('/', File.separatorChar)                    .replace('\\', File.separatorChar);            assertEquals(expectedModSrcPath, cmdLine.get(index + 1));            //The --module-path has to be followed by modules            index = cmdLine.indexOf("--module-path");            Assert.assertTrue(index != -1 && index < cmdLine.size() - 1);            assertEquals(modules.getAbsolutePath(), cmdLine.get(index + 1));            //J1.java, J2.java & J3.java has to be in files list            final Set<String> expectedFiles = new TreeSet<String>();            Collections.addAll(expectedFiles,                    java1.getAbsolutePath(),                    java2.getAbsolutePath(),                    java3.getAbsolutePath());            final Set<String> actualFiles = new TreeSet<String>();            actualFiles.addAll(cmdLine.subList(cmdLine.size() - 3, cmdLine.size()));            assertEquals(expectedFiles, actualFiles);        } finally {            delete(workDir);        }    }
Clone class 176, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapterTest.java    private void delete(File f) {        if (f.isDirectory()) {            final File[] clds = f.listFiles();            if (clds != null) {                for (File cld : clds) {                    delete(cld);                }            }        }        f.delete();    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java    private void delete(File f) {        if (f.isDirectory()) {            final File[] clds = f.listFiles();            if (clds != null) {                for (File cld : clds) {                    delete(cld);                }            }        }        f.delete();    }
Clone class 177, 2 fragments, nominal size 14 lines, similarity 92%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/cvslib/ChangeLogParserTest.java    public void testOldCvsFormat() throws Exception {        parser.stdout("Working file: build.xml");        parser.stdout("revision 1.475");        parser.stdout("date: 2004/06/05 16:10:32;  author: somebody;  state: Exp;  lines: +2 -2");        parser.stdout("I have done something. I swear.");        parser.stdout("=============================================================================");        CVSEntry[] entries = parser.getEntrySetAsArray();        assertEquals("somebody", entries[0].getAuthor());        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"), Locale.US);        cal.set(Calendar.MILLISECOND, 0);        cal.set(2004, Calendar.JUNE, 5, 16, 10, 32);        Date date = cal.getTime();        assertEquals(date, entries[0].getDate());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/cvslib/ChangeLogParserTest.java    public void testCvs112Format() throws Exception {        parser.stdout("Working file: build.xml");        parser.stdout("revision 1.475");        parser.stdout("date: 2004-06-05 16:10:32 +0000; author: somebody; state: Exp;  lines: +2 -2");        parser.stdout("I have done something. I swear.");        parser.stdout("=============================================================================");        CVSEntry[] entries = parser.getEntrySetAsArray();        assertEquals("somebody", entries[0].getAuthor());        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"), Locale.US);        cal.set(Calendar.MILLISECOND, 0);        cal.set(2004, Calendar.JUNE, 5, 16, 10, 32);        Date date = cal.getTime();        assertEquals(date, entries[0].getDate());    }
Clone class 178, 3 fragments, nominal size 10 lines, similarity 90%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ExecuteJavaTest.java    public void testTimeOut() throws Exception {        Commandline cmd = getCommandline(TIME_OUT*2);        ej.setJavaCommand(cmd);        long now = System.currentTimeMillis();        ej.execute(project);        long elapsed = System.currentTimeMillis() - now;        assertTrue("process should have been killed", ej.killedProcess());        assertTrue("elapse time of "+elapsed                   +" ms is less than timeout value of "+TIME_OUT_TEST+" ms",                   elapsed >= TIME_OUT_TEST);        assertTrue("elapse time of "+elapsed                   +" ms is greater than run value of "+(TIME_OUT*2)+" ms",                   elapsed < TIME_OUT*2);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ExecuteWatchdogTest.java    public void testTimeOut() throws Exception {        Process process = getProcess(TIME_OUT*2);        long now = System.currentTimeMillis();        watchdog.start(process);        int retCode = process.waitFor();        long elapsed = System.currentTimeMillis() - now;        assertTrue("process should have been killed", watchdog.killedProcess());                //      assertTrue("return code is invalid: " + retCode, retCode!=0);        assertTrue("elapse time of "+elapsed+" ms is less than timeout value of "+TIME_OUT_TEST+" ms", elapsed >= TIME_OUT_TEST);        assertTrue("elapse time of "+elapsed+" ms is greater than run value of "+(TIME_OUT*2)+" ms", elapsed < TIME_OUT*2);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ExecuteJavaTest.java    public void testTimeOutForked() throws Exception {        Commandline cmd = getCommandline(TIME_OUT*2);        ej.setJavaCommand(cmd);        long now = System.currentTimeMillis();        ej.fork(cp);        long elapsed = System.currentTimeMillis() - now;        assertTrue("process should have been killed", ej.killedProcess());        assertTrue("elapse time of "+elapsed                   +" ms is less than timeout value of "+TIME_OUT_TEST+" ms",                   elapsed >= TIME_OUT_TEST);        assertTrue("elapse time of "+elapsed                   +" ms is greater than run value of "+(TIME_OUT*2)+" ms",                   elapsed < TIME_OUT*2);    }
Clone class 179, 2 fragments, nominal size 15 lines, similarity 80%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/FailTest.java    public void testNested4() {        String specificMessage = "Nested conditions "          + "not permitted in conjunction with if/unless attributes";        char[] c = {'a', 'b', 'c'};        StringBuffer target = new StringBuffer("testNested4x");        for (int i = 0; i < c.length; i++) {            target.setCharAt(target.length() - 1, c[i]);            try {                buildRule.executeTarget(target.toString());                fail("it is required to fail :-)") ;            } catch (BuildException ex) {                assertEquals(specificMessage, ex.getMessage());            }        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/FailTest.java    public void testNested7() {        String specificMessage = "A single nested condition is required.";        char[] c = {'a', 'b'};        StringBuffer target = new StringBuffer("testNested7x");        for (int i = 0; i < c.length; i++) {            target.setCharAt(target.length() - 1, c[i]);            try {                buildRule.executeTarget(target.toString());                fail("it is required to fail :-)") ;            } catch (BuildException ex) {                assertEquals(specificMessage, ex.getMessage());            }        }    }
Clone class 180, 2 fragments, nominal size 24 lines, similarity 100%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/FixCrLfTest.java    public void assertEqualContent(File expect, File result)        throws AssertionFailedError, IOException {        if (!result.exists()) {            fail("Expected file "+result+" doesn\'t exist");        }        InputStream inExpect = null;        InputStream inResult = null;        try {            inExpect = new BufferedInputStream(new FileInputStream(expect));            inResult = new BufferedInputStream(new FileInputStream(result));            int expectedByte = inExpect.read();            while (expectedByte != -1) {                assertEquals(expectedByte, inResult.read());                expectedByte = inExpect.read();            }            assertEquals("End of file", -1, inResult.read());        } finally {            if (inResult != null) {                inResult.close();            }            if (inExpect != null) {                inExpect.close();            }        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ReplaceTest.java    public void assertEqualContent(File expect, File result)        throws AssertionFailedError, IOException {        if (!result.exists()) {            fail("Expected file "+result+" doesn\'t exist");        }        InputStream inExpect = null;        InputStream inResult = null;        try {            inExpect = new BufferedInputStream(new FileInputStream(expect));            inResult = new BufferedInputStream(new FileInputStream(result));            int expectedByte = inExpect.read();            while (expectedByte != -1) {                assertEquals(expectedByte, inResult.read());                expectedByte = inExpect.read();            }            assertEquals("End of file", -1, inResult.read());        } finally {            if (inResult != null) {                inResult.close();            }            if (inExpect != null) {                inExpect.close();            }        }    }
Clone class 181, 2 fragments, nominal size 17 lines, similarity 77%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java    public void testModuleCommandLine() {        final String moduleName = "TestModule"; //NOI18N        final String arg = "appArg";    //NOI18N        final Java java = new Java();        java.setFork(true);        java.setModule(moduleName);        java.setJvmargs("-Xmx128M");        java.setArgs(arg);        final String[] cmdLine = java.getCommandLine().getCommandline();        Assert.assertNotNull("Has command line.", cmdLine);        assertEquals("Command line should have 5 elements", 5, cmdLine.length);        assertEquals("Last command line element should be java argument: " + arg,                arg,                cmdLine[cmdLine.length-1]);        assertEquals("The command line element at index 3 should be module name: " + moduleName,                moduleName,                cmdLine[cmdLine.length-2]);        assertEquals("The command line element at index 2 should be -m",                "-m",                cmdLine[cmdLine.length-3]);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/JavaTest.java    public void testModuleAndClassnameCommandLine() {        final String moduleName = "TestModule"; //NOI18N        final String className = "org.apache.Test"; //NOI18N        final String moduleClassPair= String.format("%s/%s", moduleName, className);        final String arg = "appArg";    //NOI18N        final Java java = new Java();        java.setFork(true);        java.setModule(moduleName);        java.setClassname(className);        java.setJvmargs("-Xmx128M");    //NOI18N        java.setArgs(arg);        final String[] cmdLine = java.getCommandLine().getCommandline();        Assert.assertNotNull("Has command line.", cmdLine);        assertEquals("Command line should have 5 elements", 5, cmdLine.length);        assertEquals("Last command line element should be java argument: " + arg,                arg,                cmdLine[cmdLine.length-1]);        assertEquals("The command line element at index 3 should be module class pair: " + moduleClassPair,                moduleClassPair,                cmdLine[cmdLine.length-2]);        assertEquals("The command line element at index 2 should be -m",                "-m",                cmdLine[cmdLine.length-3]);    }
Clone class 182, 2 fragments, nominal size 17 lines, similarity 70%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java    public void testOrder1() throws IOException, ManifestException {        buildRule.executeTarget("testOrder1");        Manifest manifest = getManifest(expandedManifest);        Enumeration e = manifest.getSectionNames();        String section1 = (String)e.nextElement();        String section2 = (String)e.nextElement();        assertEquals("First section name unexpected", "Test1", section1);        assertEquals("Second section name unexpected", "Test2", section2);        Manifest.Section section = manifest.getSection("Test1");        e = section.getAttributeKeys();        String attr1Key = (String)e.nextElement();        String attr2Key = (String)e.nextElement();        String attr1 = section.getAttribute(attr1Key).getName();        String attr2 = section.getAttribute(attr2Key).getName();        assertEquals("First attribute name unexpected", "TestAttr1", attr1);        assertEquals("Second attribute name unexpected", "TestAttr2", attr2);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java    public void testOrder2() throws IOException, ManifestException {        buildRule.executeTarget("testOrder2");        Manifest manifest = getManifest(expandedManifest);        Enumeration e = manifest.getSectionNames();        String section1 = (String)e.nextElement();        String section2 = (String)e.nextElement();        assertEquals("First section name unexpected", "Test2", section1);        assertEquals("Second section name unexpected", "Test1", section2);        Manifest.Section section = manifest.getSection("Test1");        e = section.getAttributeKeys();        String attr1Key = (String)e.nextElement();        String attr2Key = (String)e.nextElement();        String attr1 = section.getAttribute(attr1Key).getName();        String attr2 = section.getAttribute(attr2Key).getName();        assertEquals("First attribute name unexpected", "TestAttr2", attr1);        assertEquals("Second attribute name unexpected", "TestAttr1", attr2);    }
Clone class 183, 2 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/depend/DependTest.java    public void testDirect() {        buildRule.executeTarget("src1setup");        buildRule.executeTarget("compile");        FileUtilities.rollbackTimetamps(new File(buildRule.getProject().getProperty("tempsrc.dir")), 5);        FileUtilities.rollbackTimetamps(new File(buildRule.getProject().getProperty("classes.dir")), 5);        buildRule.executeTarget("testdirect");        Hashtable files = getResultFiles();        assertEquals("Depend did not leave correct number of files", 3,            files.size());        assertTrue("Result did not contain A.class",            files.containsKey("A.class"));        assertTrue("Result did not contain D.class",            files.containsKey("D.class"));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/depend/DependTest.java    public void testClosure() {        buildRule.executeTarget("src1setup");        buildRule.executeTarget("compile");        FileUtilities.rollbackTimetamps(new File(buildRule.getProject().getProperty("tempsrc.dir")), 5);        FileUtilities.rollbackTimetamps(new File(buildRule.getProject().getProperty("classes.dir")), 5);        buildRule.executeTarget("testclosure");        Hashtable files = getResultFiles();        assertTrue("Depend did not leave correct number of files",             files.size() <= 2);        assertTrue("Result did not contain D.class",            files.containsKey("D.class"));    }
Clone class 184, 2 fragments, nominal size 25 lines, similarity 92%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/i18n/TranslateTest.java    private boolean compareFiles(File file1, File file2) throws IOException {        if (!file1.exists() || !file2.exists()) {            return false;        }        if (file1.length() != file2.length()) {            return false;        }        // byte - byte compare        byte[] buffer1 = new byte[BUF_SIZE];        byte[] buffer2 = new byte[BUF_SIZE];        FileInputStream fis1 = new FileInputStream(file1);        FileInputStream fis2 = new FileInputStream(file2);        int index = 0;        int read = 0;        while ((read = fis1.read(buffer1)) != -1) {            fis2.read(buffer2);            for (int i = 0; i < read; ++i, ++index) {                if (buffer1[i] != buffer2[i]) {                    return false;                }            }        }        return true;    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/FilterSetTest.java    private boolean compareFiles(String name1, String name2) throws IOException {        File file1 = new File(System.getProperty("root"), name1);        File file2 = new File(System.getProperty("root"), name2);        if (!file1.exists() || !file2.exists()) {            return false;        }        if (file1.length() != file2.length()) {            return false;        }        // byte - byte compare        byte[] buffer1 = new byte[BUF_SIZE];        byte[] buffer2 = new byte[BUF_SIZE];        FileInputStream fis1 = new FileInputStream(file1);        FileInputStream fis2 = new FileInputStream(file2);        int index = 0;        int read = 0;        while ((read = fis1.read(buffer1)) != -1) {            fis2.read(buffer2);            for (int i = 0; i < read; ++i, ++index) {                if (buffer1[i] != buffer2[i]) {                    return false;                }            }        }        return true;    }
Clone class 185, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java    public void testModulePathNeedsFork() throws Exception {        final Project project = new Project();        project.init();        JUnitTask task = new JUnitTask();        task.setProject(project);        final Path p = new Path(project);        p.setPath("modules");        task.createModulepath().add(p);        task.addTest(new JUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"));        task.execute();    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java    public void testUpgradeModulePathNeedsFork() throws Exception {        final Project project = new Project();        project.init();        JUnitTask task = new JUnitTask();        task.setProject(project);        final Path p = new Path(project);        p.setPath("modules");        task.createUpgrademodulepath().add(p);        task.addTest(new JUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"));        task.execute();    }
Clone class 186, 2 fragments, nominal size 49 lines, similarity 88%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java    public void testJunitOnCpArguments() throws Exception {        final File tmp = new File(System.getProperty("java.io.tmpdir"));    //NOI18N        final File workDir = new File(tmp, String.format("%s_testJCP%d",    //NOI18N                getClass().getName(),                System.currentTimeMillis()/1000));        workDir.mkdirs();        try {            final File modulesDir = new File(workDir,"modules");    //NOI18N            modulesDir.mkdirs();            final Project project = new Project();            project.init();            project.setBaseDir(workDir);            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();            project.addReference(                    MagicNames.ANT_VM_LAUNCHER_REF_ID,                    mockProcLauncher);            JUnitTask task = new JUnitTask();            task.setDir(workDir);            task.setFork(true);            task.setProject(project);            final File junit = LoaderUtils.getResourceSource(                    JUnitTask.class.getClassLoader(),                    "junit/framework/Test.class");    //NOI18N            final Path cp = new Path(project);            cp.setPath(junit.getAbsolutePath());            task.createClasspath().add(cp);            final Path mp = new Path(project);            mp.setPath(modulesDir.getName());            task.createModulepath().add(mp);            task.addTest(new JUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"));            task.execute();            assertNotNull(mockProcLauncher.cmd);            String resCp = null;            String resMp = null;            Set<String> resExports = new TreeSet<>();            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {                if ("-classpath".equals(mockProcLauncher.cmd[i])) { //NOI18N                    resCp = mockProcLauncher.cmd[++i];                } else if ("--module-path".equals(mockProcLauncher.cmd[i])) { //NOI18N                    resMp = mockProcLauncher.cmd[++i];                } else if (mockProcLauncher.cmd[i].equals("--add-exports")) {   //NOI18N                    resExports.add(mockProcLauncher.cmd[++i]);                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {                    break;                }            }            assertTrue("No exports", resExports.isEmpty());            if (project.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null                && System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {                assertEquals("Expected classpath", cp.toString(), resCp);            }            assertEquals("Expected modulepath", mp.toString(), resMp);        } finally {            delete(workDir);        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java    public void testJunitOnMpArguments() throws Exception {        final File tmp = new File(System.getProperty("java.io.tmpdir"));    //NOI18N        final File workDir = new File(tmp, String.format("%s_testJMP%d",    //NOI18N                getClass().getName(),                System.currentTimeMillis()/1000));        workDir.mkdirs();        try {            final File modulesDir = new File(workDir,"modules");    //NOI18N            modulesDir.mkdirs();            final Project project = new Project();            project.init();            project.setBaseDir(workDir);            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();            project.addReference(                    MagicNames.ANT_VM_LAUNCHER_REF_ID,                    mockProcLauncher);            JUnitTask task = new JUnitTask();            task.setDir(workDir);            task.setFork(true);            task.setProject(project);            final File junit = LoaderUtils.getResourceSource(                    JUnitTask.class.getClassLoader(),                    "junit/framework/Test.class");    //NOI18N            final Path mp = new Path(project);            mp.add(new Path(project, junit.getAbsolutePath()));            mp.add(new Path(project, modulesDir.getName()));            task.createModulepath().add(mp);            task.addTest(new JUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"));       //NOI18N            task.execute();            assertNotNull(mockProcLauncher.cmd);            String resCp = null;            String resMp = null;            Set<String> resExports = new TreeSet<>();            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {                if ("-classpath".equals(mockProcLauncher.cmd[i])) { //NOI18N                    resCp = mockProcLauncher.cmd[++i];                } else if ("--module-path".equals(mockProcLauncher.cmd[i])) { //NOI18N                    resMp = mockProcLauncher.cmd[++i];                } else if (mockProcLauncher.cmd[i].equals("--add-exports")) {   //NOI18N                    resExports.add(mockProcLauncher.cmd[++i]);                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {                    break;                }            }            assertTrue("No exports", resExports.isEmpty());            if (project.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null                && System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {                assertNull("No classpath", resCp);            }            assertEquals("Expected modulepath", mp.toString(), resMp);        } finally {            delete(workDir);        }    }
Clone class 187, 10 fragments, nominal size 10 lines, similarity 70%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testFullPathMatchesCaseInsensitive() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setCaseSensitive(false);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {"alpha/beta/gamma/GAMMA.XML"});        ds.scan();        compareFiles(ds, new String[] {"alpha/beta/gamma/gamma.xml"},            new String[] {});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testAlternateExcludeInclude() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setExcludes(new String[] {            "alpha/**",            "alpha/beta/gamma/**"        });        ds.setIncludes(new String[] {            "alpha/beta/**"        });        ds.scan();        compareFiles(ds, new String[] {},                     new String[] {});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void test2bisButCaseInsensitive() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));	    FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);	    ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));	    ds.setIncludes(new String[] {"alpha/BETA/gamma/"});	    ds.setCaseSensitive(false);	    ds.scan();	    compareFiles(ds, new String[] {"alpha/beta/gamma/gamma.xml"},	        new String[] {"alpha/beta/gamma"});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testPatternsDifferInCaseScanningInsensitive() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {"alpha/", "ALPHA/"});        ds.setCaseSensitive(false);        ds.scan();        compareFiles(ds, new String[] {"alpha/beta/beta.xml",                                       "alpha/beta/gamma/gamma.xml"},                     new String[] {"alpha", "alpha/beta", "alpha/beta/gamma"});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void test2ButCaseInsensitive() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {"ALPHA/"});        ds.setCaseSensitive(false);        ds.scan();        compareFiles(ds, new String[] {"alpha/beta/beta.xml",                                       "alpha/beta/gamma/gamma.xml"},            new String[] {"alpha", "alpha/beta", "alpha/beta/gamma"});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testAlternateIncludeExclude() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {            "alpha/**",            "alpha/beta/gamma/**"        });        ds.setExcludes(new String[] {            "alpha/beta/**"        });        ds.scan();        compareFiles(ds, new String[] {},                     new String[] {"alpha"});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testExcludeOneFile() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {            "**/*.xml"        });        ds.setExcludes(new String[] {            "alpha/beta/b*xml"        });        ds.scan();        compareFiles(ds, new String[] {"alpha/beta/gamma/gamma.xml"},                     new String[] {});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testFullpathDiffersInCaseScanningInsensitive() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {            "alpha/beta/gamma/gamma.xml",            "alpha/beta/gamma/GAMMA.XML"        });        ds.setCaseSensitive(false);        ds.scan();        compareFiles(ds, new String[] {"alpha/beta/gamma/gamma.xml"},                     new String[] {});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testParentDiffersInCaseScanningInsensitive() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {"alpha/", "ALPHA/beta/"});        ds.setCaseSensitive(false);        ds.scan();        compareFiles(ds, new String[] {"alpha/beta/beta.xml",                                       "alpha/beta/gamma/gamma.xml"},                     new String[] {"alpha", "alpha/beta", "alpha/beta/gamma"});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testExcludeHasPrecedence() {        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {            "alpha/**"        });        ds.setExcludes(new String[] {            "alpha/**"        });        ds.scan();        compareFiles(ds, new String[] {},                     new String[] {});    }
Clone class 188, 2 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testGetFollowSymlinksTrue() {        Assume.assumeTrue("System does not support Symlinks", supportsSymlinks);        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        buildRule.getProject().executeTarget("ftp-get-directory-symbolic-link");        FileSet fsDestination = (FileSet) buildRule.getProject().getReference("fileset-destination-without-selector");        DirectoryScanner dsDestination = fsDestination.getDirectoryScanner(buildRule.getProject());        dsDestination.scan();        compareFiles(dsDestination, new String[] {"alpha/beta/gamma/gamma.xml"},            new String[] {"alpha", "alpha/beta", "alpha/beta/gamma"});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testGetFollowSymlinksFalse() {        Assume.assumeTrue("System does not support Symlinks", supportsSymlinks);        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        buildRule.getProject().executeTarget("ftp-get-directory-no-symbolic-link");        FileSet fsDestination = (FileSet) buildRule.getProject().getReference("fileset-destination-without-selector");        DirectoryScanner dsDestination = fsDestination.getDirectoryScanner(buildRule.getProject());        dsDestination.scan();        compareFiles(dsDestination, new String[] {},            new String[] {});    }
Clone class 189, 3 fragments, nominal size 12 lines, similarity 83%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testAllowSymlinks() {        Assume.assumeTrue("System does not support Symlinks", supportsSymlinks);        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        buildRule.getProject().executeTarget("symlink-setup");        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {"alpha/beta/gamma/"});        ds.setFollowSymlinks(true);        ds.scan();        compareFiles(ds, new String[] {"alpha/beta/gamma/gamma.xml"},                     new String[] {"alpha/beta/gamma"});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testFileSymlink() {        Assume.assumeTrue("System does not support Symlinks", supportsSymlinks);        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        buildRule.getProject().executeTarget("symlink-file-setup");        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {"alpha/beta/gamma/"});        ds.setFollowSymlinks(true);        ds.scan();        compareFiles(ds, new String[] {"alpha/beta/gamma/gamma.xml"},                     new String[] {"alpha/beta/gamma"});    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    public void testProhibitSymlinks() {        Assume.assumeTrue("System does not support Symlinks", supportsSymlinks);        Assume.assumeTrue(loginFailureMessage, loginSuceeded);        Assume.assumeTrue("Could not change remote directory", changeRemoteDir(remoteTmpDir));        buildRule.getProject().executeTarget("symlink-setup");        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);        ds.setBasedir(new File(buildRule.getProject().getBaseDir(), "tmp"));        ds.setIncludes(new String[] {"alpha/beta/gamma/"});        ds.setFollowSymlinks(false);        ds.scan();        compareFiles(ds, new String[] {}, new String[] {});    }
Clone class 190, 2 fragments, nominal size 14 lines, similarity 92%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    private void performConfigTest(String target, int[] expectedCounts) {        String[] messages = new String[]{                "custom configuration",                "custom config: system key = default (UNIX)",                "custom config: system key = UNIX",                "custom config: server time zone ID = " + buildRule.getProject().getProperty("ftp.server.timezone"),                "custom config: system key = WINDOWS",                "custom config: default date format = yyyy/MM/dd HH:mm",                "custom config: server language code = de"         };        LogCounter counter = new LogCounter();        for (int i=0; i < messages.length; i++) {            counter.addLogMessageToSearch(messages[i]);        }                    buildRule.getProject().addBuildListener(counter);        buildRule.getProject().executeTarget(target);        for (int i=0; i < messages.length; i++) {            assertEquals("target "+target+":message "+ i, expectedCounts[i], counter.getMatchCount(messages[i]));        }            }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java    private void performCommandTest(String target, int[] expectedCounts) {        String[] messages = new String[]{                "Doing Site Command: umask 222",                "Failed to issue Site Command: umask 222",        };        LogCounter counter = new LogCounter();        for (int i=0; i < messages.length; i++) {            counter.addLogMessageToSearch(messages[i]);        }                    buildRule.getProject().addBuildListener(counter);        buildRule.getProject().executeTarget(target);        for (int i=0; i < messages.length; i++) {            assertEquals("target "+target+":message "+ i, expectedCounts[i], counter.getMatchCount(messages[i]));        }    }
Clone class 191, 8 fragments, nominal size 18 lines, similarity 73%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java    public void testGetFileFlags() {        String[] sTestCmdLine = {"soscmd", "-command", "GetFile", "-file",                SRC_FILE, "-revision", "007", "-server", SOS_SERVER_PATH, "-name",                SOS_USERNAME, "-password", SOS_PASSWORD, "-database", VSS_SERVER_PATH,                "-project", DS_VSS_PROJECT_PATH, "-verbose", "-nocompress",                "-nocache", "-workdir", project.getBaseDir().getAbsolutePath()                 + File.separator + LOCAL_PATH};        // Set up a SOSGet task        SOSGet sosGet = new SOSGet();        sosGet.setProject(project);        sosGet.setVssServerPath(VSS_SERVER_PATH);        sosGet.setSosServerPath(SOS_SERVER_PATH);        sosGet.setProjectPath(VSS_PROJECT_PATH);        sosGet.setFile(SRC_FILE);        sosGet.setUsername(SOS_USERNAME);        sosGet.setPassword(SOS_PASSWORD);        sosGet.setVersion(VERSION);        sosGet.setLocalPath(new Path(project, LOCAL_PATH));        sosGet.setNoCache(true);        sosGet.setNoCompress(true);        sosGet.setVerbose(true);        sosGet.setRecursive(true);        commandline = sosGet.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java    public void testGetProjectFlags() {        String[] sTestCmdLine = {"soscmd", "-command", "GetProject", "-recursive",                "-label", SRC_LABEL, "-server", SOS_SERVER_PATH, "-name", SOS_USERNAME,                "-password", "", "-database", VSS_SERVER_PATH, "-project",                DS_VSS_PROJECT_PATH, "", "", "-soshome", SOS_HOME, "-workdir",                project.getBaseDir().getAbsolutePath()};        // Set up a SOSGet task        SOSGet sosGet = new SOSGet();        sosGet.setProject(project);        sosGet.setVssServerPath(VSS_SERVER_PATH);        sosGet.setSosServerPath(SOS_SERVER_PATH);        sosGet.setProjectPath(DS_VSS_PROJECT_PATH);        sosGet.setLabel(SRC_LABEL);        sosGet.setUsername(SOS_USERNAME);        sosGet.setSosHome(SOS_HOME);        sosGet.setNoCache(true);        sosGet.setNoCompress(false);        sosGet.setVerbose(false);        sosGet.setRecursive(true);        commandline = sosGet.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java    public void testLabelFlags() {        String[] sTestCmdLine = {"soscmd", "-command", "AddLabel", "-server",                SOS_SERVER_PATH, "-name", SOS_USERNAME, "-password", "", "-database",                VSS_SERVER_PATH, "-project", DS_VSS_PROJECT_PATH, "-label",                SRC_LABEL, "-verbose", "-log", SRC_COMMENT};        // Set up a sosCheckout task        SOSLabel sosLabel = new SOSLabel();        sosLabel.setVssServerPath(VSS_SERVER_PATH);        sosLabel.setSosServerPath(SOS_SERVER_PATH);        sosLabel.setProjectPath(DS_VSS_PROJECT_PATH);        sosLabel.setUsername(SOS_USERNAME);        sosLabel.setSosHome(SOS_HOME);        sosLabel.setComment(SRC_COMMENT);        sosLabel.setLabel(SRC_LABEL);        sosLabel.setNoCache(true);        sosLabel.setNoCompress(false);        sosLabel.setVerbose(true);        commandline = sosLabel.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java    public void testCheckoutFileFlags() {        String[] sTestCmdLine = {"soscmd", "-command", "CheckOutFile", "-file",                SRC_FILE, "-server", SOS_SERVER_PATH, "-name", SOS_USERNAME,                "-password", SOS_PASSWORD, "-database", VSS_SERVER_PATH, "-project",                DS_VSS_PROJECT_PATH, "-verbose", "-nocompress", "-nocache",                "-workdir", project.getBaseDir().getAbsolutePath()                 + File.separator + LOCAL_PATH};        // Set up a SOSCheckout task        SOSCheckout sosCheckout = new SOSCheckout();        sosCheckout.setProject(project);        sosCheckout.setVssServerPath(VSS_SERVER_PATH);        sosCheckout.setSosServerPath(SOS_SERVER_PATH);        sosCheckout.setProjectPath(DS_VSS_PROJECT_PATH);        sosCheckout.setFile(SRC_FILE);        sosCheckout.setUsername(SOS_USERNAME);        sosCheckout.setPassword(SOS_PASSWORD);        sosCheckout.setLocalPath(new Path(project, LOCAL_PATH));        sosCheckout.setNoCache(true);        sosCheckout.setNoCompress(true);        sosCheckout.setVerbose(true);        sosCheckout.setRecursive(true);        commandline = sosCheckout.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java    public void testCheckinFileFlags() {        String[] sTestCmdLine = {"soscmd", "-command", "CheckInFile", "-file",                SRC_FILE, "-server", SOS_SERVER_PATH, "-name", SOS_USERNAME,                "-password", SOS_PASSWORD, "-database", VSS_SERVER_PATH, "-project",                DS_VSS_PROJECT_PATH, "-verbose", "-nocompress", "-nocache",                "-workdir", project.getBaseDir().getAbsolutePath() + File.separator                 + LOCAL_PATH, "-log", SRC_COMMENT};        // Set up a SOSCheckin task        SOSCheckin sosCheckin = new SOSCheckin();        sosCheckin.setProject(project);        sosCheckin.setVssServerPath(VSS_SERVER_PATH);        sosCheckin.setSosServerPath(SOS_SERVER_PATH);        sosCheckin.setProjectPath(VSS_PROJECT_PATH);        sosCheckin.setFile(SRC_FILE);        sosCheckin.setComment(SRC_COMMENT);        sosCheckin.setUsername(SOS_USERNAME);        sosCheckin.setPassword(SOS_PASSWORD);        sosCheckin.setLocalPath(new Path(project, LOCAL_PATH));        sosCheckin.setNoCache(true);        sosCheckin.setNoCompress(true);        sosCheckin.setVerbose(true);        sosCheckin.setRecursive(true);        commandline = sosCheckin.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java    public void testCheckinProjectFlags() {        String[] sTestCmdLine = {"soscmd", "-command", "CheckInProject",                "-recursive", "-server", SOS_SERVER_PATH, "-name", SOS_USERNAME,                "-password", "", "-database", VSS_SERVER_PATH, "-project",                DS_VSS_PROJECT_PATH, "", "", "-soshome", SOS_HOME, "-workdir",                project.getBaseDir().getAbsolutePath(), "-log", SRC_COMMENT,};        // Set up a SOSCheckin task        SOSCheckin sosCheckin = new SOSCheckin();        sosCheckin.setProject(project);        sosCheckin.setVssServerPath(VSS_SERVER_PATH);        sosCheckin.setSosServerPath(SOS_SERVER_PATH);        sosCheckin.setProjectPath(DS_VSS_PROJECT_PATH);        sosCheckin.setComment(SRC_COMMENT);        sosCheckin.setUsername(SOS_USERNAME);        sosCheckin.setSosHome(SOS_HOME);        sosCheckin.setNoCache(true);        sosCheckin.setNoCompress(false);        sosCheckin.setVerbose(false);        sosCheckin.setRecursive(true);        commandline = sosCheckin.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java    public void testCheckoutProjectFlags() {        String[] sTestCmdLine = {"soscmd", "-command", "CheckOutProject",                "-recursive", "-server", SOS_SERVER_PATH, "-name", SOS_USERNAME,                "-password", "", "-database", VSS_SERVER_PATH, "-project",                DS_VSS_PROJECT_PATH, "", "", "-soshome", SOS_HOME, "-workdir",                project.getBaseDir().getAbsolutePath()};        // Set up a sosCheckout task        SOSCheckout sosCheckout = new SOSCheckout();        sosCheckout.setProject(project);        sosCheckout.setVssServerPath(VSS_SERVER_PATH);        sosCheckout.setSosServerPath(SOS_SERVER_PATH);        sosCheckout.setProjectPath(VSS_PROJECT_PATH);        sosCheckout.setUsername(SOS_USERNAME);        sosCheckout.setSosHome(SOS_HOME);        sosCheckout.setNoCache(true);        sosCheckout.setNoCompress(false);        sosCheckout.setVerbose(false);        sosCheckout.setRecursive(true);        commandline = sosCheckout.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/vss/MSVSSTest.java    public void testCheckoutCommandLine() {        String[] sTestCmdLine = {SS_DIR + File.separator + MSVSS.SS_EXE, MSVSS.COMMAND_CHECKOUT,                DS_VSS_PROJECT_PATH, MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_RECURSION,                MSVSS.FLAG_VERSION_DATE + DATE, MSVSS.FLAG_LOGIN + VSS_USERNAME,                FLAG_FILETIME_MODIFIED, FLAG_NO_GET};        // Set up a VSSCheckOut task        MSVSSCHECKOUT vssCheckout = new MSVSSCHECKOUT();        vssCheckout.setProject(project);        vssCheckout.setLogin(VSS_USERNAME);        vssCheckout.setVsspath(DS_VSS_PROJECT_PATH);        vssCheckout.setRecursive(true);        vssCheckout.setDate(DATE);        vssCheckout.setLabel(SRC_LABEL);        vssCheckout.setSsdir(SS_DIR);        MSVSS.CurrentModUpdated cmu = new MSVSS.CurrentModUpdated();        cmu.setValue(TIME_MODIFIED);        vssCheckout.setFileTimeStamp(cmu);        vssCheckout.setGetLocalCopy(false);        commandline = vssCheckout.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
Clone class 192, 2 fragments, nominal size 11 lines, similarity 100%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/TraXLiaisonTest.java    public void testSystemId(){        File file = null;        if ( File.separatorChar == '\\' ){            file = new File("d:\\jdk");        } else {            file = new File("/user/local/bin");        }        String systemid = JAXPUtils.getSystemId(file);        assertTrue("SystemIDs should start by file:/", systemid.startsWith("file:/"));        assertTrue("SystemIDs should not start with file:////", !systemid.startsWith("file:////"));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/JAXPUtilsTest.java    public void testGetSystemId(){        File file = null;        if ( File.separatorChar == '\\' ){            file = new File("d:\\jdk");        } else {            file = new File("/user/local/bin");        }        String systemid = JAXPUtils.getSystemId(file);        assertTrue("SystemIDs should start by file:/", systemid.startsWith("file:/"));        assertTrue("SystemIDs should not start with file:////", !systemid.startsWith("file:////"));    }
Clone class 193, 4 fragments, nominal size 12 lines, similarity 76%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/vss/MSVSSTest.java    public void testLabelCommandLine1() {        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_LABEL, DS_VSS_PROJECT_PATH,                MSVSS.FLAG_COMMENT + SRC_COMMENT, MSVSS.FLAG_AUTORESPONSE_YES,                MSVSS.FLAG_LABEL + SRC_LABEL, MSVSS.FLAG_VERSION + VERSION, MSVSS.FLAG_LOGIN                 + VSS_USERNAME + "," + VSS_PASSWORD};        // Set up a VSSLabel task        MSVSSLABEL vssLabel = new MSVSSLABEL();        vssLabel.setProject(project);        vssLabel.setComment(SRC_COMMENT);        vssLabel.setLogin(VSS_USERNAME + "," + VSS_PASSWORD);        vssLabel.setVersion(VERSION);        vssLabel.setAutoresponse("Y");        vssLabel.setLabel(SRC_LABEL);        vssLabel.setVsspath(VSS_PROJECT_PATH);        commandline = vssLabel.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/vss/MSVSSTest.java    public void testHistoryCommandLine2() {        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_HISTORY, DS_VSS_PROJECT_PATH,                MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_VERSION_DATE + DATE + MSVSS.VALUE_FROMDATE                + DATE2, MSVSS.FLAG_RECURSION,  MSVSS.FLAG_LOGIN + VSS_USERNAME + "," + VSS_PASSWORD};        // Set up a VSSHistory task        MSVSSHISTORY vssHistory = new MSVSSHISTORY();        vssHistory.setProject(project);        vssHistory.setLogin(VSS_USERNAME + "," + VSS_PASSWORD);        vssHistory.setFromDate(DATE2);        vssHistory.setToDate(DATE);        vssHistory.setVsspath(VSS_PROJECT_PATH);        vssHistory.setRecursive(true);        commandline = vssHistory.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/vss/MSVSSTest.java    public void testCreateCommandLine() {        String[] sTestCmdLine = { MSVSS.SS_EXE, MSVSS.COMMAND_CREATE,                DS_VSS_PROJECT_PATH, MSVSS.FLAG_COMMENT + SRC_COMMENT, MSVSS.FLAG_AUTORESPONSE_NO,                MSVSS.FLAG_QUIET, MSVSS.FLAG_LOGIN + VSS_USERNAME};        // Set up a VSSCreate task        MSVSSCREATE vssCreate = new MSVSSCREATE();        vssCreate.setProject(project);        vssCreate.setComment(SRC_COMMENT);        vssCreate.setLogin(VSS_USERNAME);        vssCreate.setVsspath(DS_VSS_PROJECT_PATH);        vssCreate.setFailOnError(true);        vssCreate.setAutoresponse("N");        vssCreate.setQuiet(true);        commandline = vssCreate.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/vss/MSVSSTest.java    public void testCheckinCommandLine() {        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_CHECKIN, DS_VSS_PROJECT_PATH,                MSVSS.FLAG_AUTORESPONSE_NO, MSVSS.FLAG_WRITABLE, MSVSS.FLAG_LOGIN + VSS_USERNAME,                MSVSS.FLAG_COMMENT + SRC_COMMENT};        // Set up a VSSCheckIn task        MSVSSCHECKIN vssCheckin = new MSVSSCHECKIN();        vssCheckin.setProject(project);        vssCheckin.setComment(SRC_COMMENT);        vssCheckin.setLogin(VSS_USERNAME);        vssCheckin.setAutoresponse("N");        vssCheckin.setVsspath(VSS_PROJECT_PATH);        vssCheckin.setWritable(true);        commandline = vssCheckin.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
Clone class 194, 2 fragments, nominal size 13 lines, similarity 76%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/vss/MSVSSTest.java    public void testHistoryCommandLine1() {        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_HISTORY, DS_VSS_PROJECT_PATH,                MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_VERSION_LABEL + LONG_LABEL                 + MSVSS.VALUE_FROMLABEL + SRC_LABEL, MSVSS.FLAG_LOGIN + VSS_USERNAME                 + "," + VSS_PASSWORD, MSVSS.FLAG_OUTPUT + project.getBaseDir()                .getAbsolutePath()                 + File.separator + OUTPUT};        // Set up a VSSHistory task        MSVSSHISTORY vssHistory = new MSVSSHISTORY();        vssHistory.setProject(project);        vssHistory.setLogin(VSS_USERNAME + "," + VSS_PASSWORD);        vssHistory.setFromLabel(SRC_LABEL);        vssHistory.setToLabel(LONG_LABEL + "blahblah");        vssHistory.setVsspath(VSS_PROJECT_PATH);        vssHistory.setRecursive(false);        vssHistory.setOutput(new File(project.getBaseDir().getAbsolutePath(), OUTPUT));        commandline = vssHistory.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/vss/MSVSSTest.java    public void testAddCommandLine() {        String[] sTestCmdLine = {SS_DIR + File.separator + MSVSS.SS_EXE, MSVSS.COMMAND_ADD,                project.getBaseDir().getAbsolutePath() + File.separator + LOCAL_PATH,                MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_RECURSION,                MSVSS.FLAG_LOGIN + VSS_USERNAME + "," + VSS_PASSWORD, MSVSS.FLAG_COMMENT + "-"};        // Set up a VSSAdd task        MSVSSADD vssAdd = new MSVSSADD();        vssAdd.setProject(project);        vssAdd.setLogin(VSS_USERNAME + "," + VSS_PASSWORD);        vssAdd.setVsspath(DS_VSS_PROJECT_PATH);        vssAdd.setRecursive(true);        vssAdd.setSsdir(SS_DIR);        vssAdd.setWritable(false);        vssAdd.setLocalpath(new Path(project, LOCAL_PATH));        commandline = vssAdd.buildCmdLine();        checkCommandLines(sTestCmdLine, commandline.getCommandline());    }
Clone class 195, 2 fragments, nominal size 15 lines, similarity 73%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/SQLExecTest.java    public void testLastDelimiterPositionRowModeStrict() {        SQLExec s = new SQLExec();        SQLExec.DelimiterType t = new SQLExec.DelimiterType();        t.setValue("row");        s.setDelimiterType(t);        assertEquals(-1, s.lastDelimiterPosition(null, ""));        assertEquals(-1, s.lastDelimiterPosition(null, "GO"));        assertEquals(-1, s.lastDelimiterPosition(null, "; "));        assertEquals(1, s.lastDelimiterPosition(new StringBuffer("ab"), ";"));        s.setDelimiter("GO");        assertEquals(-1, s.lastDelimiterPosition(null, "GO "));        assertEquals(-1, s.lastDelimiterPosition(null, "go"));        assertEquals(0, s.lastDelimiterPosition(new StringBuffer("ab"), "GO"));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/SQLExecTest.java    public void testLastDelimiterPositionRowModeNonStrict() {        SQLExec s = new SQLExec();        SQLExec.DelimiterType t = new SQLExec.DelimiterType();        t.setValue("row");        s.setDelimiterType(t);        s.setStrictDelimiterMatching(false);        assertEquals(-1, s.lastDelimiterPosition(null, ""));        assertEquals(-1, s.lastDelimiterPosition(null, "GO"));        assertEquals(0, s.lastDelimiterPosition(new StringBuffer("; "), "; "));        assertEquals(1, s.lastDelimiterPosition(new StringBuffer("ab"), ";"));        s.setDelimiter("GO");        assertEquals(1,                     s.lastDelimiterPosition(new StringBuffer("abcd"), "GO "));        assertEquals(0, s.lastDelimiterPosition(new StringBuffer("go"), "go"));        assertEquals(0, s.lastDelimiterPosition(new StringBuffer("ab"), "GO"));    }
Clone class 196, 2 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/SyncTest.java    private void testCopyAndRemove(String target) {        buildRule.executeTarget(target);        String d = buildRule.getProject().getProperty("dest") + "/a/b/c/d";        assertFileIsPresent(d);        String f = buildRule.getProject().getProperty("dest") + "/e/f";        assertFileIsNotPresent(f);        assertTrue(buildRule.getFullLog().indexOf("Removing orphan file:") > -1);        assertContains("Removed 1 dangling file from", buildRule.getFullLog());        assertContains("Removed 1 dangling directory from", buildRule.getFullLog());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/SyncTest.java    public void testCopyAndRemoveEmptyPreserve() {        buildRule.executeTarget("copyandremove-emptypreserve");        String d = buildRule.getProject().getProperty("dest") + "/a/b/c/d";        assertFileIsPresent(d);        String f = buildRule.getProject().getProperty("dest") + "/e/f";        assertFileIsNotPresent(f);        assertTrue(buildRule.getFullLog().indexOf("Removing orphan file:") > -1);        assertContains("Removed 1 dangling file from", buildRule.getFullLog());        assertContains("Removed 1 dangling directory from", buildRule.getFullLog());    }
Clone class 197, 2 fragments, nominal size 13 lines, similarity 84%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/TStampTest.java    public void testTimeZone() throws Exception {        Tstamp.CustomFormat format = tstamp.createFormat();        format.setProperty("today");        format.setPattern("HH:mm:ss z");        format.setTimezone("GMT");        Date date = Calendar.getInstance().getTime();        format.execute(project, date, location);        String today = project.getProperty("today");        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss z");        sdf.setTimeZone( TimeZone.getTimeZone("GMT") );        String expected = sdf.format(date);        assertEquals(expected, today);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/TStampTest.java    public void testWriteOrder() throws Exception {        Tstamp.CustomFormat format = tstamp.createFormat();        format.setProperty("TODAY");        format.setPattern("HH:mm:ss z");        format.setTimezone("GMT");        Date date = Calendar.getInstance().getTime();        format.execute(project, date, location);        String today = project.getProperty("TODAY");        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss z");        sdf.setTimeZone( TimeZone.getTimeZone("GMT") );        String expected = sdf.format(date);        assertEquals(expected, today);    }
Clone class 198, 4 fragments, nominal size 13 lines, similarity 76%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ZipTest.java    public void testTarFileSet() throws IOException {       buildRule.executeTarget("testTarFileSet");        org.apache.tools.zip.ZipFile zf = null;        try {            zf = new org.apache.tools.zip.ZipFile(new File(buildRule.getProject().getProperty("output"), "test3.zip"));            org.apache.tools.zip.ZipEntry ze = zf.getEntry("asf-logo.gif");            assertEquals(UnixStat.FILE_FLAG | 0446, ze.getUnixMode());        } finally {            if (zf != null) {                zf.close();            }        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ZipTest.java    public void testRewriteZeroPermissions() throws IOException {       buildRule.executeTarget("rewriteZeroPermissions");        org.apache.tools.zip.ZipFile zf = null;        try {            zf = new org.apache.tools.zip.ZipFile(new File(buildRule.getProject().getProperty("output"), "test3.zip"));            org.apache.tools.zip.ZipEntry ze = zf.getEntry("testdir/test.txt");            assertEquals(UnixStat.FILE_FLAG | 0644, ze.getUnixMode());        } finally {            if (zf != null) {                zf.close();            }        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ZipTest.java    public void testForBugzilla34764() throws IOException {       buildRule.executeTarget("testForBugzilla34764");        org.apache.tools.zip.ZipFile zf = null;        try {            zf = new org.apache.tools.zip.ZipFile(new File(buildRule.getProject().getProperty("output"), "test3.zip"));            org.apache.tools.zip.ZipEntry ze = zf.getEntry("file1");            assertEquals(UnixStat.FILE_FLAG | 0644, ze.getUnixMode());        } finally {            if (zf != null) {                zf.close();            }        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/taskdefs/ZipTest.java    public void testAcceptZeroPermissions() throws IOException {       buildRule.executeTarget("acceptZeroPermissions");        org.apache.tools.zip.ZipFile zf = null;        try {            zf = new org.apache.tools.zip.ZipFile(new File(buildRule.getProject().getProperty("output"), "test3.zip"));            org.apache.tools.zip.ZipEntry ze = zf.getEntry("testdir/test.txt");            assertEquals(0000, ze.getUnixMode());        } finally {            if (zf != null) {                zf.close();            }        }    }
Clone class 199, 5 fragments, nominal size 17 lines, similarity 70%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/optional/depend/ClassFileSetTest.java    public void testBasicSet() {        Project p = buildRule.getProject();        buildRule.executeTarget("testbasicset");        FileSet resultFileSet = (FileSet)p.getReference(RESULT_FILESET);        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p);        String[] scannedFiles = scanner.getIncludedFiles();        Hashtable files = new Hashtable();        for (int i = 0; i < scannedFiles.length; ++i) {            files.put(scannedFiles[i], scannedFiles[i]);        }        assertEquals("Classfileset did not pick up expected number of "            + "class files", 4, files.size());        assertTrue("Result did not contain A.class",            files.containsKey("A.class"));        assertTrue("Result did not contain B.class",            files.containsKey("B.class"));        assertTrue("Result did not contain C.class",            files.containsKey("C.class"));        assertTrue("Result did not contain D.class",            files.containsKey("D.class"));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/optional/depend/ClassFileSetTest.java    public void testMethodParam() {        Project p = buildRule.getProject();        buildRule.executeTarget("testmethodparam");        FileSet resultFileSet = (FileSet)p.getReference(RESULT_FILESET);        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p);        String[] scannedFiles = scanner.getIncludedFiles();        Hashtable files = new Hashtable();        for (int i = 0; i < scannedFiles.length; ++i) {            files.put(scannedFiles[i], scannedFiles[i]);        }        assertEquals("Classfileset did not pick up expected number of "            + "class files", 5, files.size());        assertTrue("Result did not contain A.class",            files.containsKey("A.class"));        assertTrue("Result did not contain B.class",            files.containsKey("B.class"));        assertTrue("Result did not contain C.class",            files.containsKey("C.class"));        assertTrue("Result did not contain D.class",            files.containsKey("D.class"));        assertTrue("Result did not contain E.class",            files.containsKey("E.class"));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/optional/depend/ClassFileSetTest.java    public void testSmallSet() {        Project p = buildRule.getProject();        buildRule.executeTarget("testsmallset");        FileSet resultFileSet = (FileSet)p.getReference(RESULT_FILESET);        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p);        String[] scannedFiles = scanner.getIncludedFiles();        Hashtable files = new Hashtable();        for (int i = 0; i < scannedFiles.length; ++i) {            files.put(scannedFiles[i], scannedFiles[i]);        }        assertEquals("Classfileset did not pick up expected number of "            + "class files", 2, files.size());        assertTrue("Result did not contain B.class",            files.containsKey("B.class"));        assertTrue("Result did not contain C.class",            files.containsKey("C.class"));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/optional/depend/ClassFileSetTest.java    public void testComboSet() {        Project p = buildRule.getProject();        buildRule.executeTarget("testcomboset");        FileSet resultFileSet = (FileSet)p.getReference(RESULT_FILESET);        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p);        String[] scannedFiles = scanner.getIncludedFiles();        Hashtable files = new Hashtable();        for (int i = 0; i < scannedFiles.length; ++i) {            files.put(scannedFiles[i], scannedFiles[i]);        }        assertEquals("Classfileset did not pick up expected number of "            + "class files", 1, files.size());        assertTrue("Result did not contain C.class",            files.containsKey("C.class"));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/optional/depend/ClassFileSetTest.java    public void testMethodParamInner() {        Project p = buildRule.getProject();        buildRule.executeTarget("testmethodparaminner");        FileSet resultFileSet = (FileSet)p.getReference(RESULT_FILESET);        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(p);        String[] scannedFiles = scanner.getIncludedFiles();        Hashtable files = new Hashtable();        for (int i = 0; i < scannedFiles.length; ++i) {            files.put(scannedFiles[i], scannedFiles[i]);        }        assertEquals("Classfileset did not pick up expected number of "            + "class files", 4, files.size());        assertTrue("Result did not contain test" + File.separator + "Outer$Inner.class",            files.containsKey("test" + File.separator + "Outer$Inner.class"));        assertTrue("Result did not contain test" + File.separator + "Outer.class",            files.containsKey("test" + File.separator + "Outer.class"));        assertTrue("Result did not contain test" + File.separator + "ContainsOnlyInner.class",            files.containsKey("test" + File.separator + "ContainsOnlyInner.class"));        assertTrue("Result did not contain test" + File.separator + "ContainsOnlyInner.class",            files.containsKey("test" + File.separator + "MethodParam.class"));    }
Clone class 200, 2 fragments, nominal size 18 lines, similarity 73%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/PathTest.java    public void testConstructorUnixStyle() {        Path p = new Path(project, "/a:/b");        String[] l = p.list();        assertEquals("two items, Unix style", 2, l.length);        if (isUnixStyle) {            assertEquals("/a", l[0]);            assertEquals("/b", l[1]);        } else if (isNetWare) {            assertEquals("\\a", l[0]);            assertEquals("\\b", l[1]);        } else {            String base = new File(File.separator).getAbsolutePath();            assertEquals(base + "a", l[0]);            assertEquals(base + "b", l[1]);        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/PathTest.java    public void testConstructorMixedStyle() {        Path p = new Path(project, "\\a;\\b:/c");        String[] l = p.list();        assertEquals("three items, mixed style", 3, l.length);        if (isUnixStyle) {            assertEquals("/a", l[0]);            assertEquals("/b", l[1]);            assertEquals("/c", l[2]);        } else if (isNetWare) {            assertEquals("\\a", l[0]);            assertEquals("\\b", l[1]);            assertEquals("\\c", l[2]);        } else {            String base = new File(File.separator).getAbsolutePath();            assertEquals(base + "a", l[0]);            assertEquals(base + "b", l[1]);            assertEquals(base + "c", l[2]);        }    }
Clone class 201, 3 fragments, nominal size 11 lines, similarity 81%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/PathTest.java    public void testFileList() {        Path p = new Path(project);        FileList f = new FileList();        f.setProject(project);        f.setDir(project.resolveFile("."));        f.setFiles("build.xml");        p.addFilelist(f);        String[] l = p.list();        assertEquals(1, l.length);        assertEquals(project.resolveFile("build.xml").getAbsolutePath(), l[0]);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/PathTest.java    public void testDirSet() {        Path p = new Path(project);        DirSet d = new DirSet();        d.setProject(project);        d.setDir(project.resolveFile("."));        d.setIncludes("build");        p.addDirset(d);        String[] l = p.list();        assertEquals(1, l.length);        assertEquals(project.resolveFile("build").getAbsolutePath(), l[0]);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/PathTest.java    public void testFileSet() {        Path p = new Path(project);        FileSet f = new FileSet();        f.setProject(project);        f.setDir(project.resolveFile("."));        f.setIncludes("build.xml");        p.addFileset(f);        String[] l = p.list();        assertEquals(1, l.length);        assertEquals(project.resolveFile("build.xml").getAbsolutePath(), l[0]);    }
Clone class 202, 3 fragments, nominal size 11 lines, similarity 81%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/PermissionsTest.java    public void testGrantedAndRevoked() {        perms.setSecurityManager();        try {            String s = System.getProperty("user.home");            System.setProperty("user.home", s);            fail("Could perform an action that should have been forbidden.");        } catch (SecurityException e){            // Was expected, test passes        } finally {            perms.restoreSecurityManager();        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/PermissionsTest.java    public void testDefaultRevoked() {        perms.setSecurityManager();        try {            System.getProperty("os.name");            fail("Could perform an action that should have been forbidden.");        } catch (SecurityException e){            // Was expected, test passes        } finally {            perms.restoreSecurityManager();        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/PermissionsTest.java    public void testOther() {        String ls = System.getProperty("line.separator");        perms.setSecurityManager();        try {            System.setProperty("line.separator",ls);            fail("Could perform an action that should have been forbidden.");        } catch (SecurityException e){            //TODO assert exception message            // Was expected, test passes        } finally {            perms.restoreSecurityManager();        }    }
Clone class 203, 2 fragments, nominal size 12 lines, similarity 100%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/BaseSelectorRule.java    public String selectionString(File basedir, File[] files, FileSelector selector) {        StringBuilder buf = new StringBuilder();        for (int x = 0; x < files.length; x++) {            if (selector.isSelected(basedir,filenames[x],files[x])) {                buf.append('T');            }            else {                buf.append('F');            }        }        return buf.toString();    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/BaseSelectorTest.java    public String selectionString(File basedir, File[] files, FileSelector selector) {        StringBuffer buf = new StringBuffer();        for (int x = 0; x < files.length; x++) {            if (selector.isSelected(basedir,filenames[x],files[x])) {                buf.append('T');            }            else {                buf.append('F');            }        }        return buf.toString();    }
Clone class 204, 2 fragments, nominal size 11 lines, similarity 90%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/BaseSelectorTest.java    public String diff(String expected, String result) {        int length1 = expected.length();        int length2 = result.length();        int min = (length1 > length2) ? length2 : length1;        StringBuffer sb = new StringBuffer();        for (int i=0; i<min; i++) {            sb.append(                  (expected.charAt(i) == result.charAt(i))                ? "-"                : "X"            );        }        return sb.toString();    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java    private String diff(String expected, String result) {        int length1 = expected.length();        int length2 = result.length();        int min = (length1 > length2) ? length2 : length1;        StringBuffer sb = new StringBuffer();        for (int i=0; i<min; i++) {            sb.append(                    (expected.charAt(i) == result.charAt(i))                            ? "-"                            : "X"            );        }        return sb.toString();    }
Clone class 205, 2 fragments, nominal size 12 lines, similarity 75%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/BaseSelectorTest.java    public String resolve(String filelist) {        StringBuffer sb = new StringBuffer();        int min = (filenames.length > filelist.length())                ? filelist.length()                : filenames.length;        for (int i=0; i<min; i++) {            if ('X'==filelist.charAt(i)) {                sb.append(filenames[i]);                sb.append(";");            }        }        return sb.toString();    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java    private String resolve(String filelist) {        StringBuffer sb = new StringBuffer();        int min = (selectorRule.getFilenames().length > filelist.length())                ? filelist.length()                : selectorRule.getFilenames().length;        for (int i=0; i<min; i++) {            if ('X'==filelist.charAt(i)) {                sb.append(selectorRule.getFilenames()[i]);                sb.append(";");            }        }        return sb.toString();    }
Clone class 206, 2 fragments, nominal size 21 lines, similarity 85%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/ContainsSelectorTest.java    public void testValidate() {        ContainsSelector s = new ContainsSelector();        try {            s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]);            fail("ContainsSelector did not check for required field 'text'");        } catch (BuildException be1) {            assertEquals("The text attribute is required", be1.getMessage());        }        s = new ContainsSelector();        Parameter param = new Parameter();        param.setName("garbage in");        param.setValue("garbage out");        Parameter[] params = {param};        s.setParameters(params);        try {            s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]);            fail("ContainsSelector did not check for valid parameter element");        } catch (BuildException be2) {            assertEquals("Invalid parameter garbage in", be2.getMessage());        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/FilenameSelectorTest.java    public void testValidate() {        FilenameSelector s = new FilenameSelector();        try {            s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]);            fail("FilenameSelector did not check for required fields");        } catch (BuildException be1) {            assertEquals("The name or regex attribute is required", be1.getMessage());        }        s = new FilenameSelector();        Parameter param = new Parameter();        param.setName("garbage in");        param.setValue("garbage out");        Parameter[] params = {param};        s.setParameters(params);        try {            s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0]);            fail("FilenameSelector did not check for valid parameter element");        } catch (BuildException be2) {            assertEquals("Invalid parameter garbage in", be2.getMessage());        }    }
Clone class 207, 3 fragments, nominal size 11 lines, similarity 72%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/DependSelectorTest.java    public void testIdentityMapper() {        DependSelector s = new DependSelector();        s.setTargetdir(selectorRule.getBeddir());        Mapper.MapperType identity = new Mapper.MapperType();        identity.setValue("identity");        Mapper m = s.createMapper();        m.setType(identity);        String results = selectorRule.selectionString(s);        assertEquals("FFFFFFFFFFFF", results);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/DependSelectorTest.java    public void testMergeMapper2() {        DependSelector s = new DependSelector();        s.setTargetdir(selectorRule.getBeddir());        Mapper.MapperType merge = new Mapper.MapperType();        merge.setValue("merge");        Mapper m = s.createMapper();        m.setType(merge);        m.setTo("asf-logo.gif.bz2");        String results = selectorRule.selectionString(s);        assertEquals("TTFTTTTTTTTT", results);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/DependSelectorTest.java    public void testMergeMapper() {        DependSelector s = new DependSelector();        s.setTargetdir(selectorRule.getBeddir());        Mapper.MapperType merge = new Mapper.MapperType();        merge.setValue("merge");        Mapper m = s.createMapper();        m.setType(merge);        m.setTo("asf-logo.gif.gz");        String results = selectorRule.selectionString(s);        assertEquals("TFFFFTTTFFF", results.substring(0,11));    }
Clone class 208, 3 fragments, nominal size 13 lines, similarity 71%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/DependSelectorTest.java    public void testGlobMapperRelativePath() {        DependSelector s = new DependSelector();        File subdir = new File("selectortest/tar/bz2");        s.setTargetdir(subdir);        Mapper.MapperType glob = new Mapper.MapperType();        glob.setValue("glob");        Mapper m = s.createMapper();        m.setType(glob);        m.setFrom("*.bz2");        m.setTo("*.tar.bz2");        String results = selectorRule.selectionString(s);        assertEquals("FFTFFFFFFTTF", results);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/DependSelectorTest.java    public void testMirroredSelection() {        DependSelector s = new DependSelector();        s.setTargetdir(new File(selectorRule.getOutputDir(), "selectortest2/tar/bz2"));        Mapper.MapperType glob = new Mapper.MapperType();        glob.setValue("glob");        Mapper m = s.createMapper();        m.setType(glob);        m.setFrom("*.bz2");        m.setTo("*.tar.bz2");        String results = selectorRule.mirrorSelectionString(s);        assertEquals("FFFFFFFFFTTF", results);        results = selectorRule.selectionString(s);        assertEquals("FFFFFFFFFTTF", results);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/DependSelectorTest.java    public void testRestrictedGlobMapper() {        DependSelector s = new DependSelector();        File subdir = new File(selectorRule.getBeddir(), "tar/bz2");        s.setTargetdir(subdir);        Mapper.MapperType glob = new Mapper.MapperType();        glob.setValue("glob");        Mapper m = s.createMapper();        m.setType(glob);        m.setFrom("*.bz2");        m.setTo("*.tar.bz2");        String results = selectorRule.selectionString(s);        assertEquals("FFFFFFFFFTTF", results);    }
Clone class 209, 3 fragments, nominal size 10 lines, similarity 80%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java    public void testValidateWrongCache() {        String name = "this-is-not-a-valid-cache-name";        try {            ModifiedSelector.CacheName cacheName = new ModifiedSelector.CacheName();            cacheName.setValue(name);            fail("CacheSelector.CacheName accepted invalid value.");        } catch (BuildException be) {            assertEquals(name + " is not a legal value for this attribute",                         be.getMessage());        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java    public void testValidateWrongComparator() {        String name = "this-is-not-a-valid-comparator-name";        try {            ModifiedSelector.ComparatorName compName                = new ModifiedSelector.ComparatorName();            compName.setValue(name);            fail("ModifiedSelector.ComparatorName accepted invalid value.");        } catch (BuildException be) {            assertEquals(name + " is not a legal value for this attribute",                         be.getMessage());        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java    public void testValidateWrongAlgorithm() {        String name = "this-is-not-a-valid-algorithm-name";        try {            ModifiedSelector.AlgorithmName algoName                = new ModifiedSelector.AlgorithmName();            algoName.setValue(name);            fail("CacheSelector.AlgorithmName accepted invalid value.");        } catch (BuildException be) {            assertEquals(name + " is not a legal value for this attribute",                         be.getMessage());        }    }
Clone class 210, 2 fragments, nominal size 11 lines, similarity 90%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java    public void testEqualComparatorViaSelector() {        ModifiedSelector s = new ModifiedSelector();        ModifiedSelector.ComparatorName compName = new ModifiedSelector.ComparatorName();        compName.setValue("equal");        s.setComparator(compName);        try {            performTests(s, "TTTTTTTTTTTT");        } finally {            s.getCache().delete();        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java    public void testRuleComparatorViaSelector() {        ModifiedSelector s = new ModifiedSelector();        ModifiedSelector.ComparatorName compName = new ModifiedSelector.ComparatorName();        compName.setValue("rule");        s.setComparator(compName);        try {            performTests(s, "TTTTTTTTTTTT");        } finally {            s.getCache().delete();        }    }
Clone class 211, 2 fragments, nominal size 56 lines, similarity 89%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/TarFileSetTest.java    public final void testAttributes() {        TarFileSet f = (TarFileSet)getInstance();        //check that dir and src are incompatible        f.setSrc(new File("example.tar"));        try {            f.setDir(new File("examples"));            fail("can add dir to "                    + f.getDataTypeName()                    + " when a src is already present");        } catch (BuildException be) {            assertEquals("Cannot set both dir and src attributes",be.getMessage());        }        f = (TarFileSet)getInstance();        //check that dir and src are incompatible        f.setDir(new File("examples"));        try {            f.setSrc(new File("example.tar"));            fail("can add src to "                    + f.getDataTypeName()                    + " when a dir is already present");        } catch (BuildException be) {            assertEquals("Cannot set both dir and src attributes",be.getMessage());        }        //check that fullpath and prefix are incompatible        f = (TarFileSet)getInstance();        f.setSrc(new File("example.tar"));        f.setPrefix("/examples");        try {            f.setFullpath("/doc/manual/index.html");            fail("Can add fullpath to "                    + f.getDataTypeName()                    + " when a prefix is already present");        } catch (BuildException be) {            assertEquals("Cannot set both fullpath and prefix attributes", be.getMessage());        }        f = (TarFileSet)getInstance();        f.setSrc(new File("example.tar"));        f.setFullpath("/doc/manual/index.html");        try {            f.setPrefix("/examples");            fail("Can add prefix to "                    + f.getDataTypeName()                    + " when a fullpath is already present");        } catch (BuildException be) {            assertEquals("Cannot set both fullpath and prefix attributes", be.getMessage());        }        // check that reference tarfilesets cannot have specific attributes        f = (TarFileSet)getInstance();        f.setRefid(new Reference(getProject(), "test"));        try {            f.setSrc(new File("example.tar"));            fail("Can add src to "                    + f.getDataTypeName()                    + " when a refid is already present");        } catch (BuildException be) {            assertEquals("You must not specify more than one "            + "attribute when using refid", be.getMessage());        }        // check that a reference tarfileset gets the same attributes as the original        f = (TarFileSet)getInstance();        f.setSrc(new File("example.tar"));        f.setPrefix("/examples");        f.setFileMode("600");        f.setDirMode("530");        getProject().addReference("test",f);        TarFileSet zid=(TarFileSet)getInstance();        zid.setRefid(new Reference(getProject(), "test"));        assertTrue("src attribute copied by copy constructor",zid.getSrc(getProject()).equals(f.getSrc(getProject())));        assertTrue("prefix attribute copied by copy constructor",f.getPrefix(getProject()).equals(zid.getPrefix(getProject())));        assertTrue("file mode attribute copied by copy constructor",f.getFileMode(getProject())==zid.getFileMode(getProject()));        assertTrue("dir mode attribute copied by copy constructor",f.getDirMode(getProject())==zid.getDirMode(getProject()));      }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/ZipFileSetTest.java    public final void testAttributes() {        ZipFileSet f = (ZipFileSet)getInstance();        //check that dir and src are incompatible        f.setSrc(new File("example.zip"));        try {            f.setDir(new File("examples"));            fail("can add dir to "                    + f.getDataTypeName()                    + " when a src is already present");        } catch (BuildException be) {            assertEquals("Cannot set both dir and src attributes",be.getMessage());        }        f = (ZipFileSet)getInstance();        //check that dir and src are incompatible        f.setDir(new File("examples"));        try {            f.setSrc(new File("example.zip"));            fail("can add src to "                    + f.getDataTypeName()                    + " when a dir is already present");        } catch (BuildException be) {            assertEquals("Cannot set both dir and src attributes",be.getMessage());        }        //check that fullpath and prefix are incompatible        f = (ZipFileSet)getInstance();        f.setSrc(new File("example.zip"));        f.setPrefix("/examples");        try {            f.setFullpath("/doc/manual/index.html");            fail("Can add fullpath to "                    + f.getDataTypeName()                    + " when a prefix is already present");        } catch (BuildException be) {            assertEquals("Cannot set both fullpath and prefix attributes", be.getMessage());        }        f = (ZipFileSet)getInstance();        f.setSrc(new File("example.zip"));        f.setFullpath("/doc/manual/index.html");        try {            f.setPrefix("/examples");            fail("Can add prefix to "                    + f.getDataTypeName()                    + " when a fullpath is already present");        } catch (BuildException be) {            assertEquals("Cannot set both fullpath and prefix attributes", be.getMessage());        }        // check that reference zipfilesets cannot have specific attributes        f = (ZipFileSet)getInstance();        f.setRefid(new Reference(getProject(), "test"));        try {            f.setSrc(new File("example.zip"));            fail("Can add src to "                    + f.getDataTypeName()                    + " when a refid is already present");        } catch (BuildException be) {            assertEquals("You must not specify more than one "            + "attribute when using refid", be.getMessage());        }        // check that a reference zipfileset gets the same attributes as the original        f = (ZipFileSet)getInstance();        f.setSrc(new File("example.zip"));        f.setPrefix("/examples");        f.setFileMode("600");        f.setDirMode("530");        getProject().addReference("test",f);        ZipFileSet zid=(ZipFileSet)getInstance();        zid.setRefid(new Reference(getProject(), "test"));        assertTrue("src attribute copied by copy constructor",zid.getSrc(getProject()).equals(f.getSrc(getProject())));        assertTrue("prefix attribute copied by copy constructor",f.getPrefix(getProject()).equals(zid.getPrefix(getProject())));        assertTrue("file mode attribute copied by copy constructor",f.getFileMode(getProject())==zid.getFileMode(getProject()));        assertTrue("dir mode attribute copied by copy constructor",f.getDirMode(getProject())==zid.getDirMode(getProject()));      }
Clone class 212, 2 fragments, nominal size 11 lines, similarity 90%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java    public void testAbsolutePath() throws IOException, SAXException {        ResourceLocation dtd = new ResourceLocation();        dtd.setPublicId("-//stevo//DTD doc 1.0//EN");        String sysid = System.getProperty("root") + File.separator + "src/etc/testcases/taskdefs/optional/xml/doc.dtd";        dtd.setLocation(sysid);        catalog.addDTD(dtd);        File dtdFile = project.resolveFile(sysid);        InputSource result = catalog.resolveEntity("-//stevo//DTD doc 1.0//EN",                                                   "nap:chemical+brothers");        assertNotNull(result);        assertEquals(toURLString(dtdFile),                     result.getSystemId());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java    public void testSimpleEntry() throws IOException, SAXException {        ResourceLocation dtd = new ResourceLocation();        dtd.setPublicId("-//stevo//DTD doc 1.0//EN");        String sysid = "src/etc/testcases/taskdefs/optional/xml/doc.dtd";        dtd.setLocation(sysid);        catalog.addDTD(dtd);        File dtdFile = project.resolveFile(sysid);        InputSource result = catalog.resolveEntity("-//stevo//DTD doc 1.0//EN",                                                   "nap:chemical+brothers");        assertNotNull(result);        assertEquals(toURLString(dtdFile),                     result.getSystemId());    }
Clone class 213, 2 fragments, nominal size 27 lines, similarity 79%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java    public void testEntryReference() throws IOException, SAXException, TransformerException {        String publicId = "-//stevo//DTD doc 1.0//EN";        String sysid = "src/etc/testcases/taskdefs/optional/xml/doc.dtd";        // catalog2 --> catalog1 --> catalog        ResourceLocation dtd = new ResourceLocation();        dtd.setPublicId(publicId);        dtd.setLocation(sysid);        catalog.addDTD(dtd);        File dtdFile = project.resolveFile(sysid);        String uri = "http://foo.com/bar/blah.xml";        String uriLoc = "src/etc/testcases/taskdefs/optional/xml/about.xml";        ResourceLocation entity = new ResourceLocation();        entity.setPublicId(uri);        entity.setLocation(uriLoc);        catalog.addEntity(entity);        File xmlFile = project.resolveFile(uriLoc);        project.addReference("catalog", catalog);        XMLCatalog catalog1 = newCatalog();        project.addReference("catalog1", catalog1);        XMLCatalog catalog2 = newCatalog();        project.addReference("catalog2", catalog1);        catalog1.setRefid(new Reference(project, "catalog"));        catalog2.setRefid(new Reference(project, "catalog1"));        InputSource isResult = catalog2.resolveEntity(publicId,                                                    "nap:chemical+brothers");        assertNotNull(isResult);        assertEquals(toURLString(dtdFile),                     isResult.getSystemId());            Source result = catalog.resolve(uri, null);            assertNotNull(result);            assertEquals(toURLString(xmlFile),                         result.getSystemId());    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/types/XMLCatalogTest.java    public void testNestedCatalog() throws IOException, SAXException, TransformerException {        String publicId = "-//stevo//DTD doc 1.0//EN";        String dtdLoc = "src/etc/testcases/taskdefs/optional/xml/doc.dtd";        ResourceLocation dtd = new ResourceLocation();        dtd.setPublicId(publicId);        dtd.setLocation(dtdLoc);        catalog.addDTD(dtd);        File dtdFile = project.resolveFile(dtdLoc);        String uri = "http://foo.com/bar/blah.xml";        String uriLoc = "src/etc/testcases/taskdefs/optional/xml/about.xml";        ResourceLocation entity = new ResourceLocation();        entity.setPublicId(uri);        entity.setLocation(uriLoc);        catalog.addEntity(entity);        File xmlFile = project.resolveFile(uriLoc);        XMLCatalog catalog1 = newCatalog();        catalog1.addConfiguredXMLCatalog(catalog);        InputSource isResult = catalog1.resolveEntity(publicId,                                                    "nap:chemical+brothers");        assertNotNull(isResult);        assertEquals(toURLString(dtdFile),                     isResult.getSystemId());        Source result = catalog.resolve(uri, null);        assertNotNull(result);        assertEquals(toURLString(xmlFile),                     result.getSystemId());    }
Clone class 214, 2 fragments, nominal size 18 lines, similarity 94%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/DOMElementWriterTest.java    public void testEncode() {        assertEquals("&amp;#20;", w.encode("&#20;"));        assertEquals("&amp;#x20;", w.encode("&#x20;"));        assertEquals("&amp;#xA0;", w.encode("&#xA0;"));        assertEquals("&amp;#A0;", w.encode("&#A0;"));        assertEquals("20;", w.encode("20;"));        assertEquals("&amp;#20", w.encode("&#20"));        assertEquals("&amp;quot;", w.encode("&quot;"));        assertEquals("&amp;apos;", w.encode("&apos;"));        assertEquals("&amp;gt;", w.encode("&gt;"));        assertEquals("&amp;lt;", w.encode("&lt;"));        assertEquals("&amp;amp;", w.encode("&amp;"));        assertEquals("&quot;", w.encode("\""));        assertEquals("&lt;", w.encode("<"));        assertEquals("&amp;", w.encode("&"));        assertEquals("", w.encode("\u0017"));        assertEquals("\r\n\t", w.encode("\r\n\t"));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/DOMElementWriterTest.java    public void testEncodeAttributeValue() {        assertEquals("&amp;#20;", w.encodeAttributeValue("&#20;"));        assertEquals("&amp;#x20;", w.encodeAttributeValue("&#x20;"));        assertEquals("&amp;#xA0;", w.encodeAttributeValue("&#xA0;"));        assertEquals("&amp;#A0;", w.encodeAttributeValue("&#A0;"));        assertEquals("20;", w.encodeAttributeValue("20;"));        assertEquals("&amp;#20", w.encodeAttributeValue("&#20"));        assertEquals("&amp;quot;", w.encodeAttributeValue("&quot;"));        assertEquals("&amp;apos;", w.encodeAttributeValue("&apos;"));        assertEquals("&amp;gt;", w.encodeAttributeValue("&gt;"));        assertEquals("&amp;lt;", w.encodeAttributeValue("&lt;"));        assertEquals("&amp;amp;", w.encodeAttributeValue("&amp;"));        assertEquals("&quot;", w.encodeAttributeValue("\""));        assertEquals("&lt;", w.encodeAttributeValue("<"));        assertEquals("&amp;", w.encodeAttributeValue("&"));        assertEquals("", w.encodeAttributeValue("\u0017"));        assertEquals("&#xd;&#xa;&#x9;", w.encodeAttributeValue("\r\n\t"));    }
Clone class 215, 2 fragments, nominal size 14 lines, similarity 85%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/LayoutPreservingPropertiesTest.java    public void testRemove() throws Exception {        File simple = new File(System.getProperty("root"),                               "src/etc/testcases/util/simple.properties");        FileInputStream fis = new FileInputStream(simple);        LayoutPreservingProperties lpf = new LayoutPreservingProperties();        lpf.load(fis);        lpf.remove("prop.beta");        File tmp = File.createTempFile("tmp", "props");        tmp.deleteOnExit();        lpf.saveAs(tmp);        // and check that the resulting file looks okay        String s = readFile(tmp);        assertTrue("should not have had prop.beta",                   s.indexOf("prop.beta") == -1);        assertTrue("should have had prop.beta's comment",                   s.indexOf("! more comment") > -1);    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/LayoutPreservingPropertiesTest.java    public void testRemoveWithComment() throws Exception {        File simple = new File(System.getProperty("root"),                               "src/etc/testcases/util/simple.properties");        FileInputStream fis = new FileInputStream(simple);        LayoutPreservingProperties lpf = new LayoutPreservingProperties();        lpf.load(fis);        lpf.setRemoveComments(true);        lpf.remove("prop.beta");        File tmp = File.createTempFile("tmp", "props");        tmp.deleteOnExit();        lpf.saveAs(tmp);        // and check that the resulting file looks okay        String s = readFile(tmp);        assertTrue("should not have had prop.beta",                   s.indexOf("prop.beta") == -1);        assertTrue("should not have had prop.beta's comment",                   s.indexOf("! more comment") == -1);    }
Clone class 216, 2 fragments, nominal size 15 lines, similarity 93%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/PermissionUtilsTest.java    public void getSetPermissionsWorksForZipResources() throws IOException {        File f = File.createTempFile("ant", ".zip");        f.deleteOnExit();        try (ZipOutputStream os = new ZipOutputStream(f)) {            ZipEntry e = new ZipEntry("foo");            os.putNextEntry(e);            os.closeEntry();        }        ZipResource r = new ZipResource();        r.setName("foo");        r.setArchive(f);        Set<PosixFilePermission> s =            EnumSet.of(PosixFilePermission.OWNER_READ,                       PosixFilePermission.OWNER_WRITE,                       PosixFilePermission.OWNER_EXECUTE,                       PosixFilePermission.GROUP_READ);        PermissionUtils.setPermissions(r, s, null);        assertEquals(s, PermissionUtils.getPermissions(r, null));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/PermissionUtilsTest.java    public void getSetPermissionsWorksForTarResources() throws IOException {        File f = File.createTempFile("ant", ".zip");        f.deleteOnExit();        try (TarOutputStream os = new TarOutputStream(new FileOutputStream(f))) {            TarEntry e = new TarEntry("foo");            os.putNextEntry(e);            os.closeEntry();        }        TarResource r = new TarResource();        r.setName("foo");        r.setArchive(f);        Set<PosixFilePermission> s =            EnumSet.of(PosixFilePermission.OWNER_READ,                       PosixFilePermission.OWNER_WRITE,                       PosixFilePermission.OWNER_EXECUTE,                       PosixFilePermission.GROUP_READ);        PermissionUtils.setPermissions(r, s, null);        assertEquals(s, PermissionUtils.getPermissions(r, null));    }
Clone class 217, 2 fragments, nominal size 10 lines, similarity 90%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/VectorSetTest.java    public void testRemoveIndex() {        v.add(O);        assertSame(O, v.remove(0));        assertEquals(0, v.size());        try {            v.remove(0);            fail("expected an AIOBE");        } catch (ArrayIndexOutOfBoundsException e) {            //TODO assert exception values            // expected        }    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/VectorSetTest.java    public void testRemoveElementAt() {        v.add(O);        v.removeElementAt(0);        assertEquals(0, v.size());        try {            v.removeElementAt(0);            fail("expected an AIOBE");        } catch (ArrayIndexOutOfBoundsException e) {            //TODO assert exception values            // expected        }    }
Clone class 218, 3 fragments, nominal size 15 lines, similarity 93%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/VectorSetTest.java    public void testRemoveAtEndWhenSizeEqualsCapacity() {        v = new VectorSet(3, 1);        Object a = new Object();        v.add(a);        Object b = new Object();        v.add(b);        v.add(O);        assertEquals(3, v.size());        assertEquals(3, v.capacity());        assertTrue(v.remove(O));        assertEquals(2, v.size());        assertFalse(v.remove(O));        assertSame(a, v.elementAt(0));        assertSame(b, v.elementAt(1));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/VectorSetTest.java    public void testRemoveAtFrontWhenSizeEqualsCapacity() {        v = new VectorSet(3, 1);        v.add(O);        Object a = new Object();        v.add(a);        Object b = new Object();        v.add(b);        assertEquals(3, v.size());        assertEquals(3, v.capacity());        assertTrue(v.remove(O));        assertEquals(2, v.size());        assertFalse(v.remove(O));        assertSame(a, v.elementAt(0));        assertSame(b, v.elementAt(1));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/VectorSetTest.java    public void testRemoveInMiddleWhenSizeEqualsCapacity() {        v = new VectorSet(3, 1);        Object a = new Object();        v.add(a);        v.add(O);        Object b = new Object();        v.add(b);        assertEquals(3, v.size());        assertEquals(3, v.capacity());        assertTrue(v.remove(O));        assertEquals(2, v.size());        assertFalse(v.remove(O));        assertSame(a, v.elementAt(0));        assertSame(b, v.elementAt(1));    }
Clone class 219, 2 fragments, nominal size 11 lines, similarity 75%
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/VectorSetTest.java    public void testRemoveRange() {        Object a = new Object();        Object b = new Object();        Object c = new Object();        v.addAll(Arrays.asList(new Object[] {O, a, b, c}));        v.removeRange(1, 3);        assertEquals(2, v.size());        assertTrue(v.contains(O));        assertTrue(v.contains(c));    }
apache_ant/ant/src/tests/junit/org/apache/tools/ant/util/VectorSetTest.java    public void testRetainAll() {        Object a = new Object();        Object b = new Object();        Object c = new Object();        v.addAll(Arrays.asList(new Object[] {O, a, b, c}));        assertEquals(0, v.indexOf(O));        assertTrue(v.retainAll(Arrays.asList(new Object[] {c, O})));        assertEquals(2, v.size());        assertTrue(v.contains(O));        assertTrue(v.contains(c));        assertEquals(0, v.indexOf(O));    }
Clone class 220, 6 fragments, nominal size 20 lines, similarity 77%
apache_ant/ant/src/tests/junit/org/apache/tools/mail/MailMessageTest.java    public void testAPIExample() throws InterruptedException {        ServerThread testMailServer = new ServerThread();        Thread server = new Thread(testMailServer);        server.start();        ClientThread testMailClient = new ClientThread();        testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>");        testMailClient.to("to@you.com");        testMailClient.cc("cc1@you.com");        testMailClient.cc("cc2@you.com");        testMailClient.bcc("bcc@you.com");        testMailClient.setSubject("Test subject");        testMailClient.setMessage( "test line 1\n" +            "test line 2" );        Thread client = new Thread(testMailClient);        client.start();        server.join(60 * 1000); // 60s        client.join(30 * 1000); // a further 30s        String result = testMailServer.getResult();        String expectedResult = "220 test SMTP EmailTaskTest\r\n" +        "HELO " + local + "\r\n" +        "250 " + local + " Hello " + local + " [127.0.0.1], pleased to meet you\r\n" +        "MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n" +        "250\r\n" +        "RCPT TO: <to@you.com>\r\n" +        "250\r\n" +        "RCPT TO: <cc1@you.com>\r\n" +        "250\r\n" +        "RCPT TO: <cc2@you.com>\r\n" +        "250\r\n" +        "RCPT TO: <bcc@you.com>\r\n" +        "250\r\n" +        "DATA\r\n" +        "354\r\n" +        "Subject: Test subject\r\n" +        "From: Mail Message <EmailTaskTest@ant.apache.org>\r\n" +        "To: to@you.com\r\n" +        "Cc: cc1@you.com, cc2@you.com\r\n" +        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +        "\r\n" +        "test line 1\r\n" +        "test line 2\r\n" +        "\r\n" +        ".\r\n" +        "250\r\n" +        "QUIT\r\n" +        "221\r\n";        /*for (int icounter = 0; icounter<expectedResult.length(); icounter++) {            if (icounter < result.length()) {                if (expectedResult.charAt(icounter) != result.charAt(icounter)) {                    System.out.println("posit " + icounter + " expected "                        + expectedResult.charAt(icounter)                    + " result " + result.charAt(icounter));                }            }        }        if (expectedResult.length()>result.length()) {            System.out.println("excedent of expected result "                + expectedResult.substring(result.length()));        }        if (expectedResult.length()<result.length()) {            System.out.println("excedent of result "                + result.substring(expectedResult.length()));        }*/        assertEquals(expectedResult.length(), result.length());        assertEquals(expectedResult, result); // order of headers cannot be guaranteed        assertFalse(testMailClient.getFailMessage(), testMailClient.isFailed());    }
apache_ant/ant/src/tests/junit/org/apache/tools/mail/MailMessageTest.java    public void testBccOnly() throws InterruptedException {        ServerThread testMailServer = new ServerThread();        Thread server = new Thread(testMailServer);        server.start();        ClientThread testMailClient = new ClientThread();        testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>");        testMailClient.bcc("bcc@you.com");        testMailClient.setSubject("Test subject");        testMailClient.setMessage( "test line 1\n" +            "test line 2" );        Thread client = new Thread(testMailClient);        client.start();        server.join(60 * 1000); // 60s        client.join(30 * 1000); // a further 30s        String result = testMailServer.getResult();        String expectedResult = "220 test SMTP EmailTaskTest\r\n" +        "HELO " + local + "\r\n" +        "250 " + local + " Hello " + local + " [127.0.0.1], pleased to meet you\r\n" +        "MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n" +        "250\r\n" +        "RCPT TO: <bcc@you.com>\r\n" +        "250\r\n" +        "DATA\r\n" +        "354\r\n" +        "Subject: Test subject\r\n" +        "From: Mail Message <EmailTaskTest@ant.apache.org>\r\n" +        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +        "\r\n" +        "test line 1\r\n" +        "test line 2\r\n" +        "\r\n" +        ".\r\n" +        "250\r\n" +        "QUIT\r\n" +        "221\r\n";        assertEquals( expectedResult.length(), result.length() );        assertEquals( expectedResult, result );        assertFalse(testMailClient.getFailMessage(), testMailClient.isFailed());    }
apache_ant/ant/src/tests/junit/org/apache/tools/mail/MailMessageTest.java    public void testNoSubject() throws InterruptedException {        ServerThread testMailServer = new ServerThread();        Thread server = new Thread(testMailServer);        server.start();        ClientThread testMailClient = new ClientThread();        testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>");        testMailClient.to("to@you.com");        testMailClient.setMessage( "test line 1\n" +            "test line 2" );        Thread client = new Thread(testMailClient);        client.start();        server.join(60 * 1000); // 60s        client.join(30 * 1000); // a further 30s        String result = testMailServer.getResult();        String expectedResult = "220 test SMTP EmailTaskTest\r\n" +        "HELO " + local + "\r\n" +        "250 " + local + " Hello " + local + " [127.0.0.1], pleased to meet you\r\n" +        "MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n" +        "250\r\n" +        "RCPT TO: <to@you.com>\r\n" +        "250\r\n" +        "DATA\r\n" +        "354\r\n" +        "From: Mail Message <EmailTaskTest@ant.apache.org>\r\n" +            "To: to@you.com\r\n" +        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +        "\r\n" +        "test line 1\r\n" +        "test line 2\r\n" +        "\r\n" +        ".\r\n" +        "250\r\n" +        "QUIT\r\n" +        "221\r\n";        assertEquals( expectedResult.length(), result.length() );        assertEquals( expectedResult, result );        assertFalse(testMailClient.getFailMessage(), testMailClient.isFailed());    }
apache_ant/ant/src/tests/junit/org/apache/tools/mail/MailMessageTest.java    public void testCcOnly() throws InterruptedException {        ServerThread testMailServer = new ServerThread();        Thread server = new Thread(testMailServer);        server.start();        ClientThread testMailClient = new ClientThread();        testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>");        testMailClient.cc("cc@you.com");        testMailClient.setSubject("Test subject");        testMailClient.setMessage( "test line 1\n" +            "test line 2" );        Thread client = new Thread(testMailClient);        client.start();        server.join(60 * 1000); // 60s        client.join(30 * 1000); // a further 30s        String result = testMailServer.getResult();        String expectedResult = "220 test SMTP EmailTaskTest\r\n" +        "HELO " + local + "\r\n" +        "250 " + local + " Hello " + local + " [127.0.0.1], pleased to meet you\r\n" +        "MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n" +        "250\r\n" +        "RCPT TO: <cc@you.com>\r\n" +        "250\r\n" +        "DATA\r\n" +        "354\r\n" +        "Subject: Test subject\r\n" +            "From: Mail Message <EmailTaskTest@ant.apache.org>\r\n" +            "Cc: cc@you.com\r\n" +        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +        "\r\n" +        "test line 1\r\n" +        "test line 2\r\n" +        "\r\n" +        ".\r\n" +        "250\r\n" +        "QUIT\r\n" +        "221\r\n";        assertEquals(expectedResult.length(), result.length());        assertEquals(expectedResult, result);        assertFalse(testMailClient.getFailMessage(), testMailClient.isFailed());    }
apache_ant/ant/src/tests/junit/org/apache/tools/mail/MailMessageTest.java    public void testEmptyBody() throws InterruptedException {        ServerThread testMailServer = new ServerThread();        Thread server = new Thread(testMailServer);        server.start();        ClientThread testMailClient = new ClientThread();        testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>");        testMailClient.to("to@you.com");        testMailClient.setSubject("Test subject");        testMailClient.setMessage("");        Thread client = new Thread(testMailClient);        client.start();        server.join(60 * 1000); // 60s        client.join(30 * 1000); // a further 30s        String result = testMailServer.getResult();        String expectedResult = "220 test SMTP EmailTaskTest\r\n" +        "HELO " + local + "\r\n" +        "250 " + local + " Hello " + local + " [127.0.0.1], pleased to meet you\r\n" +        "MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n" +        "250\r\n" +        "RCPT TO: <to@you.com>\r\n" +        "250\r\n" +        "DATA\r\n" +        "354\r\n" +        "Subject: Test subject\r\n" +            "From: Mail Message <EmailTaskTest@ant.apache.org>\r\n" +            "To: to@you.com\r\n" +        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +        "\r\n" +        "\r\n" +        "\r\n" +        ".\r\n" +        "250\r\n" +        "QUIT\r\n" +        "221\r\n";        assertEquals(expectedResult.length(), result.length());        assertEquals(expectedResult, result);        assertFalse(testMailClient.getFailMessage(), testMailClient.isFailed());    }
apache_ant/ant/src/tests/junit/org/apache/tools/mail/MailMessageTest.java    public void testToOnly() throws InterruptedException {        ServerThread testMailServer = new ServerThread();        Thread server = new Thread(testMailServer);        server.start();        ClientThread testMailClient = new ClientThread();        testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>");        testMailClient.to("to@you.com");        testMailClient.setSubject("Test subject");        testMailClient.setMessage( "test line 1\n" +            "test line 2" );        Thread client = new Thread(testMailClient);        client.start();        server.join(60 * 1000); // 60s        client.join(30 * 1000); // a further 30s        String result = testMailServer.getResult();        String expectedResult = "220 test SMTP EmailTaskTest\r\n" +        "HELO " + local + "\r\n" +        "250 " + local + " Hello " + local + " [127.0.0.1], pleased to meet you\r\n" +        "MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n" +        "250\r\n" +        "RCPT TO: <to@you.com>\r\n" +        "250\r\n" +        "DATA\r\n" +        "354\r\n" +        "Subject: Test subject\r\n" +            "From: Mail Message <EmailTaskTest@ant.apache.org>\r\n" +            "To: to@you.com\r\n" +        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +        "\r\n" +        "test line 1\r\n" +        "test line 2\r\n" +        "\r\n" +        ".\r\n" +        "250\r\n" +        "QUIT\r\n" +        "221\r\n";        assertEquals(expectedResult.length(), result.length());        assertEquals(expectedResult, result); // order of headers cannot be guaranteed        assertFalse(testMailClient.getFailMessage(), testMailClient.isFailed());    }
